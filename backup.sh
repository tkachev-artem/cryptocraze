#!/bin/bash

# CryptoCraze Data Backup Script
# –ü–æ–ª–Ω—ã–π –±—ç–∫–∞–ø –≤—Å–µ—Ö –¥–∞–Ω–Ω—ã—Ö: –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, —Å–¥–µ–ª–∫–∏, –Ω–∞–≥—Ä–∞–¥—ã, –∞–Ω–∞–ª–∏—Ç–∏–∫–∞
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./backup.sh [restore] [backup_path]

set -e

echo "üíæ CryptoCraze Data Backup Script"
echo "=================================="

# –¶–≤–µ—Ç–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m'

log() {
    echo -e "${GREEN}[$(date +'%H:%M:%S')]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[$(date +'%H:%M:%S')] WARNING:${NC} $1"
}

error() {
    echo -e "${RED}[$(date +'%H:%M:%S')] ERROR:${NC} $1"
    exit 1
}

info() {
    echo -e "${BLUE}[$(date +'%H:%M:%S')] INFO:${NC} $1"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞
create_backup() {
    local backup_name="${1:-$(date +%Y%m%d_%H%M%S)}"
    local backup_dir="backups/$backup_name"
    
    log "–°–æ–∑–¥–∞–Ω–∏–µ –ø–æ–ª–Ω–æ–≥–æ –±—ç–∫–∞–ø–∞ –≤ $backup_dir..."
    mkdir -p "$backup_dir"
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ —á—Ç–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –∑–∞–ø—É—â–µ–Ω—ã
    if ! docker-compose ps | grep -q "Up"; then
        error "–ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –Ω–µ –∑–∞–ø—É—â–µ–Ω—ã. –ó–∞–ø—É—Å—Ç–∏—Ç–µ –∏—Ö –∫–æ–º–∞–Ω–¥–æ–π: docker-compose up -d"
    fi
    
    # –ë—ç–∫–∞–ø PostgreSQL (–æ—Å–Ω–æ–≤–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π)
    log "–ë—ç–∫–∞–ø PostgreSQL (–ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏, —Å–µ—Å—Å–∏–∏, –Ω–∞–≥—Ä–∞–¥—ã)..."
    docker-compose exec -T postgres pg_dump -U postgres --clean --create crypto_analyzer > "$backup_dir/postgres_full.sql" || error "–û—à–∏–±–∫–∞ –±—ç–∫–∞–ø–∞ PostgreSQL"
    
    # –ë—ç–∫–∞–ø –æ—Ç–¥–µ–ª—å–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü PostgreSQL –¥–ª—è —É–¥–æ–±—Å—Ç–≤–∞
    log "–≠–∫—Å–ø–æ—Ä—Ç —Ç–∞–±–ª–∏—Ü PostgreSQL..."
    
    # –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏
    docker-compose exec -T postgres psql -U postgres -d crypto_analyzer -c "COPY users TO STDOUT WITH CSV HEADER;" > "$backup_dir/users.csv" || warn "–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É users"
    
    # –°–¥–µ–ª–∫–∏
    docker-compose exec -T postgres psql -U postgres -d crypto_analyzer -c "COPY deals TO STDOUT WITH CSV HEADER;" > "$backup_dir/deals.csv" || warn "–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É deals"
    
    # –ù–∞–≥—Ä–∞–¥—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    docker-compose exec -T postgres psql -U postgres -d crypto_analyzer -c "COPY user_rewards TO STDOUT WITH CSV HEADER;" > "$backup_dir/user_rewards.csv" || warn "–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É user_rewards"
    
    # –ó–∞–¥–∞–Ω–∏—è
    docker-compose exec -T postgres psql -U postgres -d crypto_analyzer -c "COPY tasks TO STDOUT WITH CSV HEADER;" > "$backup_dir/tasks.csv" || warn "–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É tasks"
    
    # –í—ã–ø–æ–ª–Ω–µ–Ω–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
    docker-compose exec -T postgres psql -U postgres -d crypto_analyzer -c "COPY user_tasks TO STDOUT WITH CSV HEADER;" > "$backup_dir/user_tasks.csv" || warn "–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É user_tasks"
    
    # –°–µ—Å—Å–∏–∏
    docker-compose exec -T postgres psql -U postgres -d crypto_analyzer -c "COPY sessions TO STDOUT WITH CSV HEADER;" > "$backup_dir/sessions.csv" || warn "–ù–µ —É–¥–∞–ª–æ—Å—å —ç–∫—Å–ø–æ—Ä—Ç–∏—Ä–æ–≤–∞—Ç—å —Ç–∞–±–ª–∏—Ü—É sessions"
    
    # –ë—ç–∫–∞–ø ClickHouse (–∞–Ω–∞–ª–∏—Ç–∏–∫–∞)
    log "–ë—ç–∫–∞–ø ClickHouse (–∞–Ω–∞–ª–∏—Ç–∏–∫–∞ –∏ —Å–æ–±—ã—Ç–∏—è)..."
    
    # –°–æ–∑–¥–∞–Ω–∏–µ —Å–ø–∏—Å–∫–∞ —Ç–∞–±–ª–∏—Ü
    docker-compose exec -T clickhouse clickhouse-client --query "SHOW TABLES FROM cryptocraze_analytics" > "$backup_dir/clickhouse_tables.txt" || warn "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü ClickHouse"
    
    # –≠–∫—Å–ø–æ—Ä—Ç –≤—Å–µ—Ö –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö
    tables=("user_events" "ad_events" "trade_events" "screen_views" "user_actions")
    
    for table in "${tables[@]}"; do
        log "–≠–∫—Å–ø–æ—Ä—Ç —Ç–∞–±–ª–∏—Ü—ã ClickHouse: $table..."
        docker-compose exec -T clickhouse clickhouse-client --query "SELECT * FROM cryptocraze_analytics.$table FORMAT CSVWithNames" > "$backup_dir/clickhouse_${table}.csv" 2>/dev/null || warn "–¢–∞–±–ª–∏—Ü–∞ $table –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞"
        
        # –¢–∞–∫–∂–µ —Å–æ–∑–¥–∞–µ–º —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã
        docker-compose exec -T clickhouse clickhouse-client --query "SHOW CREATE TABLE cryptocraze_analytics.$table" > "$backup_dir/clickhouse_${table}_structure.sql" 2>/dev/null || warn "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É —Ç–∞–±–ª–∏—Ü—ã $table"
    done
    
    # –ë—ç–∫–∞–ø Redis (–∫—ç—à –∏ —Å–µ—Å—Å–∏–∏)
    log "–ë—ç–∫–∞–ø Redis (–∫—ç—à –∏ –≤—Ä–µ–º–µ–Ω–Ω—ã–µ –¥–∞–Ω–Ω—ã–µ)..."
    docker-compose exec -T redis redis-cli --rdb - > "$backup_dir/redis_backup.rdb" || warn "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø Redis"
    
    # –¢–∞–∫–∂–µ —ç–∫—Å–ø–æ—Ä—Ç –∫–ª—é—á–µ–π Redis –≤ —á–∏—Ç–∞–µ–º–æ–º –≤–∏–¥–µ
    docker-compose exec -T redis redis-cli --scan > "$backup_dir/redis_keys.txt" || warn "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ –∫–ª—é—á–µ–π Redis"
    
    # –ë—ç–∫–∞–ø —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    log "–ë—ç–∫–∞–ø —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π (–∞–≤–∞—Ç–∞—Ä—ã, –∑–∞–≥—Ä—É–∑–∫–∏)..."
    if [ -d "./uploads" ]; then
        cp -r ./uploads "$backup_dir/" || warn "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø–∞–ø–∫—É uploads"
    fi
    
    # –ë—ç–∫–∞–ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
    log "–ë—ç–∫–∞–ø –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
    cp .env* "$backup_dir/" 2>/dev/null || warn "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å —Ñ–∞–π–ª—ã –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏"
    cp docker-compose.yml "$backup_dir/" || warn "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å docker-compose.yml"
    cp package.json "$backup_dir/" || warn "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å package.json"
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç–∞–¥–∞–Ω–Ω—ã—Ö –±—ç–∫–∞–ø–∞
    cat > "$backup_dir/backup_info.json" << EOF
{
  "timestamp": "$(date -Iseconds)",
  "version": "$(git rev-parse HEAD 2>/dev/null || echo 'unknown')",
  "environment": "$(grep NODE_ENV .env.production 2>/dev/null || echo 'unknown')",
  "domain": "$(grep NGROK_DOMAIN .env.production 2>/dev/null || echo 'unknown')",
  "backup_type": "full",
  "components": [
    "postgresql_data",
    "clickhouse_analytics", 
    "redis_cache",
    "user_files",
    "configuration"
  ]
}
EOF
    
    # –°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞
    log "–°–æ–∑–¥–∞–Ω–∏–µ –∞—Ä—Ö–∏–≤–∞ –±—ç–∫–∞–ø–∞..."
    tar -czf "$backup_dir.tar.gz" -C "$(dirname "$backup_dir")" "$(basename "$backup_dir")" || error "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∞—Ä—Ö–∏–≤"
    
    # –í—ã—á–∏—Å–ª–µ–Ω–∏–µ —Ä–∞–∑–º–µ—Ä–∞
    local backup_size=$(du -sh "$backup_dir.tar.gz" | cut -f1)
    
    log "‚úÖ –ü–æ–ª–Ω—ã–π –±—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω:"
    info "   üìÅ –ü–∞–ø–∫–∞: $backup_dir"
    info "   üì¶ –ê—Ä—Ö–∏–≤: $backup_dir.tar.gz ($backup_size)"
    info "   üóìÔ∏è  –í—Ä–µ–º—è: $(date)"
    
    echo
    log "üìã –°–æ–¥–µ—Ä–∂–∏–º–æ–µ –±—ç–∫–∞–ø–∞:"
    ls -la "$backup_dir/"
}

# –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞
restore_backup() {
    local backup_path="$1"
    
    if [ -z "$backup_path" ]; then
        error "–£–∫–∞–∂–∏—Ç–µ –ø—É—Ç—å –∫ –±—ç–∫–∞–ø—É –¥–ª—è –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è"
    fi
    
    if [ ! -f "$backup_path" ] && [ ! -d "$backup_path" ]; then
        error "–ë—ç–∫–∞–ø –Ω–µ –Ω–∞–π–¥–µ–Ω: $backup_path"
    fi
    
    warn "‚ö†Ô∏è  –í–ù–ò–ú–ê–ù–ò–ï: –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–µ—Ä–µ–∑–∞–ø–∏—à–µ—Ç –≤—Å–µ —Ç–µ–∫—É—â–∏–µ –¥–∞–Ω–Ω—ã–µ!"
    read -p "–ü—Ä–æ–¥–æ–ª–∂–∏—Ç—å? (yes/no): " -r confirm
    
    if [ "$confirm" != "yes" ]; then
        info "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –æ—Ç–º–µ–Ω–µ–Ω–æ"
        exit 0
    fi
    
    log "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∏–∑ –±—ç–∫–∞–ø–∞: $backup_path"
    
    # –ï—Å–ª–∏ —ç—Ç–æ –∞—Ä—Ö–∏–≤ - —Ä–∞—Å–ø–∞–∫–æ–≤—ã–≤–∞–µ–º
    if [[ "$backup_path" == *.tar.gz ]]; then
        log "–†–∞—Å–ø–∞–∫–æ–≤–∫–∞ –∞—Ä—Ö–∏–≤–∞..."
        local extract_dir="temp_restore_$(date +%s)"
        mkdir -p "$extract_dir"
        tar -xzf "$backup_path" -C "$extract_dir" || error "–ù–µ —É–¥–∞–ª–æ—Å—å —Ä–∞—Å–ø–∞–∫–æ–≤–∞—Ç—å –∞—Ä—Ö–∏–≤"
        backup_path="$extract_dir/$(ls $extract_dir | head -1)"
    fi
    
    # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤ –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è
    log "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    docker-compose down || warn "–ù–µ —É–¥–∞–ª–æ—Å—å –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"
    
    # –ó–∞–ø—É—Å–∫ —Ç–æ–ª—å–∫–æ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö
    log "–ó–∞–ø—É—Å–∫ –±–∞–∑ –¥–∞–Ω–Ω—ã—Ö..."
    docker-compose up -d postgres redis clickhouse || error "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö"
    
    # –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏
    sleep 10
    
    # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ PostgreSQL
    if [ -f "$backup_path/postgres_full.sql" ]; then
        log "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ PostgreSQL..."
        docker-compose exec -T postgres dropdb -U postgres --if-exists crypto_analyzer || true
        docker-compose exec -T postgres createdb -U postgres crypto_analyzer || true
        docker-compose exec -T postgres psql -U postgres -d crypto_analyzer < "$backup_path/postgres_full.sql" || error "–û—à–∏–±–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è PostgreSQL"
    fi
    
    # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ ClickHouse
    if [ -f "$backup_path/clickhouse_tables.txt" ]; then
        log "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ ClickHouse..."
        # –ü–µ—Ä–µ—Å–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö
        docker-compose exec -T clickhouse clickhouse-client --query "DROP DATABASE IF EXISTS cryptocraze_analytics"
        docker-compose exec -T clickhouse clickhouse-client --query "CREATE DATABASE cryptocraze_analytics"
        
        # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä —Ç–∞–±–ª–∏—Ü –∏ –¥–∞–Ω–Ω—ã—Ö
        for structure_file in "$backup_path"/clickhouse_*_structure.sql; do
            if [ -f "$structure_file" ]; then
                log "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã: $(basename "$structure_file")"
                docker-compose exec -T clickhouse clickhouse-client < "$structure_file" || warn "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å—Ç—Ä—É–∫—Ç—É—Ä—É –∏–∑ $structure_file"
            fi
        done
    fi
    
    # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ Redis
    if [ -f "$backup_path/redis_backup.rdb" ]; then
        log "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ Redis..."
        docker-compose stop redis
        docker cp "$backup_path/redis_backup.rdb" $(docker-compose ps -q redis):/data/dump.rdb || warn "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å Redis"
        docker-compose start redis
    fi
    
    # –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤
    if [ -d "$backup_path/uploads" ]; then
        log "–í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π..."
        rm -rf ./uploads
        cp -r "$backup_path/uploads" ./ || warn "–ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Ñ–∞–π–ª—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π"
    fi
    
    # –ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
    log "–ó–∞–ø—É—Å–∫ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤..."
    docker-compose up -d || error "–ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å —Å–µ—Ä–≤–∏—Å—ã"
    
    # –û—á–∏—Å—Ç–∫–∞ –≤—Ä–µ–º–µ–Ω–Ω—ã—Ö —Ñ–∞–π–ª–æ–≤
    if [[ "$1" == *.tar.gz ]] && [ -d "$extract_dir" ]; then
        rm -rf "$extract_dir"
    fi
    
    log "‚úÖ –í–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
    info "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç—å –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
}

# –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤
list_backups() {
    log "–°–ø–∏—Å–æ–∫ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –±—ç–∫–∞–ø–æ–≤:"
    echo
    
    if [ ! -d "backups" ]; then
        warn "–ü–∞–ø–∫–∞ backups –Ω–µ –Ω–∞–π–¥–µ–Ω–∞"
        return
    fi
    
    local count=0
    for backup in backups/*; do
        if [ -d "$backup" ] || [[ "$backup" == *.tar.gz ]]; then
            local size
            if [ -f "$backup.tar.gz" ]; then
                size=$(du -sh "$backup.tar.gz" | cut -f1)
                echo "üì¶ $backup.tar.gz ($size)"
            elif [ -d "$backup" ]; then
                size=$(du -sh "$backup" | cut -f1)
                echo "üìÅ $backup ($size)"
            fi
            
            # –ü–æ–∫–∞–∑–∞—Ç—å –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –æ –±—ç–∫–∞–ø–µ –µ—Å–ª–∏ –µ—Å—Ç—å
            if [ -f "$backup/backup_info.json" ]; then
                local timestamp=$(grep '"timestamp"' "$backup/backup_info.json" | cut -d'"' -f4)
                local version=$(grep '"version"' "$backup/backup_info.json" | cut -d'"' -f4)
                echo "   üìÖ $timestamp (version: ${version:0:8})"
            fi
            echo
            count=$((count + 1))
        fi
    done
    
    if [ $count -eq 0 ]; then
        warn "–ë—ç–∫–∞–ø—ã –Ω–µ –Ω–∞–π–¥–µ–Ω—ã"
    else
        info "–ù–∞–π–¥–µ–Ω–æ –±—ç–∫–∞–ø–æ–≤: $count"
    fi
}

# –ì–ª–∞–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    case "${1:-backup}" in
        "backup")
            create_backup "$2"
            ;;
        "restore")
            restore_backup "$2"
            ;;
        "list")
            list_backups
            ;;
        *)
            echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [backup|restore|list] [–ø–∞—Ä–∞–º–µ—Ç—Ä—ã]"
            echo
            echo "–ö–æ–º–∞–Ω–¥—ã:"
            echo "  backup [name]     - –°–æ–∑–¥–∞—Ç—å –ø–æ–ª–Ω—ã–π –±—ç–∫–∞–ø (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é —Å —Ç–µ–∫—É—â–µ–π –¥–∞—Ç–æ–π)"
            echo "  restore <path>    - –í–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∏–∑ –±—ç–∫–∞–ø–∞"
            echo "  list             - –ü–æ–∫–∞–∑–∞—Ç—å —Å–ø–∏—Å–æ–∫ –±—ç–∫–∞–ø–æ–≤"
            echo
            echo "–ü—Ä–∏–º–µ—Ä—ã:"
            echo "  $0 backup"
            echo "  $0 backup production_stable"
            echo "  $0 restore backups/20241205_143022"
            echo "  $0 restore backups/20241205_143022.tar.gz"
            echo "  $0 list"
            ;;
    esac
}

main "$@"