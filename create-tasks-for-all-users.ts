import { TaskService } from './server/services/taskService';

// –°–æ–∑–¥–∞–¥–∏–º –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
const potentialUserIds = [
  '111907067370663926621', // –ò–∑ –ø—Ä–æ—à–ª—ã—Ö —Ç–µ—Å—Ç–æ–≤
  '116069980752518862717', // –ê–¥–º–∏–Ω
  // –î–æ–±–∞–≤–∏–º –µ—â–µ –Ω–µ—Å–∫–æ–ª—å–∫–æ –≤–æ–∑–º–æ–∂–Ω—ã—Ö ID
];

console.log('üéØ –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –≤—Å–µ—Ö –≤–æ–∑–º–æ–∂–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...\n');

async function createTasksForAllUsers() {
  for (const userId of potentialUserIds) {
    console.log(`\nüë§ –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
    
    try {
      // –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞–Ω–∏—è
      await TaskService.clearAllUserTasks(userId);
      console.log('   ‚úÖ –û—á–∏—â–µ–Ω—ã —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞–Ω–∏—è');
      
      // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è
      const tasks = await TaskService.getUserTasks(userId);
      console.log(`   ‚úÖ –°–æ–∑–¥–∞–Ω–æ ${tasks.length} –∑–∞–¥–∞–Ω–∏–π`);
      
      if (tasks.length > 0) {
        tasks.forEach((task, index) => {
          console.log(`   ${index + 1}. ${task.taskType} - ${task.title}`);
        });
      }
      
    } catch (error) {
      console.error(`   ‚ùå –û—à–∏–±–∫–∞ –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}:`, error);
    }
  }
  
  console.log('\nüîÑ –¢–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–∏—Ç–µ —Å—Ç—Ä–∞–Ω–∏—Ü—É –∏ –ø—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏ —Å–µ—Ä–≤–µ—Ä–∞!');
  console.log('–ò—â–∏—Ç–µ —Å—Ç—Ä–æ—á–∫—É: [ROUTES] üéØ FRONTEND REQUEST - Getting tasks for user: [ID]');
}

await createTasksForAllUsers();
console.log('\nüèÅ –ó–∞–¥–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã –¥–ª—è –≤—Å–µ—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π!');