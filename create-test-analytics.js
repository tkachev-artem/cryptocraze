// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å —Ä–∞–∑–Ω—ã–º–∏ IP –∞–¥—Ä–µ—Å–∞–º–∏ –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏

const testData = [
  { ip: '8.8.8.8', country: 'US', events: ['login', 'trade_open', 'screen_view'] },
  { ip: '77.88.8.8', country: 'RU', events: ['login', 'tutorial_start', 'ad_watch'] },
  { ip: '94.142.241.111', country: 'DE', events: ['login', 'price_stream_start', 'order_open'] },
  { ip: '46.36.218.186', country: 'GB', events: ['login', 'daily_reward_claimed', 'screen_view'] },
  { ip: '185.60.216.35', country: 'FR', events: ['login', 'trade_open', 'tutorial_complete'] },
  { ip: '203.0.113.1', country: 'AU', events: ['login', 'ad_watch', 'order_close_manual'] },
  { ip: '198.51.100.1', country: 'CA', events: ['login', 'premium_purchase', 'screen_view'] },
  { ip: '192.0.2.1', country: 'JP', events: ['login', 'trade_open', 'ads_consent'] }
];

async function createTestAnalytics() {
  console.log('üöÄ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏—Ö –¥–∞–Ω–Ω—ã—Ö —Å –≥–µ–æ–ª–æ–∫–∞—Ü–∏–µ–π...\n');

  for (let i = 0; i < testData.length; i++) {
    const { ip, country, events } = testData[i];
    
    console.log(`üìç –°–æ–∑–¥–∞–µ–º –¥–∞–Ω–Ω—ã–µ –¥–ª—è ${country} (IP: ${ip})`);
    
    for (const eventType of events) {
      try {
        const response = await fetch('http://localhost:1111/api/analytics/batch', {
          method: 'POST',
          headers: {
            'Content-Type': 'application/json',
            'X-Forwarded-For': ip,
            'X-Real-IP': ip,
            'User-Agent': `TestBot-${country}/1.0`
          },
          body: JSON.stringify({
            events: [{
              eventType: eventType,
              eventData: { 
                testData: true,
                country: country,
                sourceIP: ip,
                timestamp: new Date().toISOString()
              },
              sessionId: `test-session-${country}-${Date.now()}`,
              timestamp: new Date().toISOString()
            }]
          })
        });

        if (response.ok) {
          console.log(`   ‚úÖ ${eventType}`);
        } else {
          const error = await response.text();
          console.log(`   ‚ùå ${eventType}: ${response.status} - ${error}`);
        }
        
        // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
        await new Promise(resolve => setTimeout(resolve, 100));
        
      } catch (error) {
        console.log(`   üí• ${eventType}: ${error.message}`);
      }
    }
    
    console.log(''); // –ü—É—Å—Ç–∞—è —Å—Ç—Ä–æ–∫–∞ –¥–ª—è —Ä–∞–∑–¥–µ–ª–µ–Ω–∏—è
  }
}

async function createTestUsers() {
  console.log('üë• –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...\n');
  
  const testUsers = [
    { country: 'US', email: 'user.usa@test.com', name: 'John Smith' },
    { country: 'RU', email: 'user.russia@test.com', name: '–ò–≤–∞–Ω –ü–µ—Ç—Ä–æ–≤' },
    { country: 'DE', email: 'user.germany@test.com', name: 'Hans Mueller' },
    { country: 'GB', email: 'user.uk@test.com', name: 'James Wilson' },
    { country: 'FR', email: 'user.france@test.com', name: 'Pierre Dubois' }
  ];

  for (const user of testUsers) {
    const testIP = testData.find(d => d.country === user.country)?.ip || '127.0.0.1';
    
    try {
      const response = await fetch('http://localhost:1111/api/analytics/batch', {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'X-Forwarded-For': testIP,
          'X-Real-IP': testIP,
          'User-Agent': `TestUser-${user.country}/1.0`
        },
        body: JSON.stringify({
          events: [{
            eventType: 'user_register',
            eventData: { 
              email: user.email,
              name: user.name,
              country: user.country,
              testUser: true
            },
            sessionId: `registration-${user.country}-${Date.now()}`,
            timestamp: new Date().toISOString()
          }]
        })
      });

      if (response.ok) {
        console.log(`‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å ${user.name} (${user.country})`);
      } else {
        console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è ${user.name}: ${response.status}`);
      }
    } catch (error) {
      console.log(`üí• –û—à–∏–±–∫–∞ ${user.name}: ${error.message}`);
    }
    
    await new Promise(resolve => setTimeout(resolve, 200));
  }
}

async function runTestDataCreation() {
  console.log('üåç –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è –¥–µ–º–æ–Ω—Å—Ç—Ä–∞—Ü–∏–∏ –≥–µ–æ–ª–æ–∫–∞—Ü–∏–∏\n');
  console.log('=' .repeat(60));
  
  await createTestAnalytics();
  
  console.log('=' .repeat(60));
  await createTestUsers();
  
  console.log('=' .repeat(60));
  console.log('‚úÖ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –∑–∞–≤–µ—Ä—à–µ–Ω–æ!\n');
  console.log('üîç –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ –ø—Ä–æ–≤–µ—Ä–∏—Ç—å —Ä–µ–∑—É–ª—å—Ç–∞—Ç—ã:');
  console.log('   1. –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:1111');
  console.log('   2. –í–æ–π–¥–∏—Ç–µ –∫–∞–∫ –∞–¥–º–∏–Ω (exsiseprogram@gmail.com)');
  console.log('   3. –ü–µ—Ä–µ–π–¥–∏—Ç–µ –≤ Admin -> User Analytics');
  console.log('   4. –í—ã–±–µ—Ä–∏—Ç–µ –ª—é–±—É—é –º–µ—Ç—Ä–∏–∫—É (–Ω–∞–ø—Ä–∏–º–µ—Ä, Sessions)');
  console.log('   5. –í —Ç–∞–±–ª–∏—Ü–µ —É–≤–∏–¥–∏—Ç–µ –∫–æ–ª–æ–Ω–∫—É "Region" —Å —Ä–∞–∑–Ω—ã–º–∏ —Å—Ç—Ä–∞–Ω–∞–º–∏:');
  console.log('      ‚Ä¢ US (United States)');
  console.log('      ‚Ä¢ RU (Russia)');  
  console.log('      ‚Ä¢ DE (Germany)');
  console.log('      ‚Ä¢ GB (United Kingdom)');
  console.log('      ‚Ä¢ FR (France)');
  console.log('      ‚Ä¢ AU (Australia)');
  console.log('      ‚Ä¢ CA (Canada)');
  console.log('      ‚Ä¢ JP (Japan)\n');
}

runTestDataCreation().catch(console.error);
