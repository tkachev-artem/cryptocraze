#!/bin/bash

# CryptoCraze Production Deployment Script
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–π –¥–µ–ø–ª–æ–π —Å ngrok –∏–Ω—Ç–µ–≥—Ä–∞—Ü–∏–µ–π –∏ –ø–æ–ª–Ω—ã–º —Å–æ—Ö—Ä–∞–Ω–µ–Ω–∏–µ–º –¥–∞–Ω–Ω—ã—Ö
# –ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: ./deploy.sh

set -e  # –û—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ

echo "üöÄ CryptoCraze Production Deployment Script"
echo "=========================================="

# –¶–≤–µ—Ç–∞ –¥–ª—è –≤—ã–≤–æ–¥–∞
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

# –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ª–æ–≥–∏—Ä–æ–≤–∞–Ω–∏—è
log() {
    echo -e "${GREEN}[$(date +'%H:%M:%S')]${NC} $1"
}

warn() {
    echo -e "${YELLOW}[$(date +'%H:%M:%S')] WARNING:${NC} $1"
}

error() {
    echo -e "${RED}[$(date +'%H:%M:%S')] ERROR:${NC} $1"
    exit 1
}

info() {
    echo -e "${BLUE}[$(date +'%H:%M:%S')] INFO:${NC} $1"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    if ! command -v docker &> /dev/null; then
        error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
    fi
    
    if ! command -v docker-compose &> /dev/null; then
        error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Docker Compose –∏ –ø–æ–ø—Ä–æ–±—É–π—Ç–µ —Å–Ω–æ–≤–∞."
    fi
    
    log "‚úÖ –í—Å–µ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –¥–∞–Ω–Ω—ã—Ö
backup_data() {
    log "–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ –¥–∞–Ω–Ω—ã—Ö..."
    
    BACKUP_DIR="backups/$(date +%Y%m%d_%H%M%S)"
    mkdir -p "$BACKUP_DIR"
    
    # –ë—ç–∫–∞–ø –±–∞–∑—ã –¥–∞–Ω–Ω—ã—Ö PostgreSQL
    if docker-compose ps postgres | grep -q "Up"; then
        log "–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ PostgreSQL..."
        docker-compose exec -T postgres pg_dump -U postgres crypto_analyzer > "$BACKUP_DIR/postgres_backup.sql" || warn "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø PostgreSQL"
    fi
    
    # –ë—ç–∫–∞–ø ClickHouse –¥–∞–Ω–Ω—ã—Ö
    if docker-compose ps clickhouse | grep -q "Up"; then
        log "–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ ClickHouse..."
        docker-compose exec -T clickhouse clickhouse-client --query "SHOW TABLES FROM cryptocraze_analytics" > "$BACKUP_DIR/clickhouse_tables.txt" || warn "–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Å–ø–∏—Å–æ–∫ —Ç–∞–±–ª–∏—Ü ClickHouse"
        
        # –≠–∫—Å–ø–æ—Ä—Ç –æ—Å–Ω–æ–≤–Ω—ã—Ö —Ç–∞–±–ª–∏—Ü
        for table in user_events ad_events trade_events; do
            docker-compose exec -T clickhouse clickhouse-client --query "SELECT * FROM cryptocraze_analytics.$table FORMAT CSVWithNames" > "$BACKUP_DIR/clickhouse_${table}.csv" 2>/dev/null || warn "–¢–∞–±–ª–∏—Ü–∞ $table –Ω–µ –Ω–∞–π–¥–µ–Ω–∞ –∏–ª–∏ –ø—É—Å—Ç–∞"
        done
    fi
    
    # –ë—ç–∫–∞–ø Redis –¥–∞–Ω–Ω—ã—Ö
    if docker-compose ps redis | grep -q "Up"; then
        log "–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ Redis..."
        docker-compose exec -T redis redis-cli --rdb - > "$BACKUP_DIR/redis_backup.rdb" || warn "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –±—ç–∫–∞–ø Redis"
    fi
    
    # –ë—ç–∫–∞–ø —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    if [ -d "./uploads" ]; then
        log "–°–æ–∑–¥–∞–Ω–∏–µ –±—ç–∫–∞–ø–∞ —Ñ–∞–π–ª–æ–≤ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π..."
        cp -r ./uploads "$BACKUP_DIR/" || warn "–ù–µ —É–¥–∞–ª–æ—Å—å —Å–∫–æ–ø–∏—Ä–æ–≤–∞—Ç—å –ø–∞–ø–∫—É uploads"
    fi
    
    log "‚úÖ –ë—ç–∫–∞–ø —Å–æ–∑–¥–∞–Ω –≤ $BACKUP_DIR"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏
check_config() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏–∏..."
    
    if [ ! -f ".env.production" ]; then
        error "–§–∞–π–ª .env.production –Ω–µ –Ω–∞–π–¥–µ–Ω!"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –æ–±—è–∑–∞—Ç–µ–ª—å–Ω—ã—Ö –ø–µ—Ä–µ–º–µ–Ω–Ω—ã—Ö
    source .env.production
    
    if [ -z "$NGROK_AUTHTOKEN" ]; then
        error "NGROK_AUTHTOKEN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env.production"
    fi
    
    if [ -z "$NGROK_DOMAIN" ]; then
        error "NGROK_DOMAIN –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env.production"
    fi
    
    if [ -z "$GOOGLE_CLIENT_ID" ]; then
        error "GOOGLE_CLIENT_ID –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env.production"
    fi
    
    if [ -z "$GOOGLE_CLIENT_SECRET" ]; then
        error "GOOGLE_CLIENT_SECRET –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω –≤ .env.production"
    fi
    
    log "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –≤–∞–ª–∏–¥–Ω–∞"
    info "Ngrok –¥–æ–º–µ–Ω: $NGROK_DOMAIN"
}

# –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤
stop_containers() {
    log "–û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
    
    if docker-compose ps | grep -q "Up"; then
        docker-compose down || warn "–ù–µ —É–¥–∞–ª–æ—Å—å –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã"
    fi
    
    log "‚úÖ –ö–æ–Ω—Ç–µ–π–Ω–µ—Ä—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
}

# –°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è
build_application() {
    log "–°–±–æ—Ä–∫–∞ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è..."
    
    # –°–±–æ—Ä–∫–∞ —Å –∫—ç—à–µ–º –¥–ª—è —É—Å–∫–æ—Ä–µ–Ω–∏—è
    docker-compose build --parallel || error "–û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–±–æ—Ä–∫–µ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"
    
    log "‚úÖ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ —Å–æ–±—Ä–∞–Ω–æ"
}

# –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
start_services() {
    log "–ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    # –ó–∞–ø—É—Å–∫ –≤ production —Ä–µ–∂–∏–º–µ
    NODE_ENV=production docker-compose up -d || error "–û—à–∏–±–∫–∞ –ø—Ä–∏ –∑–∞–ø—É—Å–∫–µ —Å–µ—Ä–≤–∏—Å–æ–≤"
    
    log "‚úÖ –°–µ—Ä–≤–∏—Å—ã –∑–∞–ø—É—â–µ–Ω—ã"
}

# –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤
wait_for_services() {
    log "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    # –ñ–¥–µ–º –ø–æ–∫–∞ –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã —Å—Ç–∞–Ω—É—Ç healthy
    max_attempts=30
    attempt=1
    
    while [ $attempt -le $max_attempts ]; do
        if docker-compose ps | grep -q "healthy"; then
            if [ "$(docker-compose ps --filter "health=healthy" --quiet | wc -l)" -eq "$(docker-compose ps --quiet | wc -l)" ]; then
                break
            fi
        fi
        
        info "–û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤... ($attempt/$max_attempts)"
        sleep 10
        attempt=$((attempt + 1))
    done
    
    if [ $attempt -gt $max_attempts ]; then
        error "–ü—Ä–µ–≤—ã—à–µ–Ω–æ –≤—Ä–µ–º—è –æ–∂–∏–¥–∞–Ω–∏—è –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤"
    fi
    
    log "‚úÖ –í—Å–µ —Å–µ—Ä–≤–∏—Å—ã –≥–æ—Ç–æ–≤—ã"
}

# –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏
health_check() {
    log "–ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏..."
    
    source .env.production
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –ª–æ–∫–∞–ª—å–Ω–æ–≥–æ API
    if ! curl -s -f http://localhost:1111/health > /dev/null; then
        error "–õ–æ–∫–∞–ª—å–Ω—ã–π API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ ngrok –¥–æ–º–µ–Ω–∞
    if ! curl -s -f "https://$NGROK_DOMAIN/health" > /dev/null; then
        warn "Ngrok –¥–æ–º–µ–Ω –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω, –Ω–æ –ª–æ–∫–∞–ª—å–Ω—ã–π API —Ä–∞–±–æ—Ç–∞–µ—Ç"
        info "–í–æ–∑–º–æ–∂–Ω–æ —É –≤–∞—Å —É–∂–µ –∑–∞–ø—É—â–µ–Ω–∞ –¥—Ä—É–≥–∞—è ngrok —Å–µ—Å—Å–∏—è"
    else
        log "‚úÖ Ngrok –¥–æ–º–µ–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç: https://$NGROK_DOMAIN"
    fi
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ Google OAuth
    oauth_response=$(curl -s -I "https://$NGROK_DOMAIN/api/auth/google" | head -n 1)
    if echo "$oauth_response" | grep -q "302\|Found"; then
        log "‚úÖ Google OAuth –Ω–∞—Å—Ç—Ä–æ–µ–Ω –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
    else
        warn "Google OAuth –º–æ–∂–µ—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ"
    fi
    
    log "‚úÖ –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–∞–±–æ—Ç–æ—Å–ø–æ—Å–æ–±–Ω–æ—Å—Ç–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
}

# –ü–æ–∫–∞–∑ —Å—Ç–∞—Ç—É—Å–∞
show_status() {
    log "–°—Ç–∞—Ç—É—Å —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏—è:"
    echo
    echo "üåê URLs:"
    echo "   ‚Ä¢ –õ–æ–∫–∞–ª—å–Ω—ã–π: http://localhost:1111"
    
    source .env.production
    echo "   ‚Ä¢ –ü—É–±–ª–∏—á–Ω—ã–π: https://$NGROK_DOMAIN"
    echo "   ‚Ä¢ Admin –ø–∞–Ω–µ–ª—å: https://$NGROK_DOMAIN/admin/dashboard"
    echo
    echo "üìä –°–µ—Ä–≤–∏—Å—ã:"
    docker-compose ps --format "table {{.Name}}\t{{.Status}}\t{{.Ports}}"
    echo
    echo "üìù –õ–æ–≥–∏: docker-compose logs -f"
    echo "üîÑ –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: docker-compose restart"
    echo "‚èπÔ∏è  –û—Å—Ç–∞–Ω–æ–≤–∫–∞: docker-compose down"
    echo
}

# –û—Å–Ω–æ–≤–Ω–æ–π –ø—Ä–æ—Ü–µ—Å—Å –¥–µ–ø–ª–æ—è
main() {
    echo
    log "–ù–∞—á–∏–Ω–∞–µ–º –¥–µ–ø–ª–æ–π CryptoCraze..."
    echo
    
    check_dependencies
    backup_data
    check_config
    stop_containers
    build_application
    start_services
    wait_for_services
    health_check
    show_status
    
    echo
    log "üéâ –î–µ–ø–ª–æ–π —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω!"
    echo
    source .env.production
    echo -e "${GREEN}üöÄ –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –¥–æ—Å—Ç—É–ø–Ω–æ –ø–æ –∞–¥—Ä–µ—Å—É: https://$NGROK_DOMAIN${NC}"
    echo -e "${BLUE}üìä –ê–¥–º–∏–Ω–∫–∞: https://$NGROK_DOMAIN/admin/dashboard${NC}"
    echo
}

# –û–±—Ä–∞–±–æ—Ç–∫–∞ —Å–∏–≥–Ω–∞–ª–æ–≤ –¥–ª—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ–≥–æ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è
trap 'error "–î–µ–ø–ª–æ–π –ø—Ä–µ—Ä–≤–∞–Ω –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–º"' INT TERM

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –ø—Ä–æ—Ü–µ—Å—Å–∞
main "$@"