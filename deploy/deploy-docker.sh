#!/bin/bash

# ============================================
# CryptoCraze Quick Docker Deployment
# ============================================
# –ë—ã—Å—Ç—Ä–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ —Å–∏—Å—Ç–µ–º—ã –≤ Docker

set -e  # –í—ã—Ö–æ–¥ –ø—Ä–∏ –ª—é–±–æ–π –æ—à–∏–±–∫–µ

echo "üöÄ –ë—ã—Å—Ç—Ä–æ–µ —Ä–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ CryptoCraze –≤ Docker..."
echo "=================================================="

# –¶–≤–µ—Ç–∞ –¥–ª—è –ª–æ–≥–æ–≤
RED='\033[0;31m'
GREEN='\033[0;32m'
YELLOW='\033[1;33m'
BLUE='\033[0;34m'
NC='\033[0m' # No Color

log() {
    echo -e "${GREEN}[$(date +'%H:%M:%S')] $1${NC}"
}

error() {
    echo -e "${RED}[$(date +'%H:%M:%S')] ERROR: $1${NC}"
    exit 1
}

warn() {
    echo -e "${YELLOW}[$(date +'%H:%M:%S')] WARNING: $1${NC}"
}

info() {
    echo -e "${BLUE}[$(date +'%H:%M:%S')] INFO: $1${NC}"
}

# ============================================
# –ü–†–û–í–ï–†–ö–ê –ì–û–¢–û–í–ù–û–°–¢–ò
# ============================================

log "üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ñ–∞–π–ª–æ–≤..."

# –ü–µ—Ä–µ—Ö–æ–¥–∏–º –≤ –∫–æ—Ä–Ω–µ–≤—É—é –¥–∏—Ä–µ–∫—Ç–æ—Ä–∏—é –ø—Ä–æ–µ–∫—Ç–∞
cd "$(dirname "$0")/.."

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫—Ä–∏—Ç–∏—á–Ω—ã–µ —Ñ–∞–π–ª—ã
if [ ! -f "docker-compose.yml" ]; then
    error "docker-compose.yml –Ω–µ –Ω–∞–π–¥–µ–Ω!"
fi

if [ ! -f "deploy/init-database.sql" ]; then
    error "deploy/init-database.sql –Ω–µ –Ω–∞–π–¥–µ–Ω!"
fi

if [ ! -f "deploy/clickhouse-init.sh" ]; then
    error "deploy/clickhouse-init.sh –Ω–µ –Ω–∞–π–¥–µ–Ω!"
fi

if [ ! -f ".env.production" ]; then
    error ".env.production –Ω–µ –Ω–∞–π–¥–µ–Ω!"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º Docker
if ! command -v docker &> /dev/null; then
    error "Docker –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
fi

if ! command -v docker compose &> /dev/null; then
    error "Docker Compose –Ω–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω!"
fi

log "‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –Ω–∞ –º–µ—Å—Ç–µ"

# ============================================
# –û–ß–ò–°–¢–ö–ê –ò –ó–ê–ü–£–°–ö
# ============================================

log "üßπ –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker compose down --remove-orphans || warn "–ù–µ—Ç –∑–∞–ø—É—â–µ–Ω–Ω—ã—Ö –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤"

log "üèóÔ∏è –°–±–æ—Ä–∫–∞ –∏ –∑–∞–ø—É—Å–∫ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–æ–≤..."
docker compose up --build -d

log "‚è≥ –û–∂–∏–¥–∞–Ω–∏–µ –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–∏—Å–æ–≤..."

# –§—É–Ω–∫—Ü–∏—è –æ–∂–∏–¥–∞–Ω–∏—è —Å–µ—Ä–≤–∏—Å–∞
wait_for_service() {
    local service_name=$1
    local health_check=$2
    local max_attempts=30
    local attempt=1
    
    while [ $attempt -le $max_attempts ]; do
        if eval $health_check > /dev/null 2>&1; then
            log "‚úÖ $service_name –≥–æ—Ç–æ–≤"
            return 0
        fi
        
        info "–ü–æ–ø—ã—Ç–∫–∞ $attempt/$max_attempts: –û–∂–∏–¥–∞–Ω–∏–µ $service_name..."
        sleep 3
        attempt=$((attempt + 1))
    done
    
    error "$service_name –Ω–µ –≥–æ—Ç–æ–≤ –ø–æ—Å–ª–µ $max_attempts –ø–æ–ø—ã—Ç–æ–∫"
}

# –ñ–¥–µ–º –≥–æ—Ç–æ–≤–Ω–æ—Å—Ç–∏ –≤—Å–µ—Ö —Å–µ—Ä–≤–∏—Å–æ–≤
wait_for_service "PostgreSQL" "docker compose exec -T postgres pg_isready -U postgres -d crypto_analyzer"
wait_for_service "Redis" "docker compose exec -T redis redis-cli ping"
wait_for_service "ClickHouse" "curl -s http://localhost:8123/ping"
wait_for_service "–ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ" "curl -s http://localhost:1111/health"

# ============================================
# –§–ò–ù–ê–õ–¨–ù–ê–Ø –ü–†–û–í–ï–†–ö–ê
# ============================================

log "üîç –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏—Å—Ç–µ–º—ã..."

echo
info "üìä –°—Ç–∞—Ç—É—Å —Å–µ—Ä–≤–∏—Å–æ–≤:"
docker compose ps

echo
info "üîó –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–π:"

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–∏—Ü –≤ PostgreSQL
TABLES_COUNT=$(docker compose exec -T postgres psql -U postgres -d crypto_analyzer -t -c "SELECT count(*) FROM information_schema.tables WHERE table_schema = 'public';" 2>/dev/null | tr -d ' ' || echo "0")

if [ "$TABLES_COUNT" -gt 20 ]; then
    echo "‚úÖ PostgreSQL: $TABLES_COUNT —Ç–∞–±–ª–∏—Ü —Å–æ–∑–¥–∞–Ω–æ"
else
    echo "‚ö†Ô∏è PostgreSQL: —Å–æ–∑–¥–∞–Ω–æ —Ç–æ–ª—å–∫–æ $TABLES_COUNT —Ç–∞–±–ª–∏—Ü (–æ–∂–∏–¥–∞–µ—Ç—Å—è 27+)"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º ClickHouse
if curl -s http://localhost:8123 -d "SHOW TABLES FROM cryptocraze_analytics" | grep -q "user_events"; then
    echo "‚úÖ ClickHouse: –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫–∏–µ —Ç–∞–±–ª–∏—Ü—ã —Å–æ–∑–¥–∞–Ω—ã"
else
    echo "‚ö†Ô∏è ClickHouse: —Ç–∞–±–ª–∏—Ü—ã –º–æ–≥—É—Ç –æ—Ç—Å—É—Ç—Å—Ç–≤–æ–≤–∞—Ç—å"
fi

# –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ
echo
log "üìà –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–∞—á–∞–ª—å–Ω—ã—Ö –¥–∞–Ω–Ω—ã—Ö:"

# Premium –ø–ª–∞–Ω—ã
PREMIUM_PLANS=$(docker compose exec -T postgres psql -U postgres -d crypto_analyzer -t -c "SELECT count(*) FROM premium_plans WHERE is_active = true;" 2>/dev/null | tr -d ' ' || echo "0")
echo "Premium –ø–ª–∞–Ω—ã: $PREMIUM_PLANS"

# –®–∞–±–ª–æ–Ω—ã –∑–∞–¥–∞–Ω–∏–π  
TASK_TEMPLATES=$(docker compose exec -T postgres psql -U postgres -d crypto_analyzer -t -c "SELECT count(*) FROM task_templates WHERE is_active = true;" 2>/dev/null | tr -d ' ' || echo "0")
echo "–®–∞–±–ª–æ–Ω—ã –∑–∞–¥–∞–Ω–∏–π: $TASK_TEMPLATES"

# –¢–∏–ø—ã –∫–æ—Ä–æ–±–æ–∫
BOX_TYPES=$(docker compose exec -T postgres psql -U postgres -d crypto_analyzer -t -c "SELECT count(*) FROM box_types WHERE is_active = true;" 2>/dev/null | tr -d ' ' || echo "0")
echo "–¢–∏–ø—ã –∫–æ—Ä–æ–±–æ–∫: $BOX_TYPES"

# ============================================
# –ó–ê–í–ï–†–®–ï–ù–ò–ï
# ============================================

echo
log "üéâ –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"
echo "=================================================="
echo
info "üåü –°–∏—Å—Ç–µ–º–∞ –≥–æ—Ç–æ–≤–∞:"
echo "   üì± Frontend: http://localhost:1111"
echo "   üóÑÔ∏è PostgreSQL: localhost:5433"
echo "   üîÑ Redis: localhost:6379"
echo "   üìä ClickHouse: http://localhost:8123"
echo
info "üõ†Ô∏è –ü–æ–ª–µ–∑–Ω—ã–µ –∫–æ–º–∞–Ω–¥—ã:"
echo "   –õ–æ–≥–∏: docker compose logs -f [service]"
echo "   –û—Å—Ç–∞–Ω–æ–≤–∫–∞: docker compose down"
echo "   –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫: docker compose restart [service]"
echo
info "üìä –°–æ–∑–¥–∞–Ω–Ω—ã–µ —Ñ—É–Ω–∫—Ü–∏–∏:"
echo "   ‚úÖ $PREMIUM_PLANS –ø—Ä–µ–º–∏—É–º –ø–ª–∞–Ω–∞"
echo "   ‚úÖ $TASK_TEMPLATES —à–∞–±–ª–æ–Ω–æ–≤ –∑–∞–¥–∞–Ω–∏–π"  
echo "   ‚úÖ $BOX_TYPES —Ç–∏–ø–∞ –∫–æ—Ä–æ–±–æ–∫"
echo "   ‚úÖ –†—É–ª–µ—Ç–∫–∞ (–ø—Ä–∏–∑—ã –≤ –∫–æ–¥–µ)"
echo "   ‚úÖ $TABLES_COUNT —Ç–∞–±–ª–∏—Ü PostgreSQL"
echo

if [ "$TABLES_COUNT" -gt 20 ] && [ "$PREMIUM_PLANS" -gt 0 ] && [ "$TASK_TEMPLATES" -gt 10 ]; then
    log "üéØ –£—Å–ø–µ—à–Ω–æ! –í—Å–µ –æ—Å–Ω–æ–≤–Ω—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã —Ä–∞–∑–≤–µ—Ä–Ω—É—Ç—ã"
    echo
    echo "üîó –û—Ç–∫—Ä–æ–π—Ç–µ http://localhost:1111 –≤ –±—Ä–∞—É–∑–µ—Ä–µ"
else
    warn "‚ö†Ô∏è –ù–µ–∫–æ—Ç–æ—Ä—ã–µ –∫–æ–º–ø–æ–Ω–µ–Ω—Ç—ã –º–æ–≥—É—Ç —Ä–∞–±–æ—Ç–∞—Ç—å –Ω–µ–ø—Ä–∞–≤–∏–ª—å–Ω–æ"
    echo "–ü—Ä–æ–≤–µ—Ä—å—Ç–µ –ª–æ–≥–∏: docker compose logs"
fi

log "‚ú® –†–∞–∑–≤–µ—Ä—Ç—ã–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!"