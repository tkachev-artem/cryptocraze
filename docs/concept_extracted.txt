Концепт приложения
Цель Сделать игровой симулятор криптотрейдинга, который учит основам биржевой торговли и аналитики без реальных денег, удерживает пользователя геймификацией и собирает метрики для развития продукта.
Платформа Android. Фронт - React (React Native/Expo). Бэкенд - Node + PostgreSQL.
Главные модули
	•	Торговый симулятор
	•	Виртуальные валюты: «доллары» и «криптовалюта».
	•	Реальные рыночные котировки (API) + мультипликатор x1-x50.
	•	Параметры сделки: сумма, TP, SL, направление, левередж.
	•	Операции: открыть, редактировать, закрыть. Всё обновляется в реальном времени.
	•	Обучение
	•	Чёткая пошаговая программа: текст, интерактив, квизы.
	•	Виртуальный наставник «Панда» объясняет термины и функции.
	•	Геймификация
	•	50+ достижений, уровни и рейтинги.
	•	Ежедневные награды, рулетка из 9 секторов, боксы на 30 призов.
	•	Редкие события: отключение рекламы 7 дн, «золотой» приз $10 000 (0,5 %).
	•	Pro-режим на 3/5/10 дней с расширенным анализом графиков.
	•	Аналитика и метрики
	•	Полный набор UA, Engagement, Retention, Monetization, Ad Performance.
	•	Хранение на сервере, экспорт в BI.
	•	Дашборд в приложении: баланс, P/L, лучшие/худшие сделки, макс / средние показатели.
	•	Реклама и монетизация
	•	Вознаграждение за просмотр видео-ads (бонусы, кейсы).
	•	Покупка виртуальных валют за реальные деньги (optionally).
	•	Продажа подписки на Pro-режим.
Интерфейс (4 языка) Главный экран: баланс, выбор пары, график, кнопки «Купить/Продать». Нижняя навигация: Дашборд • Сделки • Рукинг/кейсы • Профиль. График: свечи/бары/линия, интервалы 1 м-1 д. Все данные обновляются WS или SSE без перезагрузок.
Техническое ядро
	•	React Native Expo → TypeScript.
	•	Redux Toolkit (клиентская стейт-машина).
	•	Socket.io для стрима котировок.
	•	Node + Express + PostgreSQL; Redis для сессий и очередей заданий.
	•	Firebase / Amplitude для метрик и push-уведомлений.
Подробное описание функционала приложения
1. Онбординг и авторизация
	•	Варианты входа: Google, Facebook, Apple ID, GitHub.
	•	После авторизации — краткое обучение с «Пандой»: 3–5 интерактивных экранов, объясняющих интерфейс, торговлю и геймификацию.
	•	Пропуск обучения фиксируется в метрике tutorial_skip_rate.
2. Баланс и валюты
	•	Две виртуальные валюты • Доллары — базовая единица. • Криптовалюта — для симуляции покупки/продажи.
	•	Экраны показывают: • Общий баланс «Всего». • Доступные средства «Свободно».
	•	Конвертация внутри симулятора по текущему курсу пары.
3. Рынок и котировки
	•	Источник котировок — внешний API, обновление по WebSocket ≤ 1 сек.
	•	Пользователь выбирает торговую пару из выпадающего списка.
	•	График: свечи, бары или линия; интервалы — 1 м, 5 м, 15 м, 1 ч, 4 ч, 1 д.
	•	В Pro-режиме доступны индикаторы (SMA, EMA, RSI) и аннотации.
4. Сделки
	•	Создание ордера • Параметры: сумма, направление (рост/падение), мультипликатор x1-x50. • Слайдер: процент от свободного баланса. • Поля TP и SL с валидацией (TP > цена, SL < цена). • Видео-кнопка «Video Bonus»: просмотр рекламы ⟶ +5 % к доступной сумме. • Подтверждение отдельным модальным окном.
	•	Редактирование • Можно менять TP, SL, направление до закрытия. • Все обновления отражаются мгновенно.
	•	Закрытие • Итоговая прибыль/убыток показывается цветом: зелёный/красный. • Подтверждение кнопкой «Забрать».
5. Личный кабинет
	•	Дашборд • Кол-во сделок, максимальная/средняя сумма, лучший P/L, худший P/L. • Карточки-виджеты обновляются в реальном времени.
	•	Открытые сделки • Таблица активных позиций: тикер, цена входа, текущий P/L, мультипликатор. • Кнопка закрытия прямо в строке.
	•	Аналитика успешных сделок • Топ-5 сделок за 30 дней по прибыли.
	•	Макс/средние показатели • Графики (bar или line) по максимальному профиту и убытку, средней сумме сделки.
6. Геймификация
	•	Достижения — 50 событий (пополнение, обучение, торговля).
	•	Ежедневные бонусы — таблица на 24 дня, награда растёт от $100 до $500 000, условия: визит или число просмотренных роликов.
	•	Рулетка — 9 секторов, призы $100-$10 000 + «Pro-режим на 3 дня», шанс золотого приза $10 000 — 0.5 %.
	•	Боксы — таблица из 30 призов $100-$3 000, шанс отключения рекламы — 0.5 %.
	•	Pro-режим (3/5/10 дней) — расширенные индикаторы, цветовые схемы графика.
	•	Виртуальный помощник «Панда» — статические советы + анимированная реакция на события.
7. Реклама и монетизация
	•	Форматы: Rewarded Video (бонус к балансу, кейсы, рулетка), Interstitial (между экранами).
	•	Метрики: ads_watched_per_user, click_to_install_rate, ad_engagement_rate, ROAS.
	•	Отключение рекламы: редкий дроп из бокса или покупка за виртуальную валюту.
8. Метрики (backend)
	•	User Acquisition: installs, first_open, signup_rate, trade_open_rate.
	•	Engagement: sessions, screens_opened, trades_per_user, avg_virtual_balance_used.
	•	Retention: D1, D3, D7, D30, churn_rate.
	•	Monetization: conversion_to_paid, ARPU, ARPPU, total_revenue.
	•	Ad Performance: CPI, CPA, ROAS. Все события отправляются в PostgreSQL + Amplitude; дашборды BI строятся автоматически.
9. Сетевые и серверные функции
	•	Node + Express API: аутентификация, хранение балансов, награды, сделок.
	•	Redis: сессии, очереди рефрешей метрик.
	•	Планировщик: перерасчёт рейтинга раз в час.
10. Локализация
Полная поддержка EN, ES, FR, PT. Строки хранятся в JSON, выбираются по языку системы.
11. Безопасность и устойчивость
	•	JWT-токены, refresh-механизм.
	•	Количество открытых сделок ограничено параметром в настройках сервера.
	•	Резервное копирование базы раз в 6 часов.
Ключевые процессы приложения

1. Онбординг
	•	Запуск
	•	Проверка JWT-токена. Нет токена → экран авторизации.
	•	Авторизация
	•	OAuth (Google / Facebook / Apple / GitHub) → получение id, e-mail, аватара.
	•	Создание записи users при первом входе.
	•	Первичное обучение
	•	Отдаётся JSON-сценарий «Панды» (5 шагов).
	•	Событие tutorial_start; завершение → tutorial_complete.
	•	Выбор языка
	•	Если язык телефона не EN, ES, FR, PT → UI сразу локализован.

2. Поток «Создать сделку»
	•	Выбор торговой пары
	•	Выпадающий список → сохранение выбранной pair в Redux и backend.
	•	Настройка ордера
	•	Поле суммы (инлайн валидация ≤ free_balance).
	•	Слайдер процента баланса, мгновенно меняет поле суммы.
	•	Выпадающий мультипликатор x1-x50.
	•	Поля TP / SL, проверка: TP > price, SL < price.
	•	Видео-бонус (опция)
	•	Нажатие «Watch Ad» → SDK рекламы.
	•	Успешный просмотр → плюс 5 % к доступной сумме (signal от SDK).
	•	Подтверждение
	•	Модалка с итогами: сумма, мультипликатор, комиссия 0.
	•	POST /order/open → запись в orders, вычитание из free_balance.
	•	Сокет-ивент order_open для UI.

3. Реальное время и котировки
	•	Сервис котировок открывает WS-канал /prices/{pair}.
	•	Backend пробрасывает биржевой поток без хранения.
	•	Клиент обновляет график и пересчитывает плавающий P/L всех открытых ордеров.
	•	Достижение «Первая живая цена» фиксируется событием price_stream_start.

4. Редактирование сделки
	•	PUT /order/{id} с новыми TP / SL или направлением.
	•	Backend валидация и пересчёт потенциального P/L.
	•	Сокет-ивент order_update возвращает свежие значения.

5. Автоматическое закрытие TP / SL
	•	Процесс-воркер в Redis-очереди слушает поток цен.
	•	Условие срабатывает → PATCH /order/{id} статус closed.
	•	Прибыль возвращается в free_balance, запись добавляется в trades_history.
	•	Событие order_close_auto уходит в аналитику + уведомление in-app.

6. Ручное закрытие
	•	Пользователь нажимает «Закрыть».
	•	PATCH /order/{id} → статус closed_manual.
	•	Баланс обновляется, модалка результата.

7. Ежедневный бонус
	•	Cron 00:00 UTC → всем пользователям выставляется daily_claim_available = true.
	•	При заходе клиент делает GET /rewards/daily.
	•	Нажатие «Забрать» → POST /rewards/claim → сумма + запись reward_history.
	•	Таблица прогресса 24 дня обновляется; событие daily_reward_claimed.

8. Рулетка / Боксы
	•	Пользователь тратит билет или смотрит рекламу → POST /loot/start.
	•	Backend выбирает приз по весовой таблице, пишет в loot_history.
	•	Клиент показывает анимацию вращения с уже известным результатом.
	•	После анимации → GET /loot/result/{id}, баланс/статус (Pro, no-ads) обновляется.

9. Pro-режим
	•	Активация:
	•	Покупка за виртуальную валюту или приз из лута → POST /pro/activate.
	•	Backend пишет срок окончания в users.pro_until.
	•	Ключ в JWT-payload (isPro = true).
	•	По истечении срока фронт получает 401 pro_expired → UI скрывает индикаторы.

10. Метрики и аналитика
	•	Клиент шлёт события пачками (batch_size 20) в /analytics/collect.
	•	Сервер складывает в ClickHouse.
	•	Nightly ETL обновляет дашборды Retention / ARPU / ROAS.
	•	Redis job раз в час пересчитывает рейтинг пользователей по сумме виртуальных активов.

11. Реклама
	•	SDK запускается после ads_consent = true.
	•	Rewarded Video — строго перед бонусами; Interstitial — не чаще одной за 2 мин.
	•	Callback от SDK → ad_watched событие; если rewarded — выдаётся бонус.

12. Безопасность и устойчивость
	•	Все запросы JWT + HMAC-подпись тела.
	•	Rate-limit 60 req/min IP+user.
	•	PostgreSQL горячая реплика; бэкап S3 каждые 6 ч.
	•	Redis — кластер 3 нод, Persistence AOF.
	•	Downtime фронта — локальный кеш котировок на 30 с для плавности.

13. Локализация
	•	Файл i18n/{lang}.json.
	•	При смене языка → reload статики, состояние Redux сохраняется.
Техническая часть
1. Архитектура (Layered, контейнеры)
	•	Client (React Native / Expo)
	•	JS/TS + Redux Toolkit, RTK-Query.
	•	WebSocket ↔ ws-gateway для котировок и сигналов сделок.
	•	REST ↔ API-gateway для CRUD, наград, аналитики.
	•	API-gateway (Node 18 + Express)
	•	Auth, rate-limit, routing в сервисы.
	•	Core Services (Docker)
	•	Auth-service – OAuth, JWT, refresh-pair.
	•	Market-service – прокси котировок, нормализация, кэш 1 с.
	•	Trading-sim – логика ордеров, расчёт P/L, триггеры TP/SL.
	•	Rewards-service – рулетка, боксы, ежедневка, Pro-таймер.
	•	Ad-service – callbacks AdMob/Meta, выдача бонусов.
	•	Metrics-collector – прием batch-event’ов, запись в ClickHouse.
	•	Data layer
	•	PostgreSQL 15: users, balances, orders, trades, achievements, rewards, ad_events.
	•	Redis 7: sessions, WS-pubsub, delayed-jobs (BullMQ).
	•	ClickHouse: event-stream (≈ 100 M+/сутки) для BI.
	•	External
	•	Crypto feed (Binance/Bybit REST+WS).
	•	Firebase FCM (push).
	•	S3 backup (pg_dump, CH-snapshots).
2. API (key endpoints)
Method
Path
Purpose
POST
/auth/oauth
social login → JWT
GET ws
/prices/{pair}
котировки real-time
POST
/order/open
создать ордер
PATCH
/order/{id}
TP/SL/dir update
PATCH
/order/{id}/close
ручное закрытие
GET
/balance
общий + свободный
POST
/loot/spin
рулетка/бокс
POST
/reward/daily
забрать ежедневку
POST
/pro/activate
включить Pro
POST
/analytics/collect
batch events
All calls HMAC-signed; JWT в Authorization.
3. Схема БД (основное)
users(id PK, email, name, avatar, lang, pro_until timestamp)
balances(user_id PK, total numeric, free numeric)
orders(id PK, user_id, pair, dir, leverage, sum, tp, sl, open_ts, status, close_ts, pl)
trades_history(id PK, order_id, pl, dur_ms)
achievements(id PK, code, title, desc)
user_achv(user_id, achv_id, ts)
rewards_history(id PK, user_id, type, payload, ts)
ad_events(id PK, user_id, ad_id, kind, ts)
JSONB поля под гибкие payload'ы (loot).
4. Реальное время
	•	Gateway WS ⇒ Redis pubsub ⇒ clients.
	•	Триггеры TP/SL в trading-sim воркере, подписанном на поток цен.
	•	Закрытие ордера пушится через WS-event order_close.
5. Безопасность
	•	OAuth 2.0 PKCE, refresh-token rotation.
	•	JWT 15 min, refresh 30 d; blacklist Redis.
	•	Rate-limit 60 req/min IP+user (express-rate-limit + redis-store).
	•	CSP, HSTS, SRI на статику.
	•	ПД шифруется at-rest (AES-256, pgcrypto).
6. DevOps
	•	CI/CD: GitHub Actions → Docker build → Helm charts → K8s.
	•	Observability: Prometheus + Grafana, Loki logs, Sentry JS/Node.
	•	Deploy: blue-green, migrations through Flyway.
	•	Backups: pg_dump + WAL-G (6 h); CH snapshots daily.
7. Масштабирование
	•	Node-сервисы stateless; HPA по CPU/latency.
	•	WS-gateway sticky-sessions via NGINX + Redis cluster.
	•	Market-service кэшируется в Redis, TTL 1 s, снижаем API cost >80 %.
	•	ClickHouse 3-node shard-replica; event-load >50 k EPS.
8. Тесты
	•	Unit (Jest), integration (Supertest + Testcontainers).
	•	E2E mobile – Detox on CI (Android emulator).
	•	Load – k6 scripts, целевой RPS 10 k.
	•	Security – OWASP ZAP nightly.
9. Локализация
	•	i18n JSON, lazy load; plural rules ICU.

