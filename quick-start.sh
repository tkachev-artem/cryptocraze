#!/bin/bash

# CryptoCraze Quick Start Script
# –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –Ω–∞—Å—Ç—Ä–∞–∏–≤–∞–µ—Ç –∏ –∑–∞–ø—É—Å–∫–∞–µ—Ç –ø—Ä–æ–µ–∫—Ç –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞

echo "üöÄ CryptoCraze - –ë—ã—Å—Ç—Ä—ã–π –∑–∞–ø—É—Å–∫"
echo "================================"

# –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞—Ä–≥—É–º–µ–Ω—Ç–æ–≤
if [ "$1" = "--help" ] || [ "$1" = "-h" ]; then
    echo "–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ: $0 [TUNNEL_URL] [—Ä–µ–∂–∏–º]"
    echo ""
    echo "–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:"
    echo "  TUNNEL_URL   - URL —Ç—É–Ω–µ–ª—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ (ngrok, cloudflare, etc.)"
    echo "  —Ä–µ–∂–∏–º        - dev (—Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∞) | prod (–ø—Ä–æ–¥–∞–∫—à–µ–Ω)"
    echo ""
    echo "–ü—Ä–∏–º–µ—Ä—ã:"
    echo "  $0                                    # –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
    echo "  $0 dev                               # –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏"
    echo "  $0 https://abc123.ngrok.io           # –ü—Ä–æ–¥–∞–∫—à–µ–Ω —Å —Ç—É–Ω–µ–ª–µ–º"
    echo "  $0 https://abc123.ngrok.io prod      # –¢–æ –∂–µ —Å–∞–º–æ–µ"
    echo ""
    exit 0
fi

TUNNEL_URL=$1
MODE=${2:-"auto"}

# –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ —Ä–µ–∂–∏–º–∞
if [ -z "$TUNNEL_URL" ] || [ "$TUNNEL_URL" = "dev" ]; then
    MODE="dev"
    TUNNEL_URL=""
elif [[ $TUNNEL_URL =~ ^https?:// ]]; then
    MODE="prod"
else
    echo "‚ùå –û—à–∏–±–∫–∞: –ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç URL"
    echo "–ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ: $0 https://your-tunnel-url.com"
    exit 1
fi

echo "üîß –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è:"
echo "   –†–µ–∂–∏–º: $MODE"
if [ "$MODE" = "prod" ]; then
    echo "   –¢—É–Ω–µ–ª—å: $TUNNEL_URL"
fi
echo ""

# –§—É–Ω–∫—Ü–∏—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
check_dependencies() {
    echo "üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π..."
    
    # Node.js
    if ! command -v node &> /dev/null; then
        echo "‚ùå Node.js –Ω–µ –Ω–∞–π–¥–µ–Ω. –£—Å—Ç–∞–Ω–æ–≤–∏—Ç–µ Node.js 18+"
        exit 1
    fi
    
    # npm
    if ! command -v npm &> /dev/null; then
        echo "‚ùå npm –Ω–µ –Ω–∞–π–¥–µ–Ω"
        exit 1
    fi
    
    echo "‚úÖ –ó–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –Ω–∞–π–¥–µ–Ω—ã"
}

# –§—É–Ω–∫—Ü–∏—è —É—Å—Ç–∞–Ω–æ–≤–∫–∏ –ø–∞–∫–µ—Ç–æ–≤
install_packages() {
    echo "üì¶ –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–æ–≤..."
    
    if [ ! -d "node_modules" ]; then
        echo "   –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏..."
        npm install --legacy-peer-deps || {
            echo "‚ö†Ô∏è  –ü—Ä–æ–±–ª–µ–º—ã —Å —É—Å—Ç–∞–Ω–æ–≤–∫–æ–π, –ø—Ä–æ–±—É–µ–º –∞–ª—å—Ç–µ—Ä–Ω–∞—Ç–∏–≤–Ω—ã–π —Å–ø–æ—Å–æ–±..."
            npm install --force || {
                echo "‚ö†Ô∏è  –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å. –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –±–µ–∑ –ø–æ–ª–Ω–æ–π —É—Å—Ç–∞–Ω–æ–≤–∫–∏..."
                return 1
            }
        }
    else
        echo "‚úÖ –ü–∞–∫–µ—Ç—ã —É–∂–µ —É—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
    fi
    
    return 0
}

# –§—É–Ω–∫—Ü–∏—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –æ–∫—Ä—É–∂–µ–Ω–∏—è
setup_environment() {
    echo "‚öôÔ∏è  –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è..."
    
    if [ "$MODE" = "dev" ]; then
        # –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
        cat > .env << 'EOF'
NODE_ENV=development
PORT=3001
FRONTEND_PORT=5173
PROXY_PORT=8080

# Development URLs
API_URL=http://localhost:3001
FRONTEND_URL=http://localhost:5173
ALLOWED_ORIGINS=http://localhost:5173,http://localhost:8080,http://localhost:3000

# Database (–æ–±–Ω–æ–≤–∏—Ç–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏)
DATABASE_URL=postgresql://user:password@localhost:5432/cryptocraze
REDIS_URL=redis://localhost:6379

# Security
SESSION_SECRET=dev-secret-key-change-in-production
CORS_ORIGIN=http://localhost:5173

# Features –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏
ENABLE_SWAGGER=true
ENABLE_REQUEST_LOGGING=true
LOG_LEVEL=debug
EOF
        echo "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏ —Å–æ–∑–¥–∞–Ω–∞"
        
    else
        # –†–µ–∂–∏–º –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞
        cat > .env << EOF
NODE_ENV=production
PORT=3001
PROXY_PORT=8080

# Production URLs
TUNNEL_URL=$TUNNEL_URL
API_URL=$TUNNEL_URL/api
FRONTEND_URL=$TUNNEL_URL
ALLOWED_ORIGINS=$TUNNEL_URL,http://localhost:5173

# Database (–æ–±–Ω–æ–≤–∏—Ç–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏)
DATABASE_URL=\${DATABASE_URL:-postgresql://user:password@localhost:5432/cryptocraze}
NEON_DATABASE_URL=\${NEON_DATABASE_URL:-}
REDIS_URL=\${REDIS_URL:-redis://localhost:6379}

# Security
SESSION_SECRET=\${SESSION_SECRET:-$(openssl rand -base64 32 2>/dev/null || echo "change-this-secret")}
CORS_ORIGIN=$TUNNEL_URL

# Authentication (–æ–±–Ω–æ–≤–∏—Ç–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –¥–∞–Ω–Ω—ã–º–∏)
GOOGLE_CLIENT_ID=\${GOOGLE_CLIENT_ID:-}
GOOGLE_CLIENT_SECRET=\${GOOGLE_CLIENT_SECRET:-}
GOOGLE_CALLBACK_URL=$TUNNEL_URL/auth/google/callback

# External APIs (–æ–±–Ω–æ–≤–∏—Ç–µ —Å —Ä–µ–∞–ª—å–Ω—ã–º–∏ –∫–ª—é—á–∞–º–∏)
BINANCE_API_KEY=\${BINANCE_API_KEY:-}
BINANCE_SECRET_KEY=\${BINANCE_SECRET_KEY:-}
COINGECKO_API_KEY=\${COINGECKO_API_KEY:-}

# Production Features
ENABLE_SWAGGER=true
ENABLE_REQUEST_LOGGING=false
LOG_LEVEL=info
ENABLE_REDIS_SCALING=true
ENABLE_RATE_LIMITING=true
EOF
        echo "‚úÖ –ö–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞ —Å–æ–∑–¥–∞–Ω–∞"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ Redis
start_redis() {
    echo "üî¥ –ó–∞–ø—É—Å–∫ Redis..."
    
    if command -v docker &> /dev/null; then
        if [ -f "docker-compose.redis.yml" ]; then
            docker-compose -f docker-compose.redis.yml up -d || {
                echo "‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–ø—É—Å—Ç–∏—Ç—å Redis —á–µ—Ä–µ–∑ Docker"
                return 1
            }
            echo "‚úÖ Redis –∑–∞–ø—É—â–µ–Ω"
        else
            echo "‚ö†Ô∏è  docker-compose.redis.yml –Ω–µ –Ω–∞–π–¥–µ–Ω"
            return 1
        fi
    else
        echo "‚ö†Ô∏è  Docker –Ω–µ –Ω–∞–π–¥–µ–Ω. Redis –¥–æ–ª–∂–µ–Ω –±—ã—Ç—å –∑–∞–ø—É—â–µ–Ω –≤—Ä—É—á–Ω—É—é"
        return 1
    fi
}

# –§—É–Ω–∫—Ü–∏—è —Å–±–æ—Ä–∫–∏ –ø—Ä–æ–µ–∫—Ç–∞
build_project() {
    if [ "$MODE" = "prod" ]; then
        echo "üî® –°–±–æ—Ä–∫–∞ –ø—Ä–æ–µ–∫—Ç–∞..."
        
        # –°–±–æ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞
        echo "   –°–±–æ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞..."
        npm run build:server 2>/dev/null || {
            echo "   –ö–æ–º–ø–∏–ª–∏—Ä—É–µ–º —Å–µ—Ä–≤–µ—Ä –Ω–∞–ø—Ä—è–º—É—é..."
            npx tsc -p tsconfig.server.json 2>/dev/null || echo "‚ö†Ô∏è  –°–±–æ—Ä–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å"
        }
        
        # –°–±–æ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞
        echo "   –°–±–æ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞..."
        npm run build 2>/dev/null || echo "‚ö†Ô∏è  –°–±–æ—Ä–∫–∞ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥–∞ –Ω–µ —É–¥–∞–ª–∞—Å—å"
        
        echo "‚úÖ –°–±–æ—Ä–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞"
    fi
}

# –§—É–Ω–∫—Ü–∏—è –∑–∞–ø—É—Å–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤
start_services() {
    echo "üöÄ –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤..."
    
    if [ "$MODE" = "dev" ]; then
        echo "üìù –†–µ–∂–∏–º —Ä–∞–∑—Ä–∞–±–æ—Ç–∫–∏:"
        echo "   üñ•Ô∏è  Backend: http://localhost:3001"
        echo "   üé® Frontend: http://localhost:5173" 
        echo "   üìö API Docs: http://localhost:3001/api-docs"
        echo ""
        echo "Press Ctrl+C —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"
        echo ""
        
        # –ó–∞–ø—É—Å–∫ fullstack —Ä–µ–∂–∏–º–∞
        npm run fullstack
        
    else
        echo "üåê –ü—Ä–æ–¥–∞–∫—à–µ–Ω —Ä–µ–∂–∏–º:"
        echo "   üåç –ü—Ä–∏–ª–æ–∂–µ–Ω–∏–µ: $TUNNEL_URL"
        echo "   üì° API: $TUNNEL_URL/api" 
        echo "   üìö –î–æ–∫—É–º–µ–Ω—Ç–∞—Ü–∏—è: $TUNNEL_URL/api-docs"
        echo ""
        echo "Press Ctrl+C —á—Ç–æ–±—ã –æ—Å—Ç–∞–Ω–æ–≤–∏—Ç—å –≤—Å–µ —Å–µ—Ä–≤–∏—Å—ã"
        echo ""
        
        # –ó–∞–ø—É—Å–∫ –ø—Ä–æ–¥–∞–∫—à–µ–Ω —Ä–µ–∂–∏–º–∞
        ./start-production.sh 2>/dev/null || {
            echo "üîÑ –ó–∞–ø—É—Å–∫ –Ω–∞–ø—Ä—è–º—É—é..."
            
            # –ó–∞–ø—É—Å–∫ –±–µ–∫–µ–Ω–¥–∞
            NODE_ENV=production npm run start &
            SERVER_PID=$!
            
            sleep 5
            
            # –ó–∞–ø—É—Å–∫ –ø—Ä–æ–∫—Å–∏
            NODE_ENV=production npm run proxy &
            PROXY_PID=$!
            
            cleanup() {
                echo ""
                echo "üõë –û—Å—Ç–∞–Ω–æ–≤–∫–∞ —Å–µ—Ä–≤–∏—Å–æ–≤..."
                kill $SERVER_PID 2>/dev/null || true
                kill $PROXY_PID 2>/dev/null || true
                echo "‚úÖ –°–µ—Ä–≤–∏—Å—ã –æ—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω—ã"
                exit 0
            }
            
            trap cleanup SIGINT SIGTERM
            wait
        }
    fi
}

# –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
main() {
    echo "–ù–∞—á–∏–Ω–∞–µ–º –Ω–∞—Å—Ç—Ä–æ–π–∫—É CryptoCraze..."
    echo ""
    
    # –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–µ–π
    check_dependencies
    
    # –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –ø–∞–∫–µ—Ç–æ–≤
    install_packages
    
    # –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –æ–∫—Ä—É–∂–µ–Ω–∏—è
    setup_environment
    
    # –ó–∞–ø—É—Å–∫ Redis
    start_redis
    
    # –°–±–æ—Ä–∫–∞ (—Ç–æ–ª—å–∫–æ –¥–ª—è –ø—Ä–æ–¥–∞–∫—à–µ–Ω–∞)
    build_project
    
    echo ""
    echo "‚úÖ –ù–∞—Å—Ç—Ä–æ–π–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∞!"
    echo ""
    
    # –ó–∞–ø—É—Å–∫ —Å–µ—Ä–≤–∏—Å–æ–≤
    start_services
}

# –ó–∞–ø—É—Å–∫ –æ—Å–Ω–æ–≤–Ω–æ–π —Ñ—É–Ω–∫—Ü–∏–∏
main