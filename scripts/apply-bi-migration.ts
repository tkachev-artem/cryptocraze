import { db } from '../server/db.js';
import { sql } from 'drizzle-orm';
import fs from 'fs';
import path from 'path';

async function applyBiMigration() {
  try {
    console.log('üîÑ –ü—Ä–∏–º–µ–Ω–µ–Ω–∏–µ BI analytics –º–∏–≥—Ä–∞—Ü–∏–∏...');
    
    // –ß–∏—Ç–∞–µ–º SQL —Ñ–∞–π–ª –º–∏–≥—Ä–∞—Ü–∏–∏
    const migrationPath = path.join(process.cwd(), 'drizzle', '0010_add_bi_analytics_tables.sql');
    const migrationSQL = fs.readFileSync(migrationPath, 'utf8');
    
    // –í—ã–ø–æ–ª–Ω—è–µ–º SQL
    await db.execute(sql.raw(migrationSQL));
    
    console.log('‚úÖ BI analytics –º–∏–≥—Ä–∞—Ü–∏—è –ø—Ä–∏–º–µ–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Å–æ–∑–¥–∞–Ω–Ω—ã–µ —Ç–∞–±–ª–∏—Ü—ã
    const result = await db.execute(sql.raw(`
      SELECT tablename 
      FROM pg_tables 
      WHERE schemaname = 'public' 
      AND (tablename LIKE '%analytics%' OR tablename LIKE '%metrics%' OR tablename LIKE '%cohort%')
      ORDER BY tablename;
    `));
    
    console.log('\nüìä –°–æ–∑–¥–∞–Ω–Ω—ã–µ BI —Ç–∞–±–ª–∏—Ü—ã:');
    result.rows.forEach((row: any) => {
      console.log(`   ‚úì ${row.tablename}`);
    });
    
    console.log('\nüöÄ –¢–µ–ø–µ—Ä—å –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞–≤–∞—Ç—å —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏–º–µ–Ω–µ–Ω–∏—è –º–∏–≥—Ä–∞—Ü–∏–∏:', error);
  }
}

applyBiMigration();