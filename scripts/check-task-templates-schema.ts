import { db } from '../server/db';
import { taskTemplates, users } from '../shared/schema';
import { eq } from 'drizzle-orm';

async function checkTaskTemplatesSchema() {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã —Ç–∞–±–ª–∏—Ü—ã task_templates...\n');

  try {
    // –ü—Ä–æ–≤–µ—Ä–∏–º —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è 'system'
    console.log('üìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤–æ–≤–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "system"...');
    const systemUser = await db.select()
      .from(users)
      .where(eq(users.id, 'system'))
      .limit(1);
    
    if (systemUser.length === 0) {
      console.log('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "system" –Ω–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
      console.log('üìã –°–æ–∑–¥–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "system"...');
      
      try {
        await db.insert(users).values({
          id: 'system',
          email: 'system@example.com',
          firstName: 'System',
          lastName: 'User',
          balance: '0.00',
          coins: 0,
          freeBalance: '0',
          ratingScore: 0,
          tradesCount: 0,
          totalTradesVolume: '0.00',
          successfulTradesPercentage: '0.00',
          maxProfit: '0.00',
          maxLoss: '0.00',
          averageTradeAmount: '0.00',
          rewardsCount: 0,
          energyTasksBonus: 0,
          isPremium: false
        });
        console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "system" —Å–æ–∑–¥–∞–Ω');
      } catch (error: any) {
        console.log('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è "system":');
        console.log(`   ${error.message}`);
      }
    } else {
      console.log('‚úÖ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å "system" —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }

    // –ü–æ–ø—Ä–æ–±—É–µ–º –≤—Å—Ç–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏
    console.log('\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å—Ç–∞–≤–∫–∏ —Å —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–º–∏ –∫–∞—Ç–µ–≥–æ—Ä–∏—è–º–∏...');
    try {
      const [newTemplate] = await db.insert(taskTemplates).values({
        templateId: 'test_daily_template',
        taskType: 'test_daily',
        title: '–¢–µ—Å—Ç–æ–≤–æ–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ',
        description: '–¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ',
        rewardType: 'money',
        rewardAmount: '100',
        progressTotal: 1,
        icon: '/trials/daily.svg',
        category: 'daily',
        rarity: 'common',
        expiresInHours: 24,
        createdBy: 'system'
      }).returning();
      
      console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π "daily"');
      console.log(`   ID: ${newTemplate.id}`);
      console.log(`   Category: ${newTemplate.category}`);
      console.log(`   RewardType: ${newTemplate.rewardType}`);
      
      // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
      await db.delete(taskTemplates).where(eq(taskTemplates.id, newTemplate.id));
      console.log('üóëÔ∏è  –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞');
      
    } catch (error: any) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ —Å –∫–∞—Ç–µ–≥–æ—Ä–∏–µ–π "daily":');
      console.log(`   ${error.message}`);
    }

    // –ü–æ–ø—Ä–æ–±—É–µ–º –≤—Å—Ç–∞–≤–∏—Ç—å —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å —Å rewardType 'energy'
    console.log('\nüìã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—Å—Ç–∞–≤–∫–∏ —Å rewardType "energy"...');
    try {
      const [newTemplate] = await db.insert(taskTemplates).values({
        templateId: 'test_energy_reward_template',
        taskType: 'test_energy_reward',
        title: '–¢–µ—Å—Ç–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ —Å —ç–Ω–µ—Ä–≥–µ—Ç–∏—á–µ—Å–∫–æ–π –Ω–∞–≥—Ä–∞–¥–æ–π',
        description: '–¢–µ—Å—Ç–æ–≤–æ–µ –æ–ø–∏—Å–∞–Ω–∏–µ',
        rewardType: 'energy',
        rewardAmount: '50',
        progressTotal: 5,
        icon: '/trials/energy.svg',
        category: 'daily',
        rarity: 'common',
        expiresInHours: 24,
        createdBy: 'system'
      }).returning();
      
      console.log('‚úÖ –£—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω —Ç–µ—Å—Ç–æ–≤—ã–π —à–∞–±–ª–æ–Ω —Å rewardType "energy"');
      console.log(`   ID: ${newTemplate.id}`);
      console.log(`   Category: ${newTemplate.category}`);
      console.log(`   RewardType: ${newTemplate.rewardType}`);
      
      // –£–¥–∞–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤—É—é –∑–∞–ø–∏—Å—å
      await db.delete(taskTemplates).where(eq(taskTemplates.id, newTemplate.id));
      console.log('üóëÔ∏è  –¢–µ—Å—Ç–æ–≤–∞—è –∑–∞–ø–∏—Å—å —É–¥–∞–ª–µ–Ω–∞');
      
    } catch (error: any) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —à–∞–±–ª–æ–Ω–∞ —Å rewardType "energy":');
      console.log(`   ${error.message}`);
    }

    // –ü—Ä–æ–≤–µ—Ä–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ rewardType
    console.log('\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö rewardType...');
    const existingRewardTypes = await db.select({ rewardType: taskTemplates.rewardType })
      .from(taskTemplates)
      .groupBy(taskTemplates.rewardType);
    
    console.log('–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ rewardType:');
    existingRewardTypes.forEach(template => {
      console.log(`   - ${template.rewardType}`);
    });

    // –ü—Ä–æ–≤–µ—Ä–∏–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏
    console.log('\nüìã –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—É—â–µ—Å—Ç–≤—É—é—â–∏—Ö –∫–∞—Ç–µ–≥–æ—Ä–∏–π...');
    const existingTemplates = await db.select({ category: taskTemplates.category })
      .from(taskTemplates)
      .groupBy(taskTemplates.category);
    
    console.log('–°—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏:');
    existingTemplates.forEach(template => {
      console.log(`   - ${template.category}`);
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ —Å—Ö–µ–º—ã:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
checkTaskTemplatesSchema().catch(console.error); 