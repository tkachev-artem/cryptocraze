#!/usr/bin/env node

import fs from 'fs';
import path from 'path';
import { fileURLToPath } from 'url';

const __filename = fileURLToPath(import.meta.url);
const __dirname = path.dirname(__filename);

const localesDir = path.join(__dirname, '../src/locales');
const files = ['en.json', 'ru.json', 'es.json', 'fr.json', 'pt.json'];

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –≤—Å–µ—Ö –∫–ª—é—á–µ–π –∏–∑ –æ–±—ä–µ–∫—Ç–∞
function getAllKeys(obj, prefix = '') {
  const keys = [];
  for (const key in obj) {
    const fullKey = prefix ? `${prefix}.${key}` : key;
    if (typeof obj[key] === 'object' && obj[key] !== null && !Array.isArray(obj[key])) {
      keys.push(...getAllKeys(obj[key], fullKey));
    } else {
      keys.push(fullKey);
    }
  }
  return keys.sort();
}

// –ß–∏—Ç–∞–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—ã–π –∞–Ω–≥–ª–∏–π—Å–∫–∏–π —Ñ–∞–π–ª
const enPath = path.join(localesDir, 'en.json');
const enContent = JSON.parse(fs.readFileSync(enPath, 'utf8'));
const enKeys = getAllKeys(enContent);

console.log(`üîç –≠—Ç–∞–ª–æ–Ω–Ω—ã–π —Ñ–∞–π–ª (en.json): ${enKeys.length} –∫–ª—é—á–µ–π`);

// –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–π —Ñ–∞–π–ª –ø–µ—Ä–µ–≤–æ–¥–∞
let hasErrors = false;
for (const file of files) {
  if (file === 'en.json') continue; // –ü—Ä–æ–ø—É—Å–∫–∞–µ–º —ç—Ç–∞–ª–æ–Ω–Ω—ã–π —Ñ–∞–π–ª
  
  const filePath = path.join(localesDir, file);
  if (!fs.existsSync(filePath)) {
    console.log(`‚ùå –§–∞–π–ª ${file} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
    hasErrors = true;
    continue;
  }
  
  const content = JSON.parse(fs.readFileSync(filePath, 'utf8'));
  const keys = getAllKeys(content);
  
  console.log(`\nüìã –ü—Ä–æ–≤–µ—Ä—è–µ–º ${file}: ${keys.length} –∫–ª—é—á–µ–π`);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–µ–¥–æ—Å—Ç–∞—é—â–∏–µ –∫–ª—é—á–∏
  const missingKeys = enKeys.filter(key => !keys.includes(key));
  if (missingKeys.length > 0) {
    console.log(`‚ùå –ù–µ–¥–æ—Å—Ç–∞—é—Ç –∫–ª—é—á–∏ –≤ ${file}:`);
    missingKeys.forEach(key => console.log(`   - ${key}`));
    hasErrors = true;
  }
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏—à–Ω–∏–µ –∫–ª—é—á–∏  
  const extraKeys = keys.filter(key => !enKeys.includes(key));
  if (extraKeys.length > 0) {
    console.log(`‚ö†Ô∏è  –õ–∏—à–Ω–∏–µ –∫–ª—é—á–∏ –≤ ${file}:`);
    extraKeys.forEach(key => console.log(`   + ${key}`));
  }
  
  if (missingKeys.length === 0 && extraKeys.length === 0) {
    console.log(`‚úÖ ${file} - –≤—Å–µ –∫–ª—é—á–∏ —Å–æ–≤–ø–∞–¥–∞—é—Ç`);
  }
}

if (hasErrors) {
  console.log('\n‚ùå –ù–∞–π–¥–µ–Ω—ã –æ—à–∏–±–∫–∏ –≤ –ø–µ—Ä–µ–≤–æ–¥–∞—Ö!');
  process.exit(1);
} else {
  console.log('\n‚úÖ –í—Å–µ —Ñ–∞–π–ª—ã –ø–µ—Ä–µ–≤–æ–¥–æ–≤ –∫–æ—Ä—Ä–µ–∫—Ç–Ω—ã');
}