import { TaskService } from '../server/services/taskService';
import { db } from '../server/db';
import { userTasks } from '../shared/schema';
import { eq, and, desc } from 'drizzle-orm';

const checkUserTasks = async () => {
  console.log('üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...\n');
  
  const userId = '111907067370663926621';
  
  try {
    console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', userId);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const allTasks = await db.select()
      .from(userTasks)
      .where(eq(userTasks.userId, userId))
      .orderBy(desc(userTasks.createdAt));
    
    console.log(`üìä –í—Å–µ–≥–æ –∑–∞–¥–∞–Ω–∏–π: ${allTasks.length}`);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Å—Ç–∞—Ç—É—Å—É
    const activeTasks = allTasks.filter(t => t.status === 'active');
    const completedTasks = allTasks.filter(t => t.status === 'completed');
    const expiredTasks = allTasks.filter(t => t.status === 'expired');
    
    console.log(`\nüìã –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: ${activeTasks.length}`);
    activeTasks.forEach(task => {
      console.log(`   ‚Ä¢ ${task.title} (${task.taskType})`);
      console.log(`     –ü—Ä–æ–≥—Ä–µ—Å—Å: ${task.progressCurrent || 0}/${task.progressTotal}`);
      console.log(`     –ù–∞–≥—Ä–∞–¥–∞: ${task.rewardAmount} ${task.rewardType}`);
      console.log(`     –°–æ–∑–¥–∞–Ω–æ: ${task.createdAt.toISOString()}`);
      console.log('');
    });
    
    console.log(`üìã –ó–∞–≤–µ—Ä—à–µ–Ω–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: ${completedTasks.length}`);
    if (completedTasks.length > 0) {
      completedTasks.slice(0, 5).forEach(task => {
        console.log(`   ‚Ä¢ ${task.title} (${task.taskType})`);
        console.log(`     –ó–∞–≤–µ—Ä—à–µ–Ω–æ: ${task.completedAt?.toISOString()}`);
        console.log('');
      });
    }
    
    console.log(`üìã –ò—Å—Ç–µ–∫—à–∏—Ö –∑–∞–¥–∞–Ω–∏–π: ${expiredTasks.length}`);
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç—å —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π
    console.log('\nüéØ –ü—Ä–æ–≤–µ—Ä–∫–∞ –≤–æ–∑–º–æ–∂–Ω–æ—Å—Ç–∏ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π...');
    const canCreateMore = activeTasks.length < 3;
    console.log(`‚úÖ –ú–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å –µ—â–µ –∑–∞–¥–∞–Ω–∏–π: ${canCreateMore ? '–î–∞' : '–ù–µ—Ç'}`);
    
    if (!canCreateMore) {
      console.log('‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π (3)');
      console.log('   –î–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –Ω–æ–≤–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –Ω—É–∂–Ω–æ:');
      console.log('   - –ó–∞–≤–µ—Ä—à–∏—Ç—å –æ–¥–Ω–æ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π');
      console.log('   - –£–¥–∞–ª–∏—Ç—å –æ–¥–Ω–æ –∏–∑ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π');
      console.log('   - –î–æ–∂–¥–∞—Ç—å—Å—è –∏—Å—Ç–µ—á–µ–Ω–∏—è –æ–¥–Ω–æ–≥–æ –∏–∑ –∑–∞–¥–∞–Ω–∏–π');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ –∑–∞–¥–∞–Ω–∏–π:', error);
  }
};

// –ó–∞–ø—É—Å–∫–∞–µ–º –ø—Ä–æ–≤–µ—Ä–∫—É
checkUserTasks().catch(console.error); 