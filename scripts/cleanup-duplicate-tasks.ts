import { db } from '../server/db';
import { userTasks } from '../shared/schema';
import { eq, and, desc } from 'drizzle-orm';

const cleanupDuplicateTasks = async () => {
  console.log('üßπ –û—á–∏—Å—Ç–∫–∞ –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –∑–∞–¥–∞–Ω–∏–π...\n');
  
  const userId = '111907067370663926621';
  
  try {
    console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', userId);
    
    // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
    const activeTasks = await db.select()
      .from(userTasks)
      .where(
        and(
          eq(userTasks.userId, userId),
          eq(userTasks.status, 'active')
        )
      )
      .orderBy(desc(userTasks.createdAt));
    
    console.log(`üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: ${activeTasks.length}`);
    
    // –ì—Ä—É–ø–ø–∏—Ä—É–µ–º –ø–æ —Ç–∏–ø—É –∑–∞–¥–∞–Ω–∏—è
    const taskGroups = new Map<string, typeof activeTasks>();
    
    for (const task of activeTasks) {
      if (!taskGroups.has(task.taskType)) {
        taskGroups.set(task.taskType, []);
      }
      taskGroups.get(task.taskType)!.push(task);
    }
    
    // –ù–∞—Ö–æ–¥–∏–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ –∑–∞–¥–∞–Ω–∏—è
    const duplicatesToRemove: typeof activeTasks = [];
    
    for (const [taskType, tasks] of taskGroups) {
      if (tasks.length > 1) {
        console.log(`‚ö†Ô∏è  –ù–∞–π–¥–µ–Ω–æ ${tasks.length} –∑–∞–¥–∞–Ω–∏–π —Ç–∏–ø–∞ "${taskType}":`);
        
        // –û—Å—Ç–∞–≤–ª—è–µ–º —Å–∞–º–æ–µ –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ, –æ—Å—Ç–∞–ª—å–Ω—ã–µ —É–¥–∞–ª—è–µ–º
        const sortedTasks = tasks.sort((a, b) => 
          new Date(b.createdAt).getTime() - new Date(a.createdAt).getTime()
        );
        
        for (let i = 1; i < sortedTasks.length; i++) {
          duplicatesToRemove.push(sortedTasks[i]);
          console.log(`   üóëÔ∏è  –£–¥–∞–ª—è–µ–º: ${sortedTasks[i].title} (ID: ${sortedTasks[i].id})`);
        }
      }
    }
    
    if (duplicatesToRemove.length === 0) {
      console.log('‚úÖ –î—É–±–ª–∏—Ä—É—é—â–∏—Ö –∑–∞–¥–∞–Ω–∏–π –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return;
    }
    
    // –£–¥–∞–ª—è–µ–º –¥—É–±–ª–∏—Ä—É—é—â–∏–µ –∑–∞–¥–∞–Ω–∏—è
    console.log(`\nüóëÔ∏è  –£–¥–∞–ª—è–µ–º ${duplicatesToRemove.length} –¥—É–±–ª–∏—Ä—É—é—â–∏—Ö –∑–∞–¥–∞–Ω–∏–π...`);
    
    for (const task of duplicatesToRemove) {
      await db.delete(userTasks)
        .where(eq(userTasks.id, task.id));
      console.log(`   ‚úÖ –£–¥–∞–ª–µ–Ω–æ: ${task.title} (ID: ${task.id})`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const remainingTasks = await db.select()
      .from(userTasks)
      .where(
        and(
          eq(userTasks.userId, userId),
          eq(userTasks.status, 'active')
        )
      );
    
    console.log(`\nüìä –û—Å—Ç–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: ${remainingTasks.length}`);
    remainingTasks.forEach(task => {
      console.log(`   ‚Ä¢ ${task.title} (${task.taskType})`);
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—á–∏—Å—Ç–∫–µ –∑–∞–¥–∞–Ω–∏–π:', error);
  }
};

// –ó–∞–ø—É—Å–∫–∞–µ–º –æ—á–∏—Å—Ç–∫—É
cleanupDuplicateTasks().catch(console.error); 