import { TaskTemplateService } from '../server/services/taskTemplateService';
import { TaskService } from '../server/services/taskService';

const createBonusTasks = async () => {
  console.log('üéÅ –°–æ–∑–¥–∞–Ω–∏–µ –±–æ–Ω—É—Å–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π...\n');
  
  const userId = '111907067370663926621';
  
  try {
    // –°–æ–∑–¥–∞–µ–º –¥–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã
    const bonusTemplates = [
      {
        templateId: 'first_win_task',
        taskType: 'first_win',
        title: '–ü–µ—Ä–≤–∞—è –ø–æ–±–µ–¥–∞',
        description: '–í—ã–∏–≥—Ä–∞–π—Ç–µ —Å–≤–æ—é –ø–µ—Ä–≤—É—é —Å–¥–µ–ª–∫—É',
        rewardType: 'money' as const,
        rewardAmount: '3K',
        progressTotal: 1,
        icon: '/trials/win.svg',
        category: 'trade' as const,
        rarity: 'epic' as const,
        expiresInHours: 96,
        isActive: true,
        createdBy: '116069980752518862717'
      },
      {
        templateId: 'profile_complete_task',
        taskType: 'profile_complete',
        title: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø—Ä–æ—Ñ–∏–ª—å',
        description: '–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –≤—Å–µ –ø–æ–ª—è –≤ —Å–≤–æ–µ–º –ø—Ä–æ—Ñ–∏–ª–µ',
        rewardType: 'coins' as const,
        rewardAmount: '75',
        progressTotal: 1,
        icon: '/trials/profile.svg',
        category: 'social' as const,
        rarity: 'common' as const,
        expiresInHours: 120,
        isActive: true,
        createdBy: '116069980752518862717'
      },
      {
        templateId: 'referral_task',
        taskType: 'referral',
        title: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞',
        description: '–ü—Ä–∏–≥–ª–∞—Å–∏—Ç–µ –¥—Ä—É–≥–∞ –ø–æ —Ä–µ—Ñ–µ—Ä–∞–ª—å–Ω–æ–π —Å—Å—ã–ª–∫–µ',
        rewardType: 'money' as const,
        rewardAmount: '10K',
        progressTotal: 1,
        icon: '/trials/referral.svg',
        category: 'social' as const,
        rarity: 'legendary' as const,
        expiresInHours: 720, // 30 –¥–Ω–µ–π
        isActive: true,
        createdBy: '116069980752518862717'
      }
    ];
    
    console.log('üìù –°–æ–∑–¥–∞—é –±–æ–Ω—É—Å–Ω—ã–µ —à–∞–±–ª–æ–Ω—ã...');
    
    for (const template of bonusTemplates) {
      try {
        const result = await TaskTemplateService.createTemplate(template);
        if (result) {
          console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —à–∞–±–ª–æ–Ω: ${result.title} (${result.rewardAmount} ${result.rewardType})`);
        } else {
          console.log(`‚ö†Ô∏è  –®–∞–±–ª–æ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${template.title}`);
        }
      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ ${template.title}:`, error);
      }
    }
    
    console.log('\nüéÆ –°–æ–∑–¥–∞—é –±–æ–Ω—É—Å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è...');
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏—è (–Ω–æ –Ω–µ –≤—Å–µ, —á—Ç–æ–±—ã –Ω–µ –ø—Ä–µ–≤—ã—Å–∏—Ç—å –ª–∏–º–∏—Ç)
    const bonusTaskTemplates = ['first_win_task', 'profile_complete_task'];
    
    for (const templateId of bonusTaskTemplates) {
      try {
        const task = await TaskService.createTaskByTemplateId(userId, templateId);
        if (task) {
          console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ –±–æ–Ω—É—Å–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ: ${task.title} (ID: ${task.id})`);
          console.log(`   –ü—Ä–æ–≥—Ä–µ—Å—Å: ${task.progress.current}/${task.progress.total}`);
          console.log(`   –ù–∞–≥—Ä–∞–¥–∞: ${task.reward.amount} ${task.reward.type}`);
        } else {
          console.log(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∏–∑ —à–∞–±–ª–æ–Ω–∞: ${templateId}`);
        }
      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è ${templateId}:`, error);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫
    console.log('\nüìã –ò—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –≤—Å–µ—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π:');
    const finalTasks = await TaskService.getUserTasks(userId);
    console.log(`–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: ${finalTasks.length}/3 (–º–∞–∫—Å–∏–º—É–º)`);
    
    finalTasks.forEach((task, index) => {
      console.log(`   ${index + 1}. ID: ${task.id} - ${task.title}`);
      console.log(`      –ü—Ä–æ–≥—Ä–µ—Å—Å: ${task.progress.current}/${task.progress.total}`);
      console.log(`      –ù–∞–≥—Ä–∞–¥–∞: ${task.reward.amount} ${task.reward.type}`);
      console.log(`      –°—Ç–∞—Ç—É—Å: ${task.status}`);
    });
    
    console.log('\nüéâ –ë–æ–Ω—É—Å–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è —Å–æ–∑–¥–∞–Ω—ã!');
    console.log('üìä –°—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`   - –í—Å–µ–≥–æ —à–∞–±–ª–æ–Ω–æ–≤: ${bonusTemplates.length + 4} (–≤–∫–ª—é—á–∞—è –ø—Ä–µ–¥—ã–¥—É—â–∏–µ)`);
    console.log(`   - –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: ${finalTasks.length}`);
    console.log(`   - –õ–∏–º–∏—Ç –∑–∞–¥–∞–Ω–∏–π: 3`);
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
  
  process.exit(0);
};

createBonusTasks(); 