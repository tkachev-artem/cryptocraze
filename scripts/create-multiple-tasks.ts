import { TaskTemplateService } from '../server/services/taskTemplateService';
import { TaskService } from '../server/services/taskService';

const createMultipleTasks = async () => {
  console.log('üéØ –°–æ–∑–¥–∞–Ω–∏–µ –Ω–µ—Å–∫–æ–ª—å–∫–∏—Ö –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π...\n');
  
  const userId = '111907067370663926621';
  
  try {
    // –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã –∑–∞–¥–∞–Ω–∏–π
    const templates = [
      {
        templateId: 'trade_bonus_task',
        taskType: 'trade_bonus',
        title: '–°–¥–µ–ª–∞–π—Ç–µ —Å–¥–µ–ª–∫—É',
        description: '–û—Ç–∫—Ä–æ–π—Ç–µ –ª—é–±—É—é —Å–¥–µ–ª–∫—É –∏ –ø–æ–ª—É—á–∏—Ç–µ –±–æ–Ω—É—Å!',
        rewardType: 'money' as const,
        rewardAmount: '2K',
        progressTotal: 1,
        icon: '/trials/trade.svg',
        category: 'trade' as const,
        rarity: 'rare' as const,
        expiresInHours: 48,
        isActive: true,
        createdBy: '116069980752518862717'
      },
      {
        templateId: 'social_share_task',
        taskType: 'social_share',
        title: '–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å –¥—Ä—É–∑—å—è–º–∏',
        description: '–ü–æ–¥–µ–ª–∏—Ç–µ—Å—å —Å—Å—ã–ª–∫–æ–π –Ω–∞ –ø–ª–∞—Ç—Ñ–æ—Ä–º—É –≤ —Å–æ—Ü–∏–∞–ª—å–Ω—ã—Ö —Å–µ—Ç—è—Ö',
        rewardType: 'coins' as const,
        rewardAmount: '100',
        progressTotal: 1,
        icon: '/trials/social.svg',
        category: 'social' as const,
        rarity: 'epic' as const,
        expiresInHours: 72,
        isActive: true,
        createdBy: '116069980752518862717'
      },
      {
        templateId: 'daily_streak_task',
        taskType: 'daily_streak',
        title: '–ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å–µ—Ä–∏—è',
        description: '–ó–∞—Ö–æ–¥–∏—Ç–µ –≤ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ 3 –¥–Ω—è –ø–æ–¥—Ä—è–¥',
        rewardType: 'energy' as const,
        rewardAmount: '25',
        progressTotal: 3,
        icon: '/trials/streak.svg',
        category: 'daily' as const,
        rarity: 'legendary' as const,
        expiresInHours: 168, // 7 –¥–Ω–µ–π
        isActive: true,
        createdBy: '116069980752518862717'
      },
      {
        templateId: 'premium_trial_task',
        taskType: 'premium_trial',
        title: '–ü–æ–ø—Ä–æ–±—É–π—Ç–µ Premium',
        description: '–ê–∫—Ç–∏–≤–∏—Ä—É–π—Ç–µ –ø—Ä–æ–±–Ω—ã–π –ø–µ—Ä–∏–æ–¥ Premium',
        rewardType: 'money' as const,
        rewardAmount: '5K',
        progressTotal: 1,
        icon: '/trials/premium.svg',
        category: 'premium' as const,
        rarity: 'legendary' as const,
        expiresInHours: 24,
        isActive: true,
        createdBy: '116069980752518862717'
      }
    ];
    
    console.log('üìù –°–æ–∑–¥–∞—é —à–∞–±–ª–æ–Ω—ã –∑–∞–¥–∞–Ω–∏–π...');
    
    for (const template of templates) {
      try {
        const result = await TaskTemplateService.createTemplate(template);
        if (result) {
          console.log(`‚úÖ –°–æ–∑–¥–∞–Ω —à–∞–±–ª–æ–Ω: ${result.title} (${result.rewardAmount} ${result.rewardType})`);
        } else {
          console.log(`‚ö†Ô∏è  –®–∞–±–ª–æ–Ω —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç: ${template.title}`);
        }
      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —à–∞–±–ª–æ–Ω–∞ ${template.title}:`, error);
      }
    }
    
    console.log('\nüéÆ –°–æ–∑–¥–∞—é –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    
    // –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const taskTemplates = ['trade_bonus_task', 'social_share_task', 'daily_streak_task'];
    
    for (const templateId of taskTemplates) {
      try {
        const task = await TaskService.createTaskByTemplateId(userId, templateId);
        if (task) {
          console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞–Ω–∏–µ: ${task.title} (ID: ${task.id})`);
          console.log(`   –ü—Ä–æ–≥—Ä–µ—Å—Å: ${task.progress.current}/${task.progress.total}`);
          console.log(`   –ù–∞–≥—Ä–∞–¥–∞: ${task.reward.amount} ${task.reward.type}`);
        } else {
          console.log(`‚ö†Ô∏è  –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –∏–∑ —à–∞–±–ª–æ–Ω–∞: ${templateId}`);
        }
      } catch (error) {
        console.log(`‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è ${templateId}:`, error);
      }
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∏—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫
    console.log('\nüìã –ò—Ç–æ–≥–æ–≤—ã–π —Å–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π:');
    const finalTasks = await TaskService.getUserTasks(userId);
    console.log(`–í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: ${finalTasks.length}`);
    
    finalTasks.forEach((task, index) => {
      console.log(`   ${index + 1}. ID: ${task.id} - ${task.title}`);
      console.log(`      –ü—Ä–æ–≥—Ä–µ—Å—Å: ${task.progress.current}/${task.progress.total}`);
      console.log(`      –ù–∞–≥—Ä–∞–¥–∞: ${task.reward.amount} ${task.reward.type}`);
      console.log(`      –°—Ç–∞—Ç—É—Å: ${task.status}`);
    });
    
    console.log('\nüéâ –ó–∞–¥–∞–Ω–∏—è —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!');
    console.log('üì± –¢–µ–ø–µ—Ä—å –æ–±–Ω–æ–≤–∏—Ç–µ —Ñ—Ä–æ–Ω—Ç–µ–Ω–¥ –¥–ª—è –ø—Ä–æ—Å–º–æ—Ç—Ä–∞ –Ω–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
  
  process.exit(0);
};

createMultipleTasks(); 