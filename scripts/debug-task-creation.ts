import { TaskService } from '../server/services/taskService';
import { TaskTemplateService } from '../server/services/taskTemplates';
import { db } from '../server/db';
import { userTasks } from '../shared/schema';
import { eq, and, count } from 'drizzle-orm';

const debugTaskCreation = async () => {
  console.log('üîç –î–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–∞ –ø—Ä–æ–±–ª–µ–º—ã —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π...\n');
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –∏–∑ –ª–æ–≥–æ–≤
  const userId = '111907067370663926621';
  
  try {
    console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', userId);
    
    // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π
    console.log('\nüìä –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π...');
    const activeTasksCount = await TaskService.getActiveTasksCount(userId);
    console.log(`‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: ${activeTasksCount}`);
    
    if (activeTasksCount >= 3) {
      console.log('‚ùå –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π (3)');
      return;
    }
    
    // 2. –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
    console.log('\nüìã –®–∞–≥ 2: –°–ø–∏—Å–æ–∫ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π...');
    const userTasks = await TaskService.getUserTasks(userId);
    console.log(`‚úÖ –í—Å–µ–≥–æ –∑–∞–¥–∞–Ω–∏–π: ${userTasks.length}`);
    
    userTasks.forEach(task => {
      console.log(`   ‚Ä¢ ${task.title} (${task.taskType}) - ${task.status}`);
    });
    
    // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å –∫–∞–∂–¥–æ–≥–æ —à–∞–±–ª–æ–Ω–∞
    console.log('\nüéØ –®–∞–≥ 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —à–∞–±–ª–æ–Ω–æ–≤...');
    const templates = TaskTemplateService.getTemplatesByCategory('daily').concat(
      TaskTemplateService.getTemplatesByCategory('video'),
      TaskTemplateService.getTemplatesByCategory('trade')
    );
    
    let availableTemplates = 0;
    for (const template of templates) {
      const canCreate = await TaskService.canCreateTask(userId, template.id);
      const status = canCreate ? '‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ' : '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ';
      console.log(`   ${status} ${template.title} (${template.id})`);
      
      if (canCreate) {
        availableTemplates++;
      }
    }
    
    console.log(`\nüìà –î–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤: ${availableTemplates} –∏–∑ ${templates.length}`);
    
    if (availableTemplates === 0) {
      console.log('\n‚ùå –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏–π!');
      console.log('   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      console.log('   - –í—Å–µ –∑–∞–¥–∞–Ω–∏—è –≤ cooldown');
      console.log('   - –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –∑–∞–¥–∞–Ω–∏–π –Ω–∞ –¥–µ–Ω—å');
      console.log('   - –£–∂–µ –µ—Å—Ç—å –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è —ç—Ç–∏—Ö —Ç–∏–ø–æ–≤');
      return;
    }
    
    // 4. –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ
    console.log('\nüéÆ –®–∞–≥ 4: –ü–æ–ø—ã—Ç–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è...');
    const newTask = await TaskService.createRandomTask(userId);
    
    if (newTask) {
      console.log('‚úÖ –ó–∞–¥–∞–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω–æ!');
      console.log(`üìù ID: ${newTask.id}`);
      console.log(`üìù –ù–∞–∑–≤–∞–Ω–∏–µ: ${newTask.title}`);
      console.log(`üìù –¢–∏–ø: ${newTask.taskType}`);
      console.log(`üí∞ –ù–∞–≥—Ä–∞–¥–∞: ${newTask.reward.amount} ${newTask.reward.type}`);
    } else {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ');
      console.log('   –í–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã:');
      console.log('   - –ù–µ—Ç –¥–æ—Å—Ç—É–ø–Ω—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤');
      console.log('   - –û—à–∏–±–∫–∞ –≤ –ª–æ–≥–∏–∫–µ —Å–æ–∑–¥–∞–Ω–∏—è');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫–µ:', error);
  }
};

// –ó–∞–ø—É—Å–∫–∞–µ–º –¥–∏–∞–≥–Ω–æ—Å—Ç–∏–∫—É
debugTaskCreation().catch(console.error); 