import { TaskTemplateService as DatabaseTaskTemplateService } from '../server/services/taskTemplateService';
import { TaskTemplateService } from '../server/services/taskTemplates';
import { db } from '../server/db';
import { taskTemplates, userTasks } from '../shared/schema';

async function initNewTaskSystem() {
  console.log('üéÆ –ò–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—è –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –∑–∞–¥–∞–Ω–∏–π...\n');

  try {
    // –®–∞–≥ 1: –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ —à–∞–±–ª–æ–Ω—ã
    console.log('üìã –®–∞–≥ 1: –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤...');
    const deleteResult = await db.delete(taskTemplates);
    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤: ${deleteResult.rowCount}`);

    // –®–∞–≥ 2: –û—á–∏—â–∞–µ–º —Å—Ç–∞—Ä—ã–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    console.log('\nüìã –®–∞–≥ 2: –û—á–∏—Å—Ç–∫–∞ —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
    const deleteTasksResult = await db.delete(userTasks);
    console.log(`‚úÖ –£–¥–∞–ª–µ–Ω–æ —Å—Ç–∞—Ä—ã—Ö –∑–∞–¥–∞–Ω–∏–π: ${deleteTasksResult.rowCount}`);

    // –®–∞–≥ 3: –°–æ–∑–¥–∞–µ–º –Ω–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã
    console.log('\nüìã –®–∞–≥ 3: –°–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤...');
    const newTemplates = TaskTemplateService.getTemplatesByCategory('daily').concat(
      TaskTemplateService.getTemplatesByCategory('video'),
      TaskTemplateService.getTemplatesByCategory('trade')
    );
    
    for (const template of newTemplates) {
      try {
        await DatabaseTaskTemplateService.createTemplate({
          templateId: template.id,
          taskType: template.taskType,
          title: template.title,
          description: template.description || '',
          rewardType: template.rewardType,
          rewardAmount: template.rewardAmount,
          progressTotal: template.progressTotal,
          icon: template.icon,
          category: template.category,
          rarity: template.rarity,
          expiresInHours: template.expiresInHours
        }, 'system');
        console.log(`   ‚úÖ ${template.title}`);
      } catch (error: any) {
        console.log(`   ‚ùå ${template.title}: ${error.message}`);
      }
    }

    // –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    console.log('\nüìã –®–∞–≥ 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞...');
    const allTemplates = await DatabaseTaskTemplateService.getAllTemplates();
    console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤: ${allTemplates.length}`);
    
    allTemplates.forEach(template => {
      console.log(`   - ${template.title} (${template.category}): ${template.rewardAmount} ${template.rewardType}`);
    });

    console.log('\nüéâ –ù–æ–≤–∞—è —Å–∏—Å—Ç–µ–º–∞ –∑–∞–¥–∞–Ω–∏–π –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∏—Ä–æ–≤–∞–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏–∏:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º –∏–Ω–∏—Ü–∏–∞–ª–∏–∑–∞—Ü–∏—é
initNewTaskSystem().catch(console.error); 