#!/usr/bin/env tsx

import { db } from '../server/db';
import { prizes, boxTypes } from '../shared/schema';
import { eq, and } from 'drizzle-orm';

interface PrizeData {
  id?: number;
  boxTypeId: number;
  prizeType: 'money' | 'pro';
  amount?: number;
  proDays?: number;
  chance: number;
}

async function listPrizes(boxType?: string) {
  try {
    let query = db
      .select({
        id: prizes.id,
        boxType: boxTypes.type,
        boxName: boxTypes.name,
        prizeType: prizes.prizeType,
        amount: prizes.amount,
        proDays: prizes.proDays,
        chance: prizes.chance,
        isActive: prizes.isActive,
      })
      .from(prizes)
      .innerJoin(boxTypes, eq(prizes.boxTypeId, boxTypes.id));

    if (boxType) {
      query = query.where(eq(boxTypes.type, boxType as any));
    }

    const prizeList = await query;

    console.log('\nüéÅ –°–ø–∏—Å–æ–∫ –ø—Ä–∏–∑–æ–≤:');
    console.log('‚îÄ'.repeat(80));
    
    let currentBoxType = '';
    for (const prize of prizeList) {
      if (prize.boxType !== currentBoxType) {
        currentBoxType = prize.boxType;
        console.log(`\nüì¶ ${prize.boxName} (${prize.boxType.toUpperCase()}):`);
        console.log('‚îÄ'.repeat(40));
      }
      
      const prizeText = prize.prizeType === 'pro' 
        ? `PRO ${prize.proDays} –¥–Ω–µ–π`
        : `$${prize.amount?.toLocaleString()}`;
      
      const status = prize.isActive ? '‚úÖ' : '‚ùå';
      console.log(`${status} ID: ${prize.id} | ${prizeText} | –®–∞–Ω—Å: ${prize.chance}%`);
    }
    
    console.log('\n');
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ –ø—Ä–∏–∑–æ–≤:', error);
  }
}

async function addPrize(boxType: string, prizeType: 'money' | 'pro', value: number, chance: number) {
  try {
    // –ü–æ–ª—É—á–∞–µ–º ID —Ç–∏–ø–∞ –∫–æ—Ä–æ–±–∫–∏
    const boxTypeRecord = await db
      .select({ id: boxTypes.id })
      .from(boxTypes)
      .where(eq(boxTypes.type, boxType as any))
      .limit(1);

    if (!boxTypeRecord.length) {
      console.error(`‚ùå –¢–∏–ø –∫–æ—Ä–æ–±–∫–∏ '${boxType}' –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return;
    }

    const prizeData: PrizeData = {
      boxTypeId: boxTypeRecord[0].id,
      prizeType,
      chance,
    };

    if (prizeType === 'money') {
      prizeData.amount = value;
    } else {
      prizeData.proDays = value;
    }

    await db.insert(prizes).values(prizeData);
    
    const prizeText = prizeType === 'pro' 
      ? `PRO ${value} –¥–Ω–µ–π`
      : `$${value.toLocaleString()}`;
    
    console.log(`‚úÖ –ü—Ä–∏–∑ –¥–æ–±–∞–≤–ª–µ–Ω: ${prizeText} –¥–ª—è ${boxType} –∫–æ—Ä–æ–±–∫–∏ (—à–∞–Ω—Å: ${chance}%)`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –ø—Ä–∏–∑–∞:', error);
  }
}

async function updatePrize(prizeId: number, updates: Partial<PrizeData>) {
  try {
    await db.update(prizes)
      .set(updates)
      .where(eq(prizes.id, prizeId));
    
    console.log(`‚úÖ –ü—Ä–∏–∑ ID ${prizeId} –æ–±–Ω–æ–≤–ª–µ–Ω`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–∏–∑–∞:', error);
  }
}

async function deletePrize(prizeId: number) {
  try {
    await db.delete(prizes).where(eq(prizes.id, prizeId));
    console.log(`‚úÖ –ü—Ä–∏–∑ ID ${prizeId} —É–¥–∞–ª–µ–Ω`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —É–¥–∞–ª–µ–Ω–∏—è –ø—Ä–∏–∑–∞:', error);
  }
}

async function togglePrize(prizeId: number) {
  try {
    const prize = await db
      .select({ isActive: prizes.isActive })
      .from(prizes)
      .where(eq(prizes.id, prizeId))
      .limit(1);

    if (!prize.length) {
      console.error(`‚ùå –ü—Ä–∏–∑ ID ${prizeId} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
      return;
    }

    await db.update(prizes)
      .set({ isActive: !prize[0].isActive })
      .where(eq(prizes.id, prizeId));
    
    const status = !prize[0].isActive ? '–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω' : '–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞–Ω';
    console.log(`‚úÖ –ü—Ä–∏–∑ ID ${prizeId} ${status}`);
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø–µ—Ä–µ–∫–ª—é—á–µ–Ω–∏—è —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–∏–∑–∞:', error);
  }
}

function showHelp() {
  console.log(`
üéÅ –£–ø—Ä–∞–≤–ª–µ–Ω–∏–µ –ø—Ä–∏–∑–∞–º–∏

–ò—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏–µ:
  tsx manage-prizes.ts <–∫–æ–º–∞–Ω–¥–∞> [–ø–∞—Ä–∞–º–µ—Ç—Ä—ã]

–ö–æ–º–∞–Ω–¥—ã:
  list [boxType]                    - –ü–æ–∫–∞–∑–∞—Ç—å –≤—Å–µ –ø—Ä–∏–∑—ã (–æ–ø—Ü–∏–æ–Ω–∞–ª—å–Ω–æ –¥–ª—è –∫–æ–Ω–∫—Ä–µ—Ç–Ω–æ–π –∫–æ—Ä–æ–±–∫–∏)
  add <boxType> <type> <value> <chance> - –î–æ–±–∞–≤–∏—Ç—å –ø—Ä–∏–∑
  update <id> <field> <value>       - –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–∏–∑
  delete <id>                       - –£–¥–∞–ª–∏—Ç—å –ø—Ä–∏–∑
  toggle <id>                       - –ê–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å/–¥–µ–∞–∫—Ç–∏–≤–∏—Ä–æ–≤–∞—Ç—å –ø—Ä–∏–∑
  help                              - –ü–æ–∫–∞–∑–∞—Ç—å —ç—Ç—É —Å–ø—Ä–∞–≤–∫—É

–ü–∞—Ä–∞–º–µ—Ç—Ä—ã:
  boxType: red, green, x
  type: money, pro
  value: —Å—É–º–º–∞ –¥–µ–Ω–µ–≥ –∏–ª–∏ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –¥–Ω–µ–π PRO
  chance: —à–∞–Ω—Å –≤ –ø—Ä–æ—Ü–µ–Ω—Ç–∞—Ö (0.1-100)
  field: amount, proDays, chance, isActive

–ü—Ä–∏–º–µ—Ä—ã:
  tsx manage-prizes.ts list
  tsx manage-prizes.ts list red
  tsx manage-prizes.ts add red money 5000 10
  tsx manage-prizes.ts add green pro 14 2
  tsx manage-prizes.ts update 1 chance 15
  tsx manage-prizes.ts toggle 1
  tsx manage-prizes.ts delete 1
`);
}

async function main() {
  const args = process.argv.slice(2);
  const command = args[0];

  if (!command || command === 'help') {
    showHelp();
    return;
  }

  try {
    switch (command) {
      case 'list':
        await listPrizes(args[1]);
        break;
        
      case 'add':
        if (args.length < 5) {
          console.error('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã add');
          return;
        }
        await addPrize(args[1], args[2] as 'money' | 'pro', Number(args[3]), Number(args[4]));
        break;
        
      case 'update':
        if (args.length < 4) {
          console.error('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã update');
          return;
        }
        const updates: any = {};
        updates[args[2]] = args[2] === 'isActive' ? args[3] === 'true' : Number(args[3]);
        await updatePrize(Number(args[1]), updates);
        break;
        
      case 'delete':
        if (args.length < 2) {
          console.error('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã delete');
          return;
        }
        await deletePrize(Number(args[1]));
        break;
        
      case 'toggle':
        if (args.length < 2) {
          console.error('‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ –ø–∞—Ä–∞–º–µ—Ç—Ä–æ–≤ –¥–ª—è –∫–æ–º–∞–Ω–¥—ã toggle');
          return;
        }
        await togglePrize(Number(args[1]));
        break;
        
      default:
        console.error(`‚ùå –ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –∫–æ–º–∞–Ω–¥–∞: ${command}`);
        showHelp();
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∫–æ–º–∞–Ω–¥—ã:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
main(); 