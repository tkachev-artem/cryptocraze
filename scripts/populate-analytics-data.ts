import { db } from '../server/db.js';
import { 
  users, 
  deals, 
  userDailyStats, 
  userAcquisitionMetrics, 
  engagementMetrics, 
  revenueMetrics,
  cohortAnalysis,
  premiumSubscriptions
} from '../shared/schema.js';
import { sql } from 'drizzle-orm';

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
async function createTestUsers() {
  console.log('üìä –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
  
  const testUsers = [];
  for (let i = 1; i <= 50; i++) {
    const createdAt = new Date();
    createdAt.setDate(createdAt.getDate() - Math.floor(Math.random() * 30)); // –ü–æ—Å–ª–µ–¥–Ω–∏–µ 30 –¥–Ω–µ–π
    
    testUsers.push({
      id: `test_user_${i}`,
      email: `user${i}@test.com`,
      firstName: `User${i}`,
      lastName: 'Test',
      balance: '10000.00',
      coins: Math.floor(Math.random() * 1000),
      tradesCount: Math.floor(Math.random() * 50),
      totalTradesVolume: (Math.random() * 100000).toFixed(2),
      successfulTradesPercentage: (Math.random() * 100).toFixed(2),
      maxProfit: (Math.random() * 5000).toFixed(2),
      maxLoss: (-Math.random() * 2000).toFixed(2),
      isPremium: Math.random() > 0.8, // 20% premium users
      role: 'user',
      createdAt,
      updatedAt: createdAt
    });
  }
  
  await db.insert(users).values(testUsers).onConflictDoNothing();
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${testUsers.length} —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π`);
  return testUsers;
}

// –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫
async function createTestDeals(testUsers: any[]) {
  console.log('üíπ –°–æ–∑–¥–∞–Ω–∏–µ —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫...');
  
  const testDeals = [];
  for (const user of testUsers.slice(0, 30)) { // –¢–æ–ª—å–∫–æ –¥–ª—è –ø–µ—Ä–≤—ã—Ö 30 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const dealsCount = Math.floor(Math.random() * 20) + 1;
    
    for (let j = 0; j < dealsCount; j++) {
      const openedAt = new Date();
      openedAt.setDate(openedAt.getDate() - Math.floor(Math.random() * 30));
      
      const closedAt = new Date(openedAt);
      closedAt.setHours(closedAt.getHours() + Math.floor(Math.random() * 48) + 1);
      
      const amount = parseFloat((Math.random() * 1000 + 100).toFixed(2));
      const isProfit = Math.random() > 0.4; // 60% –ø—Ä–∏–±—ã–ª—å–Ω—ã—Ö —Å–¥–µ–ª–æ–∫
      const profitPercentage = isProfit 
        ? Math.random() * 50 + 5  // 5-55% –ø—Ä–∏–±—ã–ª—å
        : -(Math.random() * 30 + 5); // 5-35% —É–±—ã—Ç–æ–∫
      
      const profit = amount * (profitPercentage / 100);
      
      testDeals.push({
        userId: user.id,
        symbol: ['BTCUSDT', 'ETHUSDT', 'SOLUSDT', 'XRPUSDT'][Math.floor(Math.random() * 4)],
        direction: Math.random() > 0.5 ? 'up' : 'down',
        amount: amount.toString(),
        leverage: Math.floor(Math.random() * 10) + 1,
        openPrice: (Math.random() * 50000 + 1000).toString(),
        closePrice: (Math.random() * 50000 + 1000).toString(),
        profit: profit.toString(),
        profitPercentage: profitPercentage.toString(),
        commission: (amount * 0.01).toString(), // 1% –∫–æ–º–∏—Å—Å–∏—è
        openedAt,
        closedAt,
        status: 'closed'
      });
    }
  }
  
  await db.insert(deals).values(testDeals).onConflictDoNothing();
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${testDeals.length} —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫`);
  return testDeals;
}

// –°–æ–∑–¥–∞–Ω–∏–µ daily stats
async function createUserDailyStats(testUsers: any[], testDeals: any[]) {
  console.log('üìà –°–æ–∑–¥–∞–Ω–∏–µ –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
  
  const dailyStats = [];
  const today = new Date();
  
  for (let day = 0; day < 30; day++) {
    const date = new Date(today);
    date.setDate(date.getDate() - day);
    
    // –î–ª—è –∫–∞–∂–¥–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è —Å–æ–∑–¥–∞–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É
    for (const user of testUsers.slice(0, 30)) {
      const userDeals = testDeals.filter(deal => 
        deal.userId === user.id && 
        deal.openedAt.toDateString() === date.toDateString()
      );
      
      if (userDeals.length > 0 || Math.random() > 0.7) { // 30% –¥–Ω–µ–π —Å –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç—å—é
        const tradesCount = userDeals.length;
        const tradesVolume = userDeals.reduce((sum, deal) => sum + parseFloat(deal.amount), 0);
        const totalProfit = userDeals.reduce((sum, deal) => sum + parseFloat(deal.profit), 0);
        
        dailyStats.push({
          userId: user.id,
          date,
          tradesCount,
          tradesVolume: tradesVolume.toString(),
          totalProfit: totalProfit.toString(),
          sessionDuration: Math.floor(Math.random() * 300) + 60, // 1-5 –º–∏–Ω—É—Ç
          screensViewed: Math.floor(Math.random() * 20) + 5,
          energyUsed: Math.floor(Math.random() * 50),
          coinsEarned: Math.floor(Math.random() * 100),
          premiumActive: user.isPremium
        });
      }
    }
  }
  
  await db.insert(userDailyStats).values(dailyStats).onConflictDoNothing();
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${dailyStats.length} –∑–∞–ø–∏—Å–µ–π –µ–∂–µ–¥–Ω–µ–≤–Ω–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏`);
}

// –°–æ–∑–¥–∞–Ω–∏–µ acquisition metrics
async function createAcquisitionMetrics() {
  console.log('üéØ –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
  
  const acquisitionData = [];
  const today = new Date();
  
  for (let day = 0; day < 30; day++) {
    const date = new Date(today);
    date.setDate(date.getDate() - day);
    
    const totalSignups = Math.floor(Math.random() * 10) + 2; // 2-12 —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –≤ –¥–µ–Ω—å
    const totalFirstTrades = Math.floor(totalSignups * (0.6 + Math.random() * 0.3)); // 60-90% –∫–æ–Ω–≤–µ—Ä—Å–∏—è
    const avgTimeToFirstTrade = Math.floor(Math.random() * 1440) + 60; // 1-24 —á–∞—Å–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö
    
    acquisitionData.push({
      date,
      totalInstalls: Math.floor(totalSignups * 1.2), // 20% –±–æ–ª—å—à–µ —É—Å—Ç–∞–Ω–æ–≤–æ–∫ —á–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π
      totalSignups,
      totalFirstTrades,
      totalFirstDeposits: Math.floor(totalFirstTrades * 0.3), // 30% –¥–µ–ª–∞—é—Ç –ø–µ—Ä–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç
      signupRate: ((totalSignups / (totalSignups * 1.2)) * 100).toFixed(4),
      tradeOpenRate: ((totalFirstTrades / totalSignups) * 100).toFixed(4),
      avgTimeToFirstTrade
    });
  }
  
  await db.insert(userAcquisitionMetrics).values(acquisitionData).onConflictDoNothing();
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${acquisitionData.length} –∑–∞–ø–∏—Å–µ–π –º–µ—Ç—Ä–∏–∫ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è`);
}

// –°–æ–∑–¥–∞–Ω–∏–µ engagement metrics
async function createEngagementMetrics() {
  console.log('üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏...');
  
  const engagementData = [];
  const today = new Date();
  
  for (let day = 0; day < 30; day++) {
    const date = new Date(today);
    date.setDate(date.getDate() - day);
    
    const dau = Math.floor(Math.random() * 30) + 20; // 20-50 DAU
    const totalTrades = Math.floor(Math.random() * 100) + 50; // 50-150 —Å–¥–µ–ª–æ–∫ –≤ –¥–µ–Ω—å
    
    engagementData.push({
      date,
      dailyActiveUsers: dau,
      weeklyActiveUsers: Math.floor(dau * (6 + Math.random() * 2)), // WAU –≤ 6-8 —Ä–∞–∑ –±–æ–ª—å—à–µ DAU
      monthlyActiveUsers: Math.floor(dau * (25 + Math.random() * 10)), // MAU –≤ 25-35 —Ä–∞–∑ –±–æ–ª—å—à–µ DAU
      avgSessionDuration: Math.floor(Math.random() * 180) + 120, // 2-5 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
      avgScreensPerSession: (Math.random() * 10 + 5).toFixed(2), // 5-15 —ç–∫—Ä–∞–Ω–æ–≤
      avgTradesPerUser: (totalTrades / dau).toFixed(4),
      avgVirtualBalanceUsed: (Math.random() * 5000 + 1000).toFixed(8), // $1000-6000
      totalTrades,
      totalVolume: (Math.random() * 500000 + 100000).toFixed(8) // $100K-600K
    });
  }
  
  await db.insert(engagementMetrics).values(engagementData).onConflictDoNothing();
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${engagementData.length} –∑–∞–ø–∏—Å–µ–π –º–µ—Ç—Ä–∏–∫ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏`);
}

// –°–æ–∑–¥–∞–Ω–∏–µ revenue metrics
async function createRevenueMetrics() {
  console.log('üí∞ –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –¥–æ—Ö–æ–¥–æ–≤...');
  
  const revenueData = [];
  const today = new Date();
  
  for (let day = 0; day < 30; day++) {
    const date = new Date(today);
    date.setDate(date.getDate() - day);
    
    const totalPayingUsers = Math.floor(Math.random() * 8) + 2; // 2-10 –ø–ª–∞—Ç—è—â–∏—Ö –≤ –¥–µ–Ω—å
    const premiumRevenue = totalPayingUsers * (499 + Math.random() * 100); // 499-599 —Ä—É–± –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É
    const adRevenue = Math.random() * 1000 + 500; // $500-1500 —Å —Ä–µ–∫–ª–∞–º—ã
    const totalRevenue = premiumRevenue + adRevenue;
    
    revenueData.push({
      date,
      totalRevenue: totalRevenue.toFixed(2),
      premiumRevenue: premiumRevenue.toFixed(2),
      adRevenue: adRevenue.toFixed(2),
      totalPayingUsers,
      newPayingUsers: Math.floor(totalPayingUsers * 0.7), // 70% –Ω–æ–≤—ã–µ
      arpu: (totalRevenue / 50).toFixed(2), // –ù–∞ 50 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      arppu: (totalRevenue / totalPayingUsers).toFixed(2),
      conversionRate: (totalPayingUsers / 50 * 100).toFixed(4), // –ù–∞ 50 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
      churnRate: (Math.random() * 0.05).toFixed(4), // 0-5% –æ—Ç—Ç–æ–∫
      lifetimeValue: (Math.random() * 5000 + 1000).toFixed(2) // $1000-6000 LTV
    });
  }
  
  await db.insert(revenueMetrics).values(revenueData).onConflictDoNothing();
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${revenueData.length} –∑–∞–ø–∏—Å–µ–π –º–µ—Ç—Ä–∏–∫ –¥–æ—Ö–æ–¥–æ–≤`);
}

// –°–æ–∑–¥–∞–Ω–∏–µ cohort analysis
async function createCohortAnalysis() {
  console.log('üë• –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–≥–æ—Ä—Ç –∞–Ω–∞–ª–∏–∑–∞...');
  
  const cohortData = [];
  const today = new Date();
  
  // –°–æ–∑–¥–∞–µ–º –∫–æ–≥–æ—Ä—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 12 –Ω–µ–¥–µ–ª—å
  for (let week = 0; week < 12; week++) {
    const cohortWeek = new Date(today);
    cohortWeek.setDate(cohortWeek.getDate() - week * 7);
    
    const initialUsers = Math.floor(Math.random() * 20) + 10; // 10-30 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–æ–≥–æ—Ä—Ç–µ
    
    // –°–æ–∑–¥–∞–µ–º retention –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–π –Ω–µ–¥–µ–ª–∏
    for (let period = 0; period <= Math.min(week, 8); period++) {
      const retentionRate = Math.max(0.1, 1 - (period * 0.15) - Math.random() * 0.1); // –£–±—ã–≤–∞—é—â–∏–π retention
      const usersCount = Math.floor(initialUsers * retentionRate);
      const totalRevenue = usersCount * (Math.random() * 500 + 100); // $100-600 revenue per user
      
      cohortData.push({
        cohortWeek,
        periodNumber: period,
        usersCount,
        retentionRate: retentionRate.toFixed(4),
        totalRevenue: totalRevenue.toFixed(2),
        avgRevenuePerUser: (totalRevenue / Math.max(usersCount, 1)).toFixed(2)
      });
    }
  }
  
  await db.insert(cohortAnalysis).values(cohortData).onConflictDoNothing();
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${cohortData.length} –∑–∞–ø–∏—Å–µ–π –∫–æ–≥–æ—Ä—Ç –∞–Ω–∞–ª–∏–∑–∞`);
}

// –°–æ–∑–¥–∞–Ω–∏–µ premium –ø–æ–¥–ø–∏—Å–æ–∫
async function createPremiumSubscriptions(testUsers: any[]) {
  console.log('üíé –°–æ–∑–¥–∞–Ω–∏–µ premium –ø–æ–¥–ø–∏—Å–æ–∫...');
  
  const premiumUsers = testUsers.filter(user => user.isPremium);
  const subscriptions = [];
  
  for (const user of premiumUsers) {
    const startDate = new Date();
    startDate.setDate(startDate.getDate() - Math.floor(Math.random() * 30));
    
    const endDate = new Date(startDate);
    endDate.setMonth(endDate.getMonth() + 1); // –ú–µ—Å—è—á–Ω–∞—è –ø–æ–¥–ø–∏—Å–∫–∞
    
    subscriptions.push({
      userId: user.id,
      planName: 'Premium Monthly',
      amount: '499.00',
      currency: 'RUB',
      startDate,
      endDate,
      status: 'active',
      paymentMethod: 'card',
      isActive: true
    });
  }
  
  await db.insert(premiumSubscriptions).values(subscriptions).onConflictDoNothing();
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${subscriptions.length} premium –ø–æ–¥–ø–∏—Å–æ–∫`);
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üéâ –ó–∞–ø—É—Å–∫ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö –¥–ª—è BI Analytics...\n');
  
  try {
    // 1. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    const testUsers = await createTestUsers();
    
    // 2. –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–¥–µ–ª–∫–∏  
    const testDeals = await createTestDeals(testUsers);
    
    // 3. –°–æ–∑–¥–∞–µ–º daily stats
    await createUserDailyStats(testUsers, testDeals);
    
    // 4. –°–æ–∑–¥–∞–µ–º acquisition metrics
    await createAcquisitionMetrics();
    
    // 5. –°–æ–∑–¥–∞–µ–º engagement metrics
    await createEngagementMetrics();
    
    // 6. –°–æ–∑–¥–∞–µ–º revenue metrics
    await createRevenueMetrics();
    
    // 7. –°–æ–∑–¥–∞–µ–º cohort analysis
    await createCohortAnalysis();
    
    // 8. –°–æ–∑–¥–∞–µ–º premium –ø–æ–¥–ø–∏—Å–∫–∏
    await createPremiumSubscriptions(testUsers);
    
    console.log('\nüéä –í—Å–µ —Ç–µ—Å—Ç–æ–≤—ã–µ –¥–∞–Ω–Ω—ã–µ —É—Å–ø–µ—à–Ω–æ —Å–æ–∑–¥–∞–Ω—ã!');
    console.log('\nüìä –¢–µ–ø–µ—Ä—å –≤ –∞–¥–º–∏–Ω—Å–∫–æ–π BI –ø–∞–Ω–µ–ª–∏ –¥–æ–ª–∂–Ω—ã –æ—Ç–æ–±—Ä–∞–∂–∞—Ç—å—Å—è —Ä–µ–∞–ª—å–Ω—ã–µ –º–µ—Ç—Ä–∏–∫–∏:');
    console.log('   ‚Ä¢ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏: ~50 —Ç–µ—Å—Ç–æ–≤—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π');
    console.log('   ‚Ä¢ –°–¥–µ–ª–∫–∏: –Ω–µ—Å–∫–æ–ª—å–∫–æ —Å–æ—Ç–µ–Ω —Ç–µ—Å—Ç–æ–≤—ã—Ö —Å–¥–µ–ª–æ–∫');
    console.log('   ‚Ä¢ –ï–∂–µ–¥–Ω–µ–≤–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ –∑–∞ 30 –¥–Ω–µ–π');
    console.log('   ‚Ä¢ –ú–µ—Ç—Ä–∏–∫–∏ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è, –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏ –∏ –¥–æ—Ö–æ–¥–æ–≤');
    console.log('   ‚Ä¢ –ö–æ–≥–æ—Ä—Ç –∞–Ω–∞–ª–∏–∑ –∑–∞ 12 –Ω–µ–¥–µ–ª—å');
    console.log('   ‚Ä¢ Premium –ø–æ–¥–ø–∏—Å–∫–∏');
    console.log('\nüöÄ –û–±–Ω–æ–≤–∏—Ç–µ –∞–¥–º–∏–Ω—Å–∫—É—é –ø–∞–Ω–µ–ª—å - –¥–∞–Ω–Ω—ã–µ –¥–æ–ª–∂–Ω—ã –ø–æ—è–≤–∏—Ç—å—Å—è!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö:', error);
  }
}

main();