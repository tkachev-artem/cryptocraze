import { db } from '../server/db.js';
import { 
  userDailyStats, 
  userAcquisitionMetrics, 
  engagementMetrics, 
  revenueMetrics,
  cohortAnalysis
} from '../shared/schema.js';

// –°–æ–∑–¥–∞–Ω–∏–µ acquisition metrics
async function createAcquisitionMetrics() {
  console.log('üéØ –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π...');
  
  const acquisitionData = [];
  const today = new Date();
  
  for (let day = 0; day < 30; day++) {
    const date = new Date(today);
    date.setDate(date.getDate() - day);
    
    const totalSignups = Math.floor(Math.random() * 15) + 5; // 5-20 —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π –≤ –¥–µ–Ω—å
    const totalFirstTrades = Math.floor(totalSignups * (0.6 + Math.random() * 0.3)); // 60-90% –∫–æ–Ω–≤–µ—Ä—Å–∏—è
    const avgTimeToFirstTrade = Math.floor(Math.random() * 1440) + 60; // 1-24 —á–∞—Å–∞ –≤ –º–∏–Ω—É—Ç–∞—Ö
    
    acquisitionData.push({
      date,
      totalInstalls: Math.floor(totalSignups * 1.3), // 30% –±–æ–ª—å—à–µ —É—Å—Ç–∞–Ω–æ–≤–æ–∫ —á–µ–º —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–π
      totalSignups,
      totalFirstTrades,
      totalFirstDeposits: Math.floor(totalFirstTrades * 0.2), // 20% –¥–µ–ª–∞—é—Ç –ø–µ—Ä–≤—ã–π –¥–µ–ø–æ–∑–∏—Ç
      signupRate: ((totalSignups / (totalSignups * 1.3)) * 100).toFixed(4),
      tradeOpenRate: ((totalFirstTrades / totalSignups) * 100).toFixed(4),
      avgTimeToFirstTrade
    });
  }
  
  await db.insert(userAcquisitionMetrics).values(acquisitionData).onConflictDoNothing();
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${acquisitionData.length} –∑–∞–ø–∏—Å–µ–π –º–µ—Ç—Ä–∏–∫ –ø—Ä–∏–≤–ª–µ—á–µ–Ω–∏—è`);
}

// –°–æ–∑–¥–∞–Ω–∏–µ engagement metrics
async function createEngagementMetrics() {
  console.log('üöÄ –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏...');
  
  const engagementData = [];
  const today = new Date();
  
  for (let day = 0; day < 30; day++) {
    const date = new Date(today);
    date.setDate(date.getDate() - day);
    
    const dau = Math.floor(Math.random() * 40) + 30; // 30-70 DAU
    const totalTrades = Math.floor(Math.random() * 150) + 100; // 100-250 —Å–¥–µ–ª–æ–∫ –≤ –¥–µ–Ω—å
    
    engagementData.push({
      date,
      dailyActiveUsers: dau,
      weeklyActiveUsers: Math.floor(dau * (5 + Math.random() * 3)), // WAU –≤ 5-8 —Ä–∞–∑ –±–æ–ª—å—à–µ DAU
      monthlyActiveUsers: Math.floor(dau * (20 + Math.random() * 15)), // MAU –≤ 20-35 —Ä–∞–∑ –±–æ–ª—å—à–µ DAU
      avgSessionDuration: Math.floor(Math.random() * 300) + 180, // 3-8 –º–∏–Ω—É—Ç –≤ —Å–µ–∫—É–Ω–¥–∞—Ö
      avgScreensPerSession: (Math.random() * 8 + 7).toFixed(2), // 7-15 —ç–∫—Ä–∞–Ω–æ–≤
      avgTradesPerUser: (totalTrades / dau).toFixed(4),
      avgVirtualBalanceUsed: (Math.random() * 3000 + 2000).toFixed(8), // $2000-5000
      totalTrades,
      totalVolume: (Math.random() * 800000 + 200000).toFixed(8) // $200K-1M
    });
  }
  
  await db.insert(engagementMetrics).values(engagementData).onConflictDoNothing();
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${engagementData.length} –∑–∞–ø–∏—Å–µ–π –º–µ—Ç—Ä–∏–∫ –≤–æ–≤–ª–µ—á–µ–Ω–Ω–æ—Å—Ç–∏`);
}

// –°–æ–∑–¥–∞–Ω–∏–µ revenue metrics
async function createRevenueMetrics() {
  console.log('üí∞ –°–æ–∑–¥–∞–Ω–∏–µ –º–µ—Ç—Ä–∏–∫ –¥–æ—Ö–æ–¥–æ–≤...');
  
  const revenueData = [];
  const today = new Date();
  
  for (let day = 0; day < 30; day++) {
    const date = new Date(today);
    date.setDate(date.getDate() - day);
    
    const totalPayingUsers = Math.floor(Math.random() * 12) + 3; // 3-15 –ø–ª–∞—Ç—è—â–∏—Ö –≤ –¥–µ–Ω—å
    const premiumRevenue = totalPayingUsers * (450 + Math.random() * 200); // 450-650 —Ä—É–± –∑–∞ –ø–æ–¥–ø–∏—Å–∫—É
    const adRevenue = Math.random() * 1500 + 800; // $800-2300 —Å —Ä–µ–∫–ª–∞–º—ã
    const totalRevenue = premiumRevenue + adRevenue;
    const totalUsers = 60; // –ü—Ä–∏–º–µ—Ä–Ω–æ 60 –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    
    revenueData.push({
      date,
      totalRevenue: totalRevenue.toFixed(2),
      premiumRevenue: premiumRevenue.toFixed(2),
      adRevenue: adRevenue.toFixed(2),
      totalPayingUsers,
      newPayingUsers: Math.floor(totalPayingUsers * 0.8), // 80% –Ω–æ–≤—ã–µ
      arpu: (totalRevenue / totalUsers).toFixed(2), // ARPU
      arppu: (totalRevenue / totalPayingUsers).toFixed(2), // ARPPU
      conversionRate: (totalPayingUsers / totalUsers * 100).toFixed(4), // –ö–æ–Ω–≤–µ—Ä—Å–∏—è –≤ %
      churnRate: (Math.random() * 0.08).toFixed(4), // 0-8% –æ—Ç—Ç–æ–∫
      lifetimeValue: (Math.random() * 4000 + 2000).toFixed(2) // $2000-6000 LTV
    });
  }
  
  await db.insert(revenueMetrics).values(revenueData).onConflictDoNothing();
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${revenueData.length} –∑–∞–ø–∏—Å–µ–π –º–µ—Ç—Ä–∏–∫ –¥–æ—Ö–æ–¥–æ–≤`);
}

// –°–æ–∑–¥–∞–Ω–∏–µ cohort analysis
async function createCohortAnalysis() {
  console.log('üë• –°–æ–∑–¥–∞–Ω–∏–µ –∫–æ–≥–æ—Ä—Ç –∞–Ω–∞–ª–∏–∑–∞...');
  
  const cohortData = [];
  const today = new Date();
  
  // –°–æ–∑–¥–∞–µ–º –∫–æ–≥–æ—Ä—Ç—ã –∑–∞ –ø–æ—Å–ª–µ–¥–Ω–∏–µ 8 –Ω–µ–¥–µ–ª—å
  for (let week = 0; week < 8; week++) {
    const cohortWeek = new Date(today);
    cohortWeek.setDate(cohortWeek.getDate() - week * 7);
    
    const initialUsers = Math.floor(Math.random() * 25) + 15; // 15-40 –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π –≤ –∫–æ–≥–æ—Ä—Ç–µ
    
    // –°–æ–∑–¥–∞–µ–º retention –¥–∞–Ω–Ω—ã–µ –¥–ª—è –∫–∞–∂–¥–æ–π –Ω–µ–¥–µ–ª–∏
    for (let period = 0; period <= Math.min(week, 6); period++) {
      let retentionRate = 1; // –ù–∞—á–∏–Ω–∞–µ–º —Å 100%
      
      // –ü–æ—Å—Ç–µ–ø–µ–Ω–Ω–æ–µ —Å–Ω–∏–∂–µ–Ω–∏–µ retention
      if (period > 0) {
        retentionRate = Math.max(0.2, 0.9 - (period * 0.12) - Math.random() * 0.08);
      }
      
      const usersCount = Math.floor(initialUsers * retentionRate);
      const totalRevenue = usersCount * (Math.random() * 600 + 200); // $200-800 revenue per user
      
      cohortData.push({
        cohortWeek,
        periodNumber: period,
        usersCount,
        retentionRate: retentionRate.toFixed(4),
        totalRevenue: totalRevenue.toFixed(2),
        avgRevenuePerUser: (totalRevenue / Math.max(usersCount, 1)).toFixed(2)
      });
    }
  }
  
  await db.insert(cohortAnalysis).values(cohortData).onConflictDoNothing();
  console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ ${cohortData.length} –∑–∞–ø–∏—Å–µ–π –∫–æ–≥–æ—Ä—Ç –∞–Ω–∞–ª–∏–∑–∞`);
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è
async function main() {
  console.log('üéâ –°–æ–∑–¥–∞–Ω–∏–µ –±–∞–∑–æ–≤—ã—Ö BI –º–µ—Ç—Ä–∏–∫...\n');
  
  try {
    // 1. –°–æ–∑–¥–∞–µ–º acquisition metrics
    await createAcquisitionMetrics();
    
    // 2. –°–æ–∑–¥–∞–µ–º engagement metrics
    await createEngagementMetrics();
    
    // 3. –°–æ–∑–¥–∞–µ–º revenue metrics
    await createRevenueMetrics();
    
    // 4. –°–æ–∑–¥–∞–µ–º cohort analysis
    await createCohortAnalysis();
    
    console.log('\nüéä –ë–∞–∑–æ–≤—ã–µ BI –º–µ—Ç—Ä–∏–∫–∏ —Å–æ–∑–¥–∞–Ω—ã!');
    console.log('\nüìä –¢–µ–ø–µ—Ä—å –≤ –∞–¥–º–∏–Ω—Å–∫–æ–π –ø–∞–Ω–µ–ª–∏ –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å –¥–∞–Ω–Ω—ã–µ:');
    console.log('   üìà User Acquisition: 30 –¥–Ω–µ–π –¥–∞–Ω–Ω—ã—Ö');
    console.log('   üöÄ Engagement Metrics: DAU 30-70, —Å–¥–µ–ª–∫–∏ 100-250/–¥–µ–Ω—å');
    console.log('   üí∞ Revenue Metrics: –¥–æ—Ö–æ–¥—ã $1000-3800/–¥–µ–Ω—å');
    console.log('   üë• Cohort Analysis: 8 –Ω–µ–¥–µ–ª—å –∫–æ–≥–æ—Ä—Ç–Ω–æ–≥–æ –∞–Ω–∞–ª–∏–∑–∞');
    console.log('\nüöÄ –û–±–Ω–æ–≤–∏—Ç–µ –∞–¥–º–∏–Ω—Å–∫—É—é –ø–∞–Ω–µ–ª—å - —Ç–µ–ø–µ—Ä—å –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å —Ä–µ–∞–ª—å–Ω—ã–µ —Ü–∏—Ñ—Ä—ã!');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Å–æ–∑–¥–∞–Ω–∏–∏ BI –º–µ—Ç—Ä–∏–∫:', error);
  }
}

main();