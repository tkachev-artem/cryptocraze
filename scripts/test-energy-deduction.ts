#!/usr/bin/env tsx

import { db } from '../server/db';
import { users, boxTypes } from '../shared/schema';
import { eq } from 'drizzle-orm';
import { PrizeService } from '../server/services/prizeService';

async function testEnergyDeduction() {
  try {
    console.log('üîã –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã—á–∏—Ç–∞–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–æ—Ä–æ–±–æ–∫...\n');

    // –ü–æ–ª—É—á–∞–µ–º –ø–µ—Ä–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
    const testUser = await db
      .select({
        id: users.id,
        email: users.email,
        energyTasksBonus: users.energyTasksBonus,
        balance: users.balance,
      })
      .from(users)
      .limit(1);

    if (!testUser.length) {
      console.error('‚ùå –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–∏ –Ω–µ –Ω–∞–π–¥–µ–Ω—ã');
      return;
    }

    const user = testUser[0];
    console.log(`üë§ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å: ${user.email}`);
    console.log(`üí∞ –ë–∞–ª–∞–Ω—Å: $${user.balance}`);
    console.log(`üîã –≠–Ω–µ—Ä–≥–∏—è: ${user.energyTasksBonus}/100\n`);

    // –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –∫–∞–∂–¥–æ–π –∫–æ—Ä–æ–±–∫–∏
    const boxTypesData = await db.select().from(boxTypes);
    console.log('üì¶ –¢—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ —ç–Ω–µ—Ä–≥–∏–∏:');
    boxTypesData.forEach(box => {
      console.log(`  ${box.name}: ${box.requiredEnergy} —ç–Ω–µ—Ä–≥–∏–∏`);
    });
    console.log('');

    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ –∫–∞–∂–¥–æ–π –∫–æ—Ä–æ–±–∫–∏
    for (const boxType of ['red', 'green', 'x'] as const) {
      console.log(`üéÅ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ ${boxType} –∫–æ—Ä–æ–±–∫–∏...`);
      
      try {
        // –ü–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â—É—é —ç–Ω–µ—Ä–≥–∏—é –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
        const currentUser = await db
          .select({ energyTasksBonus: users.energyTasksBonus })
          .from(users)
          .where(eq(users.id, user.id))
          .limit(1);

        const currentEnergy = currentUser[0]?.energyTasksBonus ?? 0;
        const requiredEnergy = boxTypesData.find(bt => bt.type === boxType)?.requiredEnergy ?? 0;

        console.log(`  üîã –¢–µ–∫—É—â–∞—è —ç–Ω–µ—Ä–≥–∏—è: ${currentEnergy}`);
        console.log(`  üìã –¢—Ä–µ–±—É–µ—Ç—Å—è —ç–Ω–µ—Ä–≥–∏–∏: ${requiredEnergy}`);

        if (currentEnergy < requiredEnergy) {
          console.log(`  ‚ùå –ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏ (–Ω—É–∂–Ω–æ ${requiredEnergy}, –µ—Å—Ç—å ${currentEnergy})`);
          
          // –î–æ–±–∞–≤–ª—è–µ–º —ç–Ω–µ—Ä–≥–∏—é –¥–ª—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
          await db.update(users)
            .set({ energyTasksBonus: requiredEnergy })
            .where(eq(users.id, user.id));
          
          console.log(`  ‚úÖ –î–æ–±–∞–≤–ª–µ–Ω–∞ —ç–Ω–µ—Ä–≥–∏—è –¥–æ ${requiredEnergy}`);
        }

        // –û—Ç–∫—Ä—ã–≤–∞–µ–º –∫–æ—Ä–æ–±–∫—É
        const result = await PrizeService.openBox(user.id, boxType);
        
        console.log(`  üéâ –ö–æ—Ä–æ–±–∫–∞ –æ—Ç–∫—Ä—ã—Ç–∞!`);
        console.log(`  üéÅ –ü—Ä–∏–∑: ${result.prize.prizeType === 'pro' ? `PRO ${result.prize.proDays} –¥–Ω–µ–π` : `$${result.prize.amount}`}`);
        console.log(`  üîã –ü–æ—Ç—Ä–∞—á–µ–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏: ${result.energySpent}`);
        
        if (result.balanceUpdate) {
          console.log(`  üí∞ –ü–æ–ª—É—á–µ–Ω–æ –¥–µ–Ω–µ–≥: $${result.balanceUpdate}`);
        }
        
        if (result.proDays) {
          console.log(`  üëë –ü–æ–ª—É—á–µ–Ω–æ PRO –¥–Ω–µ–π: ${result.proDays}`);
        }

        // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —á—Ç–æ —ç–Ω–µ—Ä–≥–∏—è –≤—ã—á—Ç–µ–Ω–∞
        const updatedUser = await db
          .select({ energyTasksBonus: users.energyTasksBonus })
          .from(users)
          .where(eq(users.id, user.id))
          .limit(1);

        const newEnergy = updatedUser[0]?.energyTasksBonus ?? 0;
        console.log(`  üîã –ù–æ–≤–∞—è —ç–Ω–µ—Ä–≥–∏—è: ${newEnergy}`);
        
        const expectedEnergy = Math.max(0, currentEnergy - requiredEnergy);
        if (newEnergy === expectedEnergy) {
          console.log(`  ‚úÖ –≠–Ω–µ—Ä–≥–∏—è –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ –≤—ã—á—Ç–µ–Ω–∞!`);
        } else {
          console.log(`  ‚ùå –û—à–∏–±–∫–∞ –≤—ã—á–∏—Ç–∞–Ω–∏—è —ç–Ω–µ—Ä–≥–∏–∏! –û–∂–∏–¥–∞–ª–æ—Å—å: ${expectedEnergy}, –ø–æ–ª—É—á–µ–Ω–æ: ${newEnergy}`);
        }

      } catch (error) {
        console.log(`  ‚ùå –û—à–∏–±–∫–∞: ${error instanceof Error ? error.message : '–ù–µ–∏–∑–≤–µ—Å—Ç–Ω–∞—è –æ—à–∏–±–∫–∞'}`);
      }
      
      console.log('');
    }

    // –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞
    const finalUser = await db
      .select({
        energyTasksBonus: users.energyTasksBonus,
        balance: users.balance,
        isPremium: users.isPremium,
        premiumExpiresAt: users.premiumExpiresAt,
      })
      .from(users)
      .where(eq(users.id, user.id))
      .limit(1);

    console.log('üìä –§–∏–Ω–∞–ª—å–Ω–∞—è —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞:');
    console.log(`  üîã –≠–Ω–µ—Ä–≥–∏—è: ${finalUser[0]?.energyTasksBonus ?? 0}/100`);
    console.log(`  üí∞ –ë–∞–ª–∞–Ω—Å: $${finalUser[0]?.balance ?? 0}`);
    console.log(`  üëë PRO —Å—Ç–∞—Ç—É—Å: ${finalUser[0]?.isPremium ? '–ê–∫—Ç–∏–≤–µ–Ω' : '–ù–µ–∞–∫—Ç–∏–≤–µ–Ω'}`);
    if (finalUser[0]?.premiumExpiresAt) {
      console.log(`  üìÖ PRO –∏—Å—Ç–µ–∫–∞–µ—Ç: ${finalUser[0].premiumExpiresAt.toLocaleString()}`);
    }

    // –ü–æ–ª—É—á–∞–µ–º –∏—Å—Ç–æ—Ä–∏—é –æ—Ç–∫—Ä—ã—Ç–∏–π
    const openings = await PrizeService.getUserOpenings(user.id, 10);
    console.log(`\nüìú –ò—Å—Ç–æ—Ä–∏—è –æ—Ç–∫—Ä—ã—Ç–∏–π (–ø–æ—Å–ª–µ–¥–Ω–∏–µ ${openings.length}):`);
    openings.forEach((opening, index) => {
      const prizeText = opening.prizeType === 'pro' 
        ? `PRO ${opening.proDays} –¥–Ω–µ–π`
        : `$${opening.amount?.toLocaleString()}`;
      
      console.log(`  ${index + 1}. ${opening.boxName}: ${prizeText} (—ç–Ω–µ—Ä–≥–∏—è: ${opening.energySpent})`);
    });

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testEnergyDeduction(); 