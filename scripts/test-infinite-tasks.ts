import { TaskService } from '../server/services/taskService';

const testInfiniteTasks = async () => {
  console.log('üéÆ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –±–µ—Å–∫–æ–Ω–µ—á–Ω–æ–π —Å–∏—Å—Ç–µ–º—ã –∑–∞–¥–∞–Ω–∏–π...\n');
  
  // –ò—Å–ø–æ–ª—å–∑—É–µ–º ID –ê—Ä—Ç—ë–º–∞ –¢–∫–∞—á—ë–≤–∞ –∫–∞–∫ —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const userId = '111907067370663926621';
  
  try {
    console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', userId);
    
    // –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞–Ω–∏—è
    console.log('\nüìã –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–µ–∫—É—â–∏–µ –∑–∞–¥–∞–Ω–∏—è...');
    const initialTasks = await TaskService.getUserTasks(userId);
    console.log(`–¢–µ–∫—É—â–∏—Ö –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: ${initialTasks.length}`);
    
    if (initialTasks.length > 0) {
      initialTasks.forEach((task, index) => {
        console.log(`   ${index + 1}. ID: ${task.id} - ${task.title}`);
        console.log(`      –ü—Ä–æ–≥—Ä–µ—Å—Å: ${task.progress.current}/${task.progress.total}`);
        console.log(`      –ù–∞–≥—Ä–∞–¥–∞: ${task.reward.amount} ${task.reward.type}`);
      });
    }
    
    // –®–∞–≥ 2: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ø–æ–ª–Ω—è–µ–º –¥–æ 3 –∑–∞–¥–∞–Ω–∏–π
    console.log('\nüìã –®–∞–≥ 2: –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ –ø–æ–ø–æ–ª–Ω—è–µ–º –¥–æ 3 –∑–∞–¥–∞–Ω–∏–π...');
    const currentCount = initialTasks.length;
    const maxTasks = 3;
    
    if (currentCount < maxTasks) {
      const tasksToCreate = maxTasks - currentCount;
      console.log(`–ù—É–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å ${tasksToCreate} –∑–∞–¥–∞–Ω–∏–π...`);
      
      for (let i = 0; i < tasksToCreate; i++) {
        const newTask = await TaskService.createRandomTask(userId);
        if (newTask) {
          console.log(`‚úÖ –°–æ–∑–¥–∞–Ω–æ –∑–∞–¥–∞–Ω–∏–µ: ${newTask.title} (ID: ${newTask.id})`);
        } else {
          console.log(`‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ ${i + 1}`);
        }
      }
    } else {
      console.log('‚úÖ –£–∂–µ –µ—Å—Ç—å 3 –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏—è');
    }
    
    // –®–∞–≥ 3: –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫
    console.log('\nüìã –®–∞–≥ 3: –ü–æ–ª—É—á–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–Ω—ã–π —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π...');
    const updatedTasks = await TaskService.getUserTasks(userId);
    console.log(`–¢–µ–ø–µ—Ä—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: ${updatedTasks.length}`);
    
    updatedTasks.forEach((task, index) => {
      console.log(`   ${index + 1}. ID: ${task.id} - ${task.title}`);
      console.log(`      –ü—Ä–æ–≥—Ä–µ—Å—Å: ${task.progress.current}/${task.progress.total}`);
      console.log(`      –ù–∞–≥—Ä–∞–¥–∞: ${task.reward.amount} ${task.reward.type}`);
    });
    
    // –®–∞–≥ 4: –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è –∏ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ —Å–æ–∑–¥–∞–Ω–∏–µ –Ω–æ–≤–æ–≥–æ
    if (updatedTasks.length > 0) {
      console.log('\nüìã –®–∞–≥ 4: –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è...');
      const taskToComplete = updatedTasks[0];
      console.log(`–ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ: ${taskToComplete.title} (ID: ${taskToComplete.id})`);
      
      // –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ
      const result = await TaskService.updateTaskProgress(
        parseInt(taskToComplete.id), 
        userId, 
        taskToComplete.progress.total
      );
      
      if (result) {
        console.log('‚úÖ –ó–∞–¥–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
        console.log(`–°—Ç–∞—Ç—É—Å: ${result.task.status}`);
        
        if (result.newTask) {
          console.log('üéâ –ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏!');
          console.log(`–ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ: ${result.newTask.title} (ID: ${result.newTask.id})`);
          console.log(`–ü—Ä–æ–≥—Ä–µ—Å—Å: ${result.newTask.progress.current}/${result.newTask.progress.total}`);
          console.log(`–ù–∞–≥—Ä–∞–¥–∞: ${result.newTask.reward.amount} ${result.newTask.reward.type}`);
        } else {
          console.log('‚ö†Ô∏è  –ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –Ω–µ –±—ã–ª–æ —Å–æ–∑–¥–∞–Ω–æ');
        }
      } else {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –∑–∞–≤–µ—Ä—à–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ');
      }
    }
    
    // –®–∞–≥ 5: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    console.log('\nüìã –®–∞–≥ 5: –§–∏–Ω–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞...');
    const finalTasks = await TaskService.getUserTasks(userId);
    console.log(`–§–∏–Ω–∞–ª—å–Ω–æ–µ –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: ${finalTasks.length}`);
    
    finalTasks.forEach((task, index) => {
      console.log(`   ${index + 1}. ID: ${task.id} - ${task.title}`);
      console.log(`      –ü—Ä–æ–≥—Ä–µ—Å—Å: ${task.progress.current}/${task.progress.total}`);
      console.log(`      –ù–∞–≥—Ä–∞–¥–∞: ${task.reward.amount} ${task.reward.type}`);
    });
    
    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');
    console.log('üì± –°–∏—Å—Ç–µ–º–∞ –±–µ—Å–∫–æ–Ω–µ—á–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ');
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞:', error);
  }
  
  process.exit(0);
};

testInfiniteTasks(); 