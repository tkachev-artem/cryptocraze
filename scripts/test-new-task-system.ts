import { TaskService } from '../server/services/taskService';
import { TaskTemplateService } from '../server/services/taskTemplates';
import { db } from '../server/db';
import { users } from '../shared/schema';
import { eq } from 'drizzle-orm';

const TEST_USER_ID = 'test-user-new-system';

async function createTestUser() {
  try {
    const existingUser = await db.select()
      .from(users)
      .where(eq(users.id, TEST_USER_ID))
      .limit(1);

    if (existingUser.length === 0) {
      await db.insert(users).values({
        id: TEST_USER_ID,
        email: 'test-new-system@example.com',
        firstName: 'Test',
        lastName: 'NewSystem',
        balance: '10000.00',
        coins: 100,
        freeBalance: '0',
        ratingScore: 0,
        tradesCount: 0,
        totalTradesVolume: '0.00',
        successfulTradesPercentage: '0.00',
        maxProfit: '0.00',
        maxLoss: '0.00',
        averageTradeAmount: '0.00',
        rewardsCount: 0,
        energyTasksBonus: 0,
        isPremium: false
      });
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —Å–æ–∑–¥–∞–Ω');
    } else {
      console.log('‚úÖ –¢–µ—Å—Ç–æ–≤—ã–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å —É–∂–µ —Å—É—â–µ—Å—Ç–≤—É–µ—Ç');
    }
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
  }
}

async function testNewTaskSystem() {
  console.log('üéÆ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –Ω–æ–≤–æ–π —Å–∏—Å—Ç–µ–º—ã –∑–∞–¥–∞–Ω–∏–π...\n');

  try {
    // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤–æ–≥–æ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await createTestUser();

    // –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ —à–∞–±–ª–æ–Ω—ã
    console.log('üìã –®–∞–≥ 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –Ω–æ–≤—ã—Ö —à–∞–±–ª–æ–Ω–æ–≤...');
    const templates = TaskTemplateService.getTemplatesByCategory('daily').concat(
      TaskTemplateService.getTemplatesByCategory('video'),
      TaskTemplateService.getTemplatesByCategory('trade')
    );
    console.log(`‚úÖ –ù–∞–π–¥–µ–Ω–æ —à–∞–±–ª–æ–Ω–æ–≤: ${templates.length}`);
    templates.forEach(template => {
      console.log(`   - ${template.title}: ${template.rewardAmount} ${template.rewardType}`);
      console.log(`     Cooldown: ${template.cooldownMinutes} –º–∏–Ω, MaxPerDay: ${template.maxPerDay}`);
    });

    // –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
    console.log('\nüìã –®–∞–≥ 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π...');
    const availableTasks = await TaskService.getAvailableTasks(TEST_USER_ID);
    console.log(`‚úÖ –î–æ—Å—Ç—É–ø–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: ${availableTasks.length}`);
    availableTasks.forEach(task => {
      console.log(`   - ${task.title}: ${task.reward.amount} ${task.reward.type}`);
    });

    // –®–∞–≥ 3: –ü–æ–ª—É—á–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    console.log('\nüìã –®–∞–≥ 3: –ü–æ–ª—É—á–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è...');
    const userTasks = await TaskService.getUserTasks(TEST_USER_ID);
    console.log(`‚úÖ –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: ${userTasks.length}`);
    userTasks.forEach(task => {
      console.log(`   - ${task.title}: ${task.reward.amount} ${task.reward.type}`);
    });

    // –®–∞–≥ 4: –¢–µ—Å—Ç–∏—Ä—É–µ–º –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏—è –≤—Ä–µ–º–µ–Ω–∏
    console.log('\nüìã –®–∞–≥ 4: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –æ–≥—Ä–∞–Ω–∏—á–µ–Ω–∏–π –≤—Ä–µ–º–µ–Ω–∏...');
    for (const template of templates) {
      const canCreate = await TaskService.canCreateTask(TEST_USER_ID, template.id);
      console.log(`   ${template.title}: ${canCreate ? '‚úÖ –î–æ—Å—Ç—É–ø–Ω–æ' : '‚ùå –ù–µ–¥–æ—Å—Ç—É–ø–Ω–æ'}`);
    }

    // –®–∞–≥ 5: –¢–µ—Å—Ç–∏—Ä—É–µ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
    if (userTasks.length > 0) {
      console.log('\nüìã –®–∞–≥ 5: –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è...');
      const taskToComplete = userTasks[0];
      const taskId = parseInt(taskToComplete.id);
      
      const result = await TaskService.updateTaskProgress(taskId, TEST_USER_ID, taskToComplete.progress.total);
      
      if (result) {
        console.log(`‚úÖ –ó–∞–¥–∞–Ω–∏–µ –≤—ã–ø–æ–ª–Ω–µ–Ω–æ: ${result.task.title}`);
        console.log(`   –°—Ç–∞—Ç—É—Å: ${result.task.status}`);
        if (result.newTask) {
          console.log(`   –ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ: ${result.newTask.title}`);
        }
      } else {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤—ã–ø–æ–ª–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ');
      }
    }

    console.log('\nüéâ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testNewTaskSystem().catch(console.error); 