import fetch from 'node-fetch';

const testReplaceAPI = async () => {
  console.log('üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ HTTP API –∑–∞–º–µ–Ω—ã –∑–∞–¥–∞–Ω–∏–π...\n');
  
  const baseUrl = 'http://localhost:8000';
  const taskId = '231'; // ID –∑–∞–¥–∞–Ω–∏—è –¥–ª—è –∑–∞–º–µ–Ω—ã
  
  try {
    console.log('üåê –ë–∞–∑–æ–≤—ã–π URL:', baseUrl);
    console.log('üéØ –ó–∞–¥–∞–Ω–∏–µ –¥–ª—è –∑–∞–º–µ–Ω—ã:', taskId);
    
    // –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —Å–µ—Ä–≤–µ—Ä–∞
    console.log('\nüìã –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —Å–µ—Ä–≤–µ—Ä–∞...');
    try {
      const healthResponse = await fetch(`${baseUrl}/api/tasks`);
      console.log(`‚úÖ –°–µ—Ä–≤–µ—Ä –¥–æ—Å—Ç—É–ø–µ–Ω: ${healthResponse.status}`);
    } catch (error) {
      console.log('‚ùå –°–µ—Ä–≤–µ—Ä –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', error);
      console.log('   –ó–∞–ø—É—Å—Ç–∏—Ç–µ —Å–µ—Ä–≤–µ—Ä: npm run dev');
      return;
    }
    
    // –¢–µ—Å—Ç 2: –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ
    console.log('\nüìã –¢–µ—Å—Ç 2: –ó–∞–º–µ–Ω–∞ –∑–∞–¥–∞–Ω–∏—è...');
    try {
      const replaceResponse = await fetch(`${baseUrl}/api/tasks/${taskId}/replace`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
        },
        credentials: 'include',
      });
      
      console.log(`üìä –°—Ç–∞—Ç—É—Å –æ—Ç–≤–µ—Ç–∞: ${replaceResponse.status}`);
      
      if (replaceResponse.ok) {
        const data = await replaceResponse.json();
        console.log('‚úÖ –û—Ç–≤–µ—Ç —Å–µ—Ä–≤–µ—Ä–∞:');
        console.log('   success:', data.success);
        console.log('   replaced:', data.replaced);
        
        if (data.replaced) {
          console.log('   oldTask:', data.oldTask?.title);
          console.log('   newTask:', data.newTask?.title);
        } else {
          console.log('   task:', data.task?.title);
        }
      } else {
        const errorText = await replaceResponse.text();
        console.log('‚ùå –û—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞:', errorText);
      }
    } catch (error) {
      console.log('‚ùå –û—à–∏–±–∫–∞ –∑–∞–ø—Ä–æ—Å–∞:', error);
    }
    
  } catch (error) {
    console.error('‚ùå –û–±—â–∞—è –æ—à–∏–±–∫–∞:', error);
  }
};

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testReplaceAPI().catch(console.error); 