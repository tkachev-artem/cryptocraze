import { TaskService } from '../server/services/taskService';
import { db } from '../server/db';
import { userTasks } from '../shared/schema';
import { eq, and } from 'drizzle-orm';

const testReplaceTask = async () => {
  console.log('üîÑ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–º–µ–Ω—ã –∑–∞–¥–∞–Ω–∏–π...\n');
  
  const userId = '111907067370663926621';
  
  try {
    console.log('üë§ –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å:', userId);
    
    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
    const activeTasks = await db.select()
      .from(userTasks)
      .where(
        and(
          eq(userTasks.userId, userId),
          eq(userTasks.status, 'active')
        )
      );
    
    console.log(`üìä –ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: ${activeTasks.length}`);
    
    if (activeTasks.length === 0) {
      console.log('‚ùå –ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –∑–∞–º–µ–Ω—ã');
      return;
    }
    
    // –ë–µ—Ä–µ–º –ø–µ—Ä–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ –¥–ª—è –∑–∞–º–µ–Ω—ã
    const taskToReplace = activeTasks[0];
    console.log(`\nüéØ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–º–µ–Ω—É –∑–∞–¥–∞–Ω–∏—è: ${taskToReplace.title} (ID: ${taskToReplace.id})`);
    
    // –¢–µ—Å—Ç–∏—Ä—É–µ–º –∑–∞–º–µ–Ω—É
    console.log('\nüìã –®–∞–≥ 1: –ü—ã—Ç–∞–µ–º—Å—è –∑–∞–º–µ–Ω–∏—Ç—å –∑–∞–¥–∞–Ω–∏–µ...');
    
    // –°–Ω–∞—á–∞–ª–∞ –ø–æ–ª—É—á–∞–µ–º —Ç–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ
    const currentTask = await TaskService.getTaskById(taskToReplace.id, userId);
    if (!currentTask) {
      console.log('‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ');
      return;
    }
    
    console.log(`‚úÖ –¢–µ–∫—É—â–µ–µ –∑–∞–¥–∞–Ω–∏–µ: ${currentTask.title}`);
    
    // –ü—ã—Ç–∞–µ–º—Å—è —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ
    const newTask = await TaskService.createRandomTask(userId);
    
    if (newTask) {
      console.log(`‚úÖ –ù–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ: ${newTask.title}`);
      
      // –£–¥–∞–ª—è–µ–º —Å—Ç–∞—Ä–æ–µ –∑–∞–¥–∞–Ω–∏–µ
      const deleted = await TaskService.deleteTask(taskToReplace.id, userId);
      console.log(`üóëÔ∏è  –°—Ç–∞—Ä–æ–µ –∑–∞–¥–∞–Ω–∏–µ —É–¥–∞–ª–µ–Ω–æ: ${deleted ? '–î–∞' : '–ù–µ—Ç'}`);
      
      console.log('\nüéâ –ó–∞–º–µ–Ω–∞ –≤—ã–ø–æ–ª–Ω–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!');
      console.log(`   –°—Ç–∞—Ä–æ–µ: ${currentTask.title} (ID: ${currentTask.id})`);
      console.log(`   –ù–æ–≤–æ–µ: ${newTask.title} (ID: ${newTask.id})`);
    } else {
      console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –Ω–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ (–ª–∏–º–∏—Ç—ã/cooldown)');
      console.log('‚úÖ –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ –∂–µ –∑–∞–¥–∞–Ω–∏–µ');
      console.log(`   –ó–∞–¥–∞–Ω–∏–µ: ${currentTask.title} (ID: ${currentTask.id})`);
    }
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    const remainingTasks = await db.select()
      .from(userTasks)
      .where(
        and(
          eq(userTasks.userId, userId),
          eq(userTasks.status, 'active')
        )
      );
    
    console.log(`\nüìä –û—Å—Ç–∞–ª–æ—Å—å –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: ${remainingTasks.length}`);
    remainingTasks.forEach(task => {
      console.log(`   ‚Ä¢ ${task.title} (ID: ${task.id})`);
    });
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏ –∑–∞–º–µ–Ω—ã:', error);
  }
};

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testReplaceTask().catch(console.error); 