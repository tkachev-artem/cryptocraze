import { TaskService } from '../server/services/taskService';
import { TaskTemplateService } from '../server/services/taskTemplates';

async function testWheelTask() {
  console.log('üé∞ –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è —Å —Ä—É–ª–µ—Ç–∫–æ–π "–í–∏–¥–µ–æ –±–æ–Ω—É—Å 2"');
  
  const userId = 'test-user-123';
  
  // 1. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –µ—Å—Ç—å –ª–∏ —à–∞–±–ª–æ–Ω –≤ —Å–ø–∏—Å–∫–µ
  console.log('\nüìã –ü—Ä–æ–≤–µ—Ä—è–µ–º —à–∞–±–ª–æ–Ω video_bonus_2:');
  const template = TaskTemplateService.getTemplateById('video_bonus_2');
  if (template) {
    console.log('‚úÖ –®–∞–±–ª–æ–Ω –Ω–∞–π–¥–µ–Ω:', {
      id: template.id,
      title: template.title,
      rewardType: template.rewardType,
      category: template.category,
      cooldownMinutes: template.cooldownMinutes
    });
  } else {
    console.log('‚ùå –®–∞–±–ª–æ–Ω –ù–ï –Ω–∞–π–¥–µ–Ω!');
    return;
  }
  
  // 2. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –≤–∫–ª—é—á–∞–µ—Ç—Å—è –ª–∏ –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏—é video
  console.log('\nüìÇ –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞—Ç–µ–≥–æ—Ä–∏—é video:');
  const videoTemplates = TaskTemplateService.getTemplatesByCategory('video');
  console.log('–®–∞–±–ª–æ–Ω—ã –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ video:');
  videoTemplates.forEach(t => {
    console.log(`  - ${t.id}: ${t.title}`);
  });
  
  const hasVideoBonus2 = videoTemplates.some(t => t.id === 'video_bonus_2');
  if (hasVideoBonus2) {
    console.log('‚úÖ –®–∞–±–ª–æ–Ω video_bonus_2 –Ω–∞–π–¥–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ video');
  } else {
    console.log('‚ùå –®–∞–±–ª–æ–Ω video_bonus_2 –ù–ï –Ω–∞–π–¥–µ–Ω –≤ –∫–∞—Ç–µ–≥–æ—Ä–∏–∏ video');
  }
  
  // 3. –ü—Ä–æ–≤–µ—Ä—è–µ–º, –º–æ–∂–Ω–æ –ª–∏ —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ
  console.log('\nüîí –ü—Ä–æ–≤–µ—Ä—è–µ–º canCreateTask:');
  try {
    const canCreate = await TaskService.canCreateTask(userId, 'video_bonus_2');
    console.log(`canCreateTask —Ä–µ–∑—É–ª—å—Ç–∞—Ç: ${canCreate}`);
    
    if (canCreate) {
      console.log('‚úÖ –ó–∞–¥–∞–Ω–∏–µ –º–æ–∂–Ω–æ —Å–æ–∑–¥–∞—Ç—å');
      
      // 4. –ü—Ä–æ–±—É–µ–º —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é
      console.log('\nüèóÔ∏è –°–æ–∑–¥–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –Ω–∞–ø—Ä—è–º—É—é:');
      const options = TaskTemplateService.templateToCreateOptions(template);
      console.log('–û–ø—Ü–∏–∏ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è:', options);
      
      const createdTask = await TaskService.createTask(userId, options);
      if (createdTask) {
        console.log('‚úÖ –ó–∞–¥–∞–Ω–∏–µ —Å–æ–∑–¥–∞–Ω–æ —É—Å–ø–µ—à–Ω–æ:', {
          id: createdTask.id,
          title: createdTask.title,
          rewardType: createdTask.reward.type,
          progress: createdTask.progress
        });
      } else {
        console.log('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å —Å–æ–∑–¥–∞—Ç—å –∑–∞–¥–∞–Ω–∏–µ');
      }
      
    } else {
      console.log('‚ùå –ó–∞–¥–∞–Ω–∏–µ –Ω–µ–ª—å–∑—è —Å–æ–∑–¥–∞—Ç—å (–≤–æ–∑–º–æ–∂–Ω—ã–µ –ø—Ä–∏—á–∏–Ω—ã: cooldown, –ª–∏–º–∏—Ç—ã, –∞–∫—Ç–∏–≤–Ω–æ–µ –∑–∞–¥–∞–Ω–∏–µ)');
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è
      const activeTasks = await TaskService.getUserTasks(userId);
      console.log(`–ê–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π —É –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${activeTasks.length}`);
      activeTasks.forEach(task => {
        console.log(`  - ${task.title} (${task.status})`);
      });
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø—Ä–æ–≤–µ—Ä–∫–µ canCreateTask:', error);
  }
  
  // 5. –¢–µ—Å—Ç–∏—Ä—É–µ–º createRandomTask
  console.log('\nüé≤ –¢–µ—Å—Ç–∏—Ä—É–µ–º createRandomTask (10 –ø–æ–ø—ã—Ç–æ–∫):');
  for (let i = 0; i < 10; i++) {
    try {
      const randomTask = await TaskService.createRandomTask(`${userId}-${i}`);
      if (randomTask) {
        console.log(`  –ü–æ–ø—ã—Ç–∫–∞ ${i + 1}: ${randomTask.title} (${randomTask.reward.type})`);
        if (randomTask.title === '–í–∏–¥–µ–æ –±–æ–Ω—É—Å 2') {
          console.log('  üé∞ –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–µ —Å —Ä—É–ª–µ—Ç–∫–æ–π!');
        }
      } else {
        console.log(`  –ü–æ–ø—ã—Ç–∫–∞ ${i + 1}: –∑–∞–¥–∞–Ω–∏–µ –Ω–µ —Å–æ–∑–¥–∞–Ω–æ`);
      }
    } catch (error) {
      console.log(`  –ü–æ–ø—ã—Ç–∫–∞ ${i + 1}: –æ—à–∏–±–∫–∞ - ${error}`);
    }
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Ç–µ—Å—Ç
testWheelTask().then(() => {
  console.log('\nüèÅ –¢–µ—Å—Ç –∑–∞–≤–µ—Ä—à–µ–Ω');
  process.exit(0);
}).catch(error => {
  console.error('üí• –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error);
  process.exit(1);
});