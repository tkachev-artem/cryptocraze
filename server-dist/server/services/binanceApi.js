"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.binanceApi = exports.BinanceApiService = void 0;
const redisService_js_1 = require("./redisService.js");
class BinanceApiService {
    basePath = '/api/v3';
    baseDomains = [
        'https://api.binance.com',
        'https://api1.binance.com',
        'https://api2.binance.com',
        'https://api3.binance.com',
    ];
    domainIndex = 0;
    get currentBaseUrl() {
        return `${this.baseDomains[this.domainIndex % this.baseDomains.length]}${this.basePath}`;
    }
    rotateDomain() {
        this.domainIndex = (this.domainIndex + 1) % this.baseDomains.length;
    }
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–≤–µ—á–Ω–æ–≥–æ –≥—Ä–∞—Ñ–∏–∫–∞ (Kline/Candlestick)
     * @param symbol - –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞ (–Ω–∞–ø—Ä–∏–º–µ—Ä: BTCUSDT)
     * @param interval - –ò–Ω—Ç–µ—Ä–≤–∞–ª (1m, 3m, 5m, 15m, 30m, 1h, 2h, 4h, 6h, 8h, 12h, 1d, 3d, 1w, 1M)
     * @param limit - –ö–æ–ª–∏—á–µ—Å—Ç–≤–æ —Å–≤–µ—á–µ–π (–º–∞–∫—Å–∏–º—É–º 1000)
     */
    async getCandlestickData(symbol, interval = '1h', limit = 100) {
        const upperSymbol = symbol.toUpperCase();
        const cacheKeyInfo = { symbol: upperSymbol, interval, limit };
        // 1) –ü–æ–ø—Ä–æ–±—É–µ–º –¥–æ—Å—Ç–∞—Ç—å –∏–∑ –∫—ç—à–∞ —Å–Ω–∞—á–∞–ª–∞ (–ª—É—á—à–µ –æ—Ç–¥–∞–≤–∞—Ç—å –±—ã—Å—Ç—Ä–æ –ø—Ä–∏ –Ω–∞–≥—Ä—É–∑–∫–µ)
        try {
            const cached = await redisService_js_1.redisService.getCandles(upperSymbol, interval);
            if (cached && Array.isArray(cached) && cached.length > 0) {
                return cached.slice(0, limit);
            }
        }
        catch {
            // –∏–≥–Ω–æ—Ä–∏—Ä—É–µ–º –æ—à–∏–±–∫–∏ –∫—ç—à–∞
        }
        // 2) –î–µ–ª–∞–µ–º –¥–æ 1 –ø–æ–ª–Ω–æ–≥–æ –∫—Ä—É–≥–∞ –ø–æ –¥–æ–º–µ–Ω–∞–º
        let lastError = null;
        for (let i = 0; i < this.baseDomains.length; i++) {
            const url = `${this.currentBaseUrl}/klines?symbol=${upperSymbol}&interval=${interval}&limit=${limit}`;
            try {
                const response = await fetch(url, {
                    signal: AbortSignal.timeout(15000),
                    headers: { 'User-Agent': 'CryptoAnalyzer/1.0' },
                });
                if (!response.ok) {
                    // –ï—Å–ª–∏ 4xx/418 ‚Äî –ø—Ä–æ–±—É–µ–º –æ—Ç–¥–∞—Ç—å –∏–∑ –∫—ç—à–∞
                    if (response.status >= 400 && response.status < 500) {
                        const cached = await redisService_js_1.redisService.getCandles(upperSymbol, interval);
                        if (cached && Array.isArray(cached) && cached.length > 0) {
                            return cached.slice(0, limit);
                        }
                    }
                    // –ò–Ω–∞—á–µ –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –¥–æ–º–µ–Ω
                    this.rotateDomain();
                    lastError = new Error(`Binance API error: ${response.status} ${response.statusText}`);
                    continue;
                }
                const data = await response.json();
                const candlesticks = data.map((candle) => ({
                    openTime: candle[0],
                    open: parseFloat(candle[1]),
                    high: parseFloat(candle[2]),
                    low: parseFloat(candle[3]),
                    close: parseFloat(candle[4]),
                    volume: parseFloat(candle[5]),
                    closeTime: candle[6],
                    quoteAssetVolume: parseFloat(candle[7]),
                    numberOfTrades: parseInt(candle[8]),
                    takerBuyBaseAssetVolume: parseFloat(candle[9]),
                    takerBuyQuoteAssetVolume: parseFloat(candle[10])
                }));
                // –°–æ—Ö—Ä–∞–Ω—è–µ–º –≤ –∫—ç—à 60‚Äì120 —Å–µ–∫
                await redisService_js_1.redisService.setCandles(upperSymbol, interval, candlesticks);
                return candlesticks;
            }
            catch (error) {
                // –û—à–∏–±–∫–∞ —Å–µ—Ç–∏/—Ç–∞–π–º–∞—É—Ç ‚Äî –ø—Ä–æ–±—É–µ–º —Å–ª–µ–¥—É—é—â–∏–π –¥–æ–º–µ–Ω
                this.rotateDomain();
                lastError = error;
                continue;
            }
        }
        // 3) –ü–æ—Å–ª–µ–¥–Ω—è—è –ø–æ–ø—ã—Ç–∫–∞ ‚Äî —Ç–æ–ª—å–∫–æ –∫—ç—à, –∏–Ω–∞—á–µ –æ—à–∏–±–∫–∞
        try {
            const cached = await redisService_js_1.redisService.getCandles(upperSymbol, interval);
            if (cached && Array.isArray(cached) && cached.length > 0) {
                return cached.slice(0, limit);
            }
        }
        catch { }
        console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö —Å–≤–µ—á–µ–π –¥–ª—è ${upperSymbol}:`, lastError);
        throw lastError instanceof Error ? lastError : new Error('Binance klines failed');
    }
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–π —Ü–µ–Ω—ã
     * @param symbol - –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
     */
    async getCurrentPrice(symbol) {
        try {
            const url = `${this.currentBaseUrl}/ticker/price?symbol=${symbol.toUpperCase()}`;
            const response = await fetch(url, {
                signal: AbortSignal.timeout(15000), // 15 —Å–µ–∫ —Ç–∞–π–º–∞—É—Ç
                headers: { 'User-Agent': 'CryptoAnalyzer/1.0' },
            });
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º weight limits
            const usedWeight = response.headers.get('x-mbx-used-weight');
            const usedWeight1m = response.headers.get('x-mbx-used-weight-1m');
            if (usedWeight1m && parseInt(usedWeight1m) > 1000) {
                console.warn(`‚ö†Ô∏è –í—ã—Å–æ–∫–æ–µ –ø–æ—Ç—Ä–µ–±–ª–µ–Ω–∏–µ weight: ${usedWeight1m}/1200`);
            }
            if (!response.ok) {
                if (response.status === 429) {
                    console.error('üö´ Binance rate limit exceeded! –ñ–¥–µ–º 60 —Å–µ–∫—É–Ω–¥...');
                    throw new Error('Rate limit exceeded');
                }
                // –ø–æ–ø—Ä–æ–±—É–µ–º –¥—Ä—É–≥–æ–π –¥–æ–º–µ–Ω
                this.rotateDomain();
                throw new Error(`Binance API error: ${response.status}`);
            }
            const data = await response.json();
            return parseFloat(data.price);
        }
        catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Ü–µ–Ω—ã –¥–ª—è ${symbol}:`, error);
            throw error;
        }
    }
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Ç–æ—Ä–≥–æ–≤–æ–π –ø–∞—Ä–µ
     * @param symbol - –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
     */
    async getSymbolInfo(symbol) {
        try {
            const url = `${this.currentBaseUrl}/exchangeInfo`;
            const response = await fetch(url);
            if (!response.ok) {
                throw new Error(`Binance API error: ${response.status}`);
            }
            const data = await response.json();
            const symbolInfo = data.symbols.find((s) => s.symbol === symbol.toUpperCase());
            if (!symbolInfo) {
                throw new Error(`Symbol ${symbol} not found`);
            }
            return symbolInfo;
        }
        catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ —Å–∏–º–≤–æ–ª–µ ${symbol}:`, error);
            throw error;
        }
    }
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ 24-—á–∞—Å–æ–≤–æ–π —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏
     * @param symbol - –¢–æ—Ä–≥–æ–≤–∞—è –ø–∞—Ä–∞
     */
    async get24hrStats(symbol) {
        try {
            const url = `${this.currentBaseUrl}/ticker/24hr?symbol=${symbol.toUpperCase()}`;
            const response = await fetch(url, {
                signal: AbortSignal.timeout(15000), // 15 —Å–µ–∫ —Ç–∞–π–º–∞—É—Ç
                headers: { 'User-Agent': 'CryptoAnalyzer/1.0' },
            });
            if (!response.ok) {
                throw new Error(`Binance API error: ${response.status}`);
            }
            const data = await response.json();
            return {
                symbol: data.symbol,
                priceChange: parseFloat(data.priceChange),
                priceChangePercent: parseFloat(data.priceChangePercent),
                weightedAvgPrice: parseFloat(data.weightedAvgPrice),
                prevClosePrice: parseFloat(data.prevClosePrice),
                lastPrice: parseFloat(data.lastPrice),
                lastQty: parseFloat(data.lastQty),
                bidPrice: parseFloat(data.bidPrice),
                askPrice: parseFloat(data.askPrice),
                openPrice: parseFloat(data.openPrice),
                highPrice: parseFloat(data.highPrice),
                lowPrice: parseFloat(data.lowPrice),
                volume: parseFloat(data.volume),
                quoteVolume: parseFloat(data.quoteVolume),
                openTime: data.openTime,
                closeTime: data.closeTime,
                count: data.count
            };
        }
        catch (error) {
            console.error(`‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è 24—á —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∏ –¥–ª—è ${symbol}:`, error);
            throw error;
        }
    }
    /**
     * –ü–æ–ª—É—á–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –≤—Å–µ—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –ø–∞—Ä
     */
    async getAllSymbols() {
        try {
            const url = `${this.currentBaseUrl}/exchangeInfo`;
            const response = await fetch(url);
            if (!response.ok) {
                throw new Error(`Binance API error: ${response.status}`);
            }
            const data = await response.json();
            // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ç–æ–ª—å–∫–æ –∞–∫—Ç–∏–≤–Ω—ã–µ —Å–ø–æ—Ç–æ–≤—ã–µ –ø–∞—Ä—ã
            return data.symbols
                .filter((symbol) => symbol.status === 'TRADING' && symbol.quoteAsset === 'USDT')
                .map((symbol) => symbol.symbol);
        }
        catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø–æ–ª—É—á–µ–Ω–∏—è —Å–ø–∏—Å–∫–∞ —Å–∏–º–≤–æ–ª–æ–≤:', error);
            throw error;
        }
    }
}
exports.BinanceApiService = BinanceApiService;
exports.binanceApi = new BinanceApiService();
