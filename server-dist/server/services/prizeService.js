"use strict";
Object.defineProperty(exports, "__esModule", { value: true });
exports.PrizeService = void 0;
const db_js_1 = require("../db.js");
const schema_1 = require("../../shared/schema");
const drizzle_orm_1 = require("drizzle-orm");
const drizzle_orm_2 = require("drizzle-orm");
const autoRewards_js_1 = require("./autoRewards.js");
class PrizeService {
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –ø—Ä–∏–∑—ã –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω–æ–≥–æ —Ç–∏–ø–∞ –∫–æ—Ä–æ–±–∫–∏
     */
    static async getPrizesForBox(boxType) {
        try {
            const boxTypeRecord = await db_js_1.db
                .select()
                .from(schema_1.boxTypes)
                .where((0, drizzle_orm_1.eq)(schema_1.boxTypes.type, boxType))
                .limit(1);
            if (!boxTypeRecord.length) {
                throw new Error(`–¢–∏–ø –∫–æ—Ä–æ–±–∫–∏ ${boxType} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }
            const boxPrizes = await db_js_1.db
                .select({
                id: schema_1.prizes.id,
                prizeType: schema_1.prizes.prizeType,
                amount: schema_1.prizes.amount,
                proDays: schema_1.prizes.proDays,
                chance: schema_1.prizes.chance,
            })
                .from(schema_1.prizes)
                .where((0, drizzle_orm_1.and)((0, drizzle_orm_1.eq)(schema_1.prizes.boxTypeId, boxTypeRecord[0].id), (0, drizzle_orm_1.eq)(schema_1.prizes.isActive, true)));
            return boxPrizes.map(prize => ({
                id: prize.id,
                prizeType: prize.prizeType,
                amount: prize.amount ? Number(prize.amount) : undefined,
                proDays: prize.proDays || undefined,
                chance: Number(prize.chance),
            }));
        }
        catch (error) {
            console.error('Error getting prizes for box:', error);
            throw error;
        }
    }
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è –∫–æ—Ä–æ–±–∫–∏
     */
    static async getRequiredEnergy(boxType) {
        try {
            const boxTypeRecord = await db_js_1.db
                .select({ requiredEnergy: schema_1.boxTypes.requiredEnergy })
                .from(schema_1.boxTypes)
                .where((0, drizzle_orm_1.eq)(schema_1.boxTypes.type, boxType))
                .limit(1);
            if (!boxTypeRecord.length) {
                throw new Error(`–¢–∏–ø –∫–æ—Ä–æ–±–∫–∏ ${boxType} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }
            return boxTypeRecord[0].requiredEnergy;
        }
        catch (error) {
            console.error('Error getting required energy:', error);
            throw error;
        }
    }
    /**
     * –í—ã–±—Ä–∞—Ç—å —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ —à–∞–Ω—Å–æ–≤
     */
    static async selectRandomPrize(boxType) {
        try {
            const prizes = await this.getPrizesForBox(boxType);
            if (!prizes.length) {
                throw new Error(`–ù–µ—Ç –∞–∫—Ç–∏–≤–Ω—ã—Ö –ø—Ä–∏–∑–æ–≤ –¥–ª—è –∫–æ—Ä–æ–±–∫–∏ ${boxType}`);
            }
            // –í—ã—á–∏—Å–ª—è–µ–º —Å–ª—É—á–∞–π–Ω–æ–µ —á–∏—Å–ª–æ
            const random = Math.random() * 100;
            let cumulativeChance = 0;
            let selectedPrize = null;
            for (const prize of prizes) {
                cumulativeChance += prize.chance;
                if (random <= cumulativeChance) {
                    selectedPrize = prize;
                    break;
                }
            }
            // –ï—Å–ª–∏ –Ω–∏—á–µ–≥–æ –Ω–µ –≤—ã–±—Ä–∞–Ω–æ, –¥–∞–µ–º –ø–µ—Ä–≤—ã–π –ø—Ä–∏–∑
            if (!selectedPrize) {
                selectedPrize = prizes[0];
            }
            return selectedPrize;
        }
        catch (error) {
            console.error('Error selecting random prize:', error);
            throw error;
        }
    }
    /**
     * –û—Ç–∫—Ä—ã—Ç—å –∫–æ—Ä–æ–±–∫—É –∏ –ø–æ–ª—É—á–∏—Ç—å –ø—Ä–∏–∑
     */
    static async openBox(userId, boxType) {
        try {
            console.log(`üéÅ –ù–∞—á–∏–Ω–∞–µ–º –æ—Ç–∫—Ä—ã—Ç–∏–µ –∫–æ—Ä–æ–±–∫–∏ ${boxType} –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è ${userId}`);
            // –®–∞–≥ 1: –ü–æ–ª—É—á–∞–µ–º —Ç—Ä–µ–±–æ–≤–∞–Ω–∏—è –ø–æ —ç–Ω–µ—Ä–≥–∏–∏ –∏ –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const requiredEnergy = await this.getRequiredEnergy(boxType);
            console.log(`üîã –¢—Ä–µ–±—É–µ—Ç—Å—è —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è ${boxType} –∫–æ—Ä–æ–±–∫–∏: ${requiredEnergy}`);
            const user = await db_js_1.db
                .select({
                id: schema_1.users.id,
                energyTasksBonus: schema_1.users.energyTasksBonus,
                balance: schema_1.users.balance,
                freeBalance: schema_1.users.freeBalance,
                isPremium: schema_1.users.isPremium,
                premiumExpiresAt: schema_1.users.premiumExpiresAt
            })
                .from(schema_1.users)
                .where((0, drizzle_orm_1.eq)(schema_1.users.id, userId))
                .limit(1);
            if (!user.length) {
                throw new Error('–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω');
            }
            const currentEnergy = user[0].energyTasksBonus || 0;
            console.log(`üîã –¢–µ–∫—É—â–∞—è —ç–Ω–µ—Ä–≥–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${currentEnergy}`);
            if (currentEnergy < requiredEnergy) {
                throw new Error(`–ù–µ–¥–æ—Å—Ç–∞—Ç–æ—á–Ω–æ —ç–Ω–µ—Ä–≥–∏–∏ –¥–ª—è –æ—Ç–∫—Ä—ã—Ç–∏—è ${boxType} –∫–æ—Ä–æ–±–∫–∏. –ù—É–∂–Ω–æ: ${requiredEnergy}, –µ—Å—Ç—å: ${currentEnergy}`);
            }
            // –®–∞–≥ 2: –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–∏–∑
            const selectedPrize = await this.selectRandomPrize(boxType);
            console.log(`üéÅ –í—ã–±—Ä–∞–Ω –ø—Ä–∏–∑: ${selectedPrize.prizeType} - ${selectedPrize.amount || selectedPrize.proDays}`);
            // –®–∞–≥ 3: –ü–æ–ª—É—á–∞–µ–º ID —Ç–∏–ø–∞ –∫–æ—Ä–æ–±–∫–∏
            const boxTypeRecord = await db_js_1.db
                .select({ id: schema_1.boxTypes.id })
                .from(schema_1.boxTypes)
                .where((0, drizzle_orm_1.eq)(schema_1.boxTypes.type, boxType))
                .limit(1);
            if (!boxTypeRecord.length) {
                throw new Error(`–¢–∏–ø –∫–æ—Ä–æ–±–∫–∏ ${boxType} –Ω–µ –Ω–∞–π–¥–µ–Ω`);
            }
            // –®–∞–≥ 4: –í—ã–ø–æ–ª–Ω—è–µ–º –≤—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≤ –æ–¥–Ω–æ–π —Ç—Ä–∞–Ω–∑–∞–∫—Ü–∏–∏
            console.log(`üí∞ –ù–∞—á–∏–Ω–∞–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è`);
            let balanceUpdate = 0;
            let proDays = 0;
            let newEnergy = currentEnergy - requiredEnergy;
            let newBalance = parseFloat(user[0].balance || '0');
            let newFreeBalance = parseFloat(user[0].freeBalance || '0');
            let newIsPremium = user[0].isPremium || false;
            let newPremiumExpiresAt = user[0].premiumExpiresAt;
            // –û–±—Ä–∞–±–∞—Ç—ã–≤–∞–µ–º –ø—Ä–∏–∑
            if (selectedPrize.prizeType === 'pro') {
                // –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º PRO —Ä–µ–∂–∏–º
                const currentDate = new Date();
                const proExpiresAt = new Date(currentDate.getTime() + (selectedPrize.proDays * 24 * 60 * 60 * 1000));
                newIsPremium = true;
                newPremiumExpiresAt = proExpiresAt;
                proDays = selectedPrize.proDays;
                console.log(`üëë –ê–∫—Ç–∏–≤–∏—Ä—É–µ–º PRO —Ä–µ–∂–∏–º –Ω–∞ ${proDays} –¥–Ω–µ–π`);
            }
            else {
                // –ù–∞—á–∏—Å–ª—è–µ–º –¥–µ–Ω—å–≥–∏
                balanceUpdate = selectedPrize.amount;
                newBalance += balanceUpdate;
                newFreeBalance += balanceUpdate;
                console.log(`üí∞ –ù–∞—á–∏—Å–ª—è–µ–º $${balanceUpdate}`);
            }
            // –í—ã—á–∏—Ç–∞–µ–º —ç–Ω–µ—Ä–≥–∏—é
            console.log(`üîã –í—ã—á–∏—Ç–∞–µ–º ${requiredEnergy} —ç–Ω–µ—Ä–≥–∏–∏: ${currentEnergy} ‚Üí ${newEnergy}`);
            // –í—ã–ø–æ–ª–Ω—è–µ–º –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
            const updateResult = await db_js_1.db.update(schema_1.users)
                .set({
                energyTasksBonus: newEnergy,
                balance: newBalance.toString(),
                freeBalance: newFreeBalance.toString(),
                isPremium: newIsPremium,
                premiumExpiresAt: newPremiumExpiresAt
            })
                .where((0, drizzle_orm_1.eq)(schema_1.users.id, userId));
            console.log(`‚úÖ –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è –≤—ã–ø–æ–ª–Ω–µ–Ω–æ:`, updateResult);
            // –®–∞–≥ 5: –ó–∞–ø–∏—Å—ã–≤–∞–µ–º –≤ –∏—Å—Ç–æ—Ä–∏—é –æ—Ç–∫—Ä—ã—Ç–∏–π
            const openingRecord = await db_js_1.db.insert(schema_1.boxOpenings).values({
                userId,
                boxTypeId: boxTypeRecord[0].id,
                prizeId: selectedPrize.id,
                prizeType: selectedPrize.prizeType,
                amount: selectedPrize.amount != null ? selectedPrize.amount.toString() : null,
                proDays: selectedPrize.proDays ?? null,
                energySpent: requiredEnergy, // –ó–∞–ø–∏—Å—ã–≤–∞–µ–º —Ç—Ä–µ–±—É–µ–º—É—é —ç–Ω–µ—Ä–≥–∏—é
            }).returning();
            console.log(`üìù –ó–∞–ø–∏—Å–∞–Ω–æ –≤ –∏—Å—Ç–æ—Ä–∏—é –æ—Ç–∫—Ä—ã—Ç–∏–π:`, openingRecord[0]);
            // –®–∞–≥ 6: –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
            const finalUser = await db_js_1.db
                .select({ energyTasksBonus: schema_1.users.energyTasksBonus })
                .from(schema_1.users)
                .where((0, drizzle_orm_1.eq)(schema_1.users.id, userId))
                .limit(1);
            console.log(`üîã –§–∏–Ω–∞–ª—å–Ω–∞—è —ç–Ω–µ—Ä–≥–∏—è: ${finalUser[0]?.energyTasksBonus}`);
            console.log(`‚úÖ –ö–æ—Ä–æ–±–∫–∞ ${boxType} —É—Å–ø–µ—à–Ω–æ –æ—Ç–∫—Ä—ã—Ç–∞!`);
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—É—Ä–æ–≤–Ω–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤/–ø—Ä–µ–º–∏—É–º–∞
            await (0, autoRewards_js_1.applyAutoRewards)(userId);
            return {
                success: true,
                prize: selectedPrize,
                balanceUpdate,
                proDays,
                energySpent: requiredEnergy,
                message: selectedPrize.prizeType === 'pro'
                    ? `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –ø–æ–ª—É—á–∏–ª–∏ PRO —Ä–µ–∂–∏–º –Ω–∞ ${selectedPrize.proDays} –¥–Ω–µ–π!`
                    : `–ü–æ–∑–¥—Ä–∞–≤–ª—è–µ–º! –í—ã –≤—ã–∏–≥—Ä–∞–ª–∏ $${selectedPrize.amount}!`
            };
        }
        catch (error) {
            console.error('‚ùå –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ—Ç–∫—Ä—ã—Ç–∏–∏ –∫–æ—Ä–æ–±–∫–∏:', error);
            throw error;
        }
    }
    /**
     * –ü–æ–ª—É—á–∏—Ç—å –∏—Å—Ç–æ—Ä–∏—é –æ—Ç–∫—Ä—ã—Ç–∏–π –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
     */
    static async getUserOpenings(userId, limit = 10) {
        try {
            const openings = await db_js_1.db
                .select({
                id: schema_1.boxOpenings.id,
                boxType: schema_1.boxTypes.type,
                boxName: schema_1.boxTypes.name,
                prizeType: schema_1.boxOpenings.prizeType,
                amount: schema_1.boxOpenings.amount,
                proDays: schema_1.boxOpenings.proDays,
                energySpent: schema_1.boxOpenings.energySpent,
                openedAt: schema_1.boxOpenings.openedAt,
            })
                .from(schema_1.boxOpenings)
                .innerJoin(schema_1.boxTypes, (0, drizzle_orm_1.eq)(schema_1.boxOpenings.boxTypeId, schema_1.boxTypes.id))
                .where((0, drizzle_orm_1.eq)(schema_1.boxOpenings.userId, userId))
                .orderBy((0, drizzle_orm_1.desc)(schema_1.boxOpenings.openedAt))
                .limit(limit);
            return openings.map(opening => ({
                ...opening,
                amount: opening.amount ? Number(opening.amount) : undefined,
                energySpent: Number(opening.energySpent),
            }));
        }
        catch (error) {
            console.error('Error getting user openings:', error);
            throw error;
        }
    }
    /**
     * –ü–æ–ª—É—á–∏—Ç—å —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É –ø—Ä–∏–∑–æ–≤ –¥–ª—è –∞–¥–º–∏–Ω–∞
     */
    static async getPrizeStats() {
        try {
            const stats = await db_js_1.db
                .select({
                boxType: schema_1.boxTypes.type,
                boxName: schema_1.boxTypes.name,
                totalOpenings: (0, drizzle_orm_2.sql) `count(${schema_1.boxOpenings.id})`,
                totalMoney: (0, drizzle_orm_2.sql) `coalesce(sum(${schema_1.boxOpenings.amount}), 0)`,
                totalProDays: (0, drizzle_orm_2.sql) `coalesce(sum(${schema_1.boxOpenings.proDays}), 0)`,
                totalEnergySpent: (0, drizzle_orm_2.sql) `coalesce(sum(${schema_1.boxOpenings.energySpent}), 0)`,
            })
                .from(schema_1.boxOpenings)
                .innerJoin(schema_1.boxTypes, (0, drizzle_orm_1.eq)(schema_1.boxOpenings.boxTypeId, schema_1.boxTypes.id))
                .groupBy(schema_1.boxTypes.id, schema_1.boxTypes.type, schema_1.boxTypes.name);
            return stats.map(stat => ({
                ...stat,
                totalMoney: Number(stat.totalMoney),
                totalProDays: Number(stat.totalProDays),
                totalEnergySpent: Number(stat.totalEnergySpent),
            }));
        }
        catch (error) {
            console.error('Error getting prize stats:', error);
            throw error;
        }
    }
}
exports.PrizeService = PrizeService;
