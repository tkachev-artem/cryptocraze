import cluster from 'cluster';
import os from 'os';

const PORT = process.env.PORT || 8000;
const WORKERS = parseInt(process.env.WORKERS || '') || Math.min(4, os.cpus().length);

async function startServer() {
  const { registerRoutes } = await import('./routes');
  const express = await import('express');
  
  const app = express.default();
  const httpServer = await registerRoutes(app);
  
  httpServer.listen(PORT, () => {
    const workerId = cluster.worker?.id || 'master';
    console.log(`üåê –°–µ—Ä–≤–µ—Ä ${workerId} —Å–ª—É—à–∞–µ—Ç –ø–æ—Ä—Ç ${PORT} (PID: ${process.pid})`);
  });
  
  return httpServer;
}

(async () => {
  if (cluster.isPrimary) {
    console.log(`üöÄ –ó–∞–ø—É—Å–∫–∞–µ–º –∫–ª–∞—Å—Ç–µ—Ä —Å ${WORKERS} –≤–æ—Ä–∫–µ—Ä–∞–º–∏`);
    
    // –ó–∞–ø—É—Å–∫–∞–µ–º –≤–æ—Ä–∫–µ—Ä–æ–≤
    for (let i = 0; i < WORKERS; i++) {
      const worker = cluster.fork({ WORKER_ID: i + 1 });
      console.log(`üë∑ –í–æ—Ä–∫–µ—Ä ${i + 1} –∑–∞–ø—É—â–µ–Ω (PID: ${worker.process.pid})`);
    }
    
    cluster.on('exit', (worker, code, signal) => {
      console.log(`üíÄ –í–æ—Ä–∫–µ—Ä PID ${worker.process.pid} –∑–∞–≤–µ—Ä—à–µ–Ω (${signal || code}). –ü–µ—Ä–µ–∑–∞–ø—É—Å–∫...`);
      const newWorker = cluster.fork();
      console.log(`üë∑ –ù–æ–≤—ã–π –≤–æ—Ä–∫–µ—Ä –∑–∞–ø—É—â–µ–Ω (PID: ${newWorker.process.pid})`);
    });
    
    // –ú–∞—Å—Ç–µ—Ä –ø—Ä–æ—Ü–µ—Å—Å —Ç–æ–∂–µ –∑–∞–ø—É—Å–∫–∞–µ—Ç —Å–µ—Ä–≤–µ—Ä (–¥–ª—è –ø—Ä–æ—Å—Ç–æ—Ç—ã)
    await startServer();
    
  } else {
    // –í–æ—Ä–∫–µ—Ä –ø—Ä–æ—Ü–µ—Å—Å
    const workerId = process.env.WORKER_ID || cluster.worker?.id;
    console.log(`üë∑ –í–æ—Ä–∫–µ—Ä ${workerId} (PID: ${process.pid}) –∑–∞–ø—É—â–µ–Ω`);
    
    await startServer();
    
    process.on('SIGTERM', () => {
      console.log(`üë∑ –í–æ—Ä–∫–µ—Ä ${workerId} –ø–æ–ª—É—á–∏–ª SIGTERM, –∑–∞–≤–µ—Ä—à–µ–Ω–∏–µ...`);
      process.exit(0);
    });
  }
})().catch(console.error);