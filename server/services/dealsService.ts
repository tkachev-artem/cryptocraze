import { db } from '../db.js';
import { deals, users, userTasks } from '../../shared/schema';
import { eq, and, or } from 'drizzle-orm';
import { unifiedPriceService } from './unifiedPriceService.js';
import { storage } from '../storage.js';
import { applyAutoRewards } from './autoRewards.js';
import { workerManager } from './workers/workerManager.js';
import AnalyticsLogger from '../middleware/analyticsLogger.js';
import { notificationService } from './notifications.js';
import { serverTranslations } from '../lib/translations.js';

export const dealsService = {
  async openDeal({ userId, symbol, direction, amount, multiplier, takeProfit, stopLoss }: {
    userId: string,
    symbol: string,
    direction: 'up' | 'down',
    amount: number,
    multiplier: number,
    takeProfit?: number,
    stopLoss?: number,
  }) {
    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const user = await storage.getUser(userId);
    if (!user) throw new Error(serverTranslations.error('userNotFound'));
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–æ–¥–¥–µ—Ä–∂–∞–Ω–∏–µ 30% –≤ —Å–≤–æ–±–æ–¥–Ω—ã—Ö —Å—Ä–µ–¥—Å—Ç–≤–∞—Ö –ø—Ä–∏ –Ω–µ—Ö–≤–∞—Ç–∫–µ
    const currentBalance = Number(user.balance || 0);
    const currentFree = Number(user.freeBalance || 0);
    if (currentFree < amount) {
      const total = Math.max(0, currentBalance + currentFree);
      const targetFree = Number((total * 0.3).toFixed(8));
      const targetBalance = Number((total - targetFree).toFixed(2));
      if (currentFree < targetFree) {
        await db.update(users)
          .set({ balance: targetBalance.toString(), freeBalance: targetFree.toString(), updatedAt: new Date() as any })
          .where(eq(users.id as any, userId));
      }
      const [reloaded] = await db.select().from(users).where(eq(users.id as any, userId));
      if (!reloaded || Number(reloaded.freeBalance || 0) < amount) {
        throw new Error(serverTranslations.error('insufficientFunds'));
      }
    }

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å–∏–º–≤–æ–ª–∞ –∏ –ø–æ–ª—É—á–µ–Ω–∏–µ —Ü–µ–Ω—ã —Å Binance API
    let priceData = unifiedPriceService.getPrice(symbol);
    if (!priceData) {
      await unifiedPriceService.addPair(symbol);
      priceData = unifiedPriceService.getPrice(symbol);
    }
    if (!priceData) throw new Error(serverTranslations.error('symbolNotFound'));
    const openPrice = priceData.price;

    // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–ª–µ—á–∞
    if (multiplier < 1 || multiplier > 100) throw new Error(serverTranslations.error('invalidLeverage'));
    if (amount <= 0) throw new Error(serverTranslations.error('invalidAmount'));

    // –í–∞–ª–∏–¥–∞—Ü–∏—è TP/SL
    if (takeProfit && takeProfit <= 0) throw new Error(serverTranslations.error('invalidTakeProfit'));
    if (stopLoss && stopLoss <= 0) throw new Error(serverTranslations.error('invalidStopLoss'));

    // –§–∏–∫—Å–∏—Ä—É–µ–º —Ü–µ–Ω—É –æ—Ç–∫—Ä—ã—Ç–∏—è —Å –±—ç–∫–∞
    const now = new Date();
    const [deal] = await db.insert(deals).values({
      userId,
      symbol,
      direction,
      amount: amount.toString(),
      multiplier,
      openPrice: openPrice.toString(),
      takeProfit: takeProfit?.toString(),
      stopLoss: stopLoss?.toString(),
      openedAt: now,
      status: 'open',
    }).returning();

    // –ó–∞–º–æ—Ä–∞–∂–∏–≤–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞
    await storage.updateUserFreeBalance(userId, -amount);

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º —Å–¥–µ–ª–∫—É —Å ClickHouse
    try {
      await AnalyticsLogger.syncDeal({
        id: deal.id,
        userId,
        symbol,
        direction,
        amount,
        multiplier,
        openPrice,
        takeProfit,
        stopLoss,
        openedAt: now,
        status: 'open'
      });
    } catch (error) {
      console.error('Failed to sync deal to ClickHouse:', error);
    }

    // –£–≤–µ–ª–∏—á–∏–≤–∞–µ–º —Å—á–µ—Ç—á–∏–∫ —Å–¥–µ–ª–æ–∫ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await storage.incrementUserTradesCount(userId);

    // Add order to worker monitoring if TP or SL is set
    if (takeProfit || stopLoss) {
      try {
        await workerManager.addOrderToMonitoring({
          dealId: deal.id,
          userId,
          symbol,
          direction,
          amount,
          multiplier,
          openPrice,
          takeProfit,
          stopLoss,
          openedAt: now,
        });
        console.log(`[dealsService] Added order ${deal.id} to TP/SL monitoring`);
      } catch (error) {
        console.error(`[dealsService] Failed to add order ${deal.id} to monitoring:`, error);
        // Don't fail the deal opening, just log the error
      }
    }

    // Create notification for deal opened
    try {
      await notificationService.createTradeOpenedNotification(userId, deal.id, symbol, amount, direction);
      console.log(`[dealsService] Created trade opened notification for deal ${deal.id}`);
    } catch (error) {
      console.error(`[dealsService] Failed to create trade opened notification:`, error);
      // Don't fail the deal opening, just log the error
    }

    return {
      id: deal.id,
      status: deal.status,
      openPrice: deal.openPrice,
      openedAt: deal.openedAt,
    };
  },

  async closeDeal({ userId, dealId }: { userId: string, dealId: number }) {
    console.log(`üî•üî• [dealsService] –ù–ê–ß–ò–ù–ê–ï–ú closeDeal: userId=${userId}, dealId=${dealId}`);
    
    // Remove from worker monitoring first (if it exists)
    try {
      await workerManager.removeOrderFromMonitoring(dealId);
      console.log(`[dealsService] Removed order ${dealId} from TP/SL monitoring`);
    } catch (error) {
      console.error(`[dealsService] Failed to remove order ${dealId} from monitoring:`, error);
      // Continue with manual closure
    }
    
    // –ü–æ–ª—É—á–∞–µ–º —Å–¥–µ–ª–∫—É
    const [deal] = await db.select().from(deals).where(eq(deals.id, dealId));
    if (!deal) throw new Error('–°–¥–µ–ª–∫–∞ –Ω–µ –Ω–∞–π–¥–µ–Ω–∞');
    if (deal.userId !== userId) throw new Error('–ù–µ—Ç –¥–æ—Å—Ç—É–ø–∞ –∫ —Å–¥–µ–ª–∫–µ');
    if (deal.status !== 'open') throw new Error('–°–¥–µ–ª–∫–∞ —É–∂–µ –∑–∞–∫—Ä—ã—Ç–∞');
    
    console.log(`[dealsService] –°–¥–µ–ª–∫–∞ –Ω–∞–π–¥–µ–Ω–∞: ${deal.symbol}, –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏–µ: ${deal.direction}, —Å—É–º–º–∞: ${deal.amount}`);

    // –ü–æ–ª—É—á–∞–µ–º –∞–∫—Ç—É–∞–ª—å–Ω—É—é —Ü–µ–Ω—É —Å Binance API
    let priceData = unifiedPriceService.getPrice(deal.symbol);
    if (!priceData) {
      await unifiedPriceService.addPair(deal.symbol);
      // –ú–æ–∂–Ω–æ –ø–æ–¥–æ–∂–¥–∞—Ç—å 1 —Å–µ–∫—É–Ω–¥—É, —á—Ç–æ–±—ã —Ü–µ–Ω–∞ —É—Å–ø–µ–ª–∞ –æ–±–Ω–æ–≤–∏—Ç—å—Å—è
      await new Promise(r => setTimeout(r, 1000));
      priceData = unifiedPriceService.getPrice(deal.symbol);
    }
    if (!priceData) throw new Error('–ù–µ —É–¥–∞–ª–æ—Å—å –ø–æ–ª—É—á–∏—Ç—å —Ü–µ–Ω—É');
    const closePrice = priceData.price;

    // –†–∞—Å—á—ë—Ç —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ –ø–æ —Ñ–æ—Ä–º—É–ª–µ:
    // volume = amount √ó multiplier
    // priceChange = (closePrice - openPrice) / openPrice
    // if direction === 'up': profit = volume √ó priceChange
    // else: profit = volume √ó (-priceChange)
    // commission = volume √ó 0.0005
    // finalProfit = profit - commission
    
    const amount = Number(deal.amount);
    const multiplier = deal.multiplier;
    const openPrice = Number(deal.openPrice);
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –æ–±—ä–µ–º —Å–¥–µ–ª–∫–∏
    const volume = amount * multiplier;
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∏–∑–º–µ–Ω–µ–Ω–∏–µ —Ü–µ–Ω—ã
    const priceChange = (closePrice - openPrice) / openPrice;
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –ø—Ä–∏–±—ã–ª—å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç –Ω–∞–ø—Ä–∞–≤–ª–µ–Ω–∏—è
    let profit = 0;
    if (deal.direction === 'up') {
      profit = volume * priceChange;
    } else {
      profit = volume * (-priceChange);
    }
    
    // –†–∞—Å—Å—á–∏—Ç—ã–≤–∞–µ–º –∫–æ–º–∏—Å—Å–∏—é (0.05%)
    const commission = volume * 0.0005;
    
    // –ò—Ç–æ–≥–æ–≤–∞—è –ø—Ä–∏–±—ã–ª—å —Å —É—á–µ—Ç–æ–º –∫–æ–º–∏—Å—Å–∏–∏
    const finalProfit = profit - commission;

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å–¥–µ–ª–∫—É
    await db.update(deals)
      .set({
        status: 'closed',
        closedAt: new Date(),
        closePrice: closePrice.toString(),
        profit: finalProfit.toString(),
      })
      .where(eq(deals.id, dealId));

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Å—Ä–µ–¥—Å—Ç–≤–∞ + –∏—Ç–æ–≥–æ–≤—É—é –ø—Ä–∏–±—ã–ª—å
    await storage.updateUserFreeBalance(userId, amount + finalProfit);
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∞–≤—Ç–æ—É—Ä–æ–≤–Ω–∏ –ø–æ—Å–ª–µ –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å—Ä–µ–¥—Å—Ç–≤
    await applyAutoRewards(userId);
    console.log(`[dealsService] –û–±–Ω–æ–≤–ª–µ–Ω freeBalance: +${amount + finalProfit}`);

    // –û–±–Ω–æ–≤–ª—è–µ–º —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫—É —Ç–æ—Ä–≥–æ–≤–ª–∏ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    await storage.updateUserTradingStats(userId, finalProfit, amount);
    console.log(`[dealsService] –û–±–Ω–æ–≤–ª–µ–Ω–∞ —Å—Ç–∞—Ç–∏—Å—Ç–∏–∫–∞ —Ç–æ—Ä–≥–æ–≤–ª–∏: –ø—Ä–∏–±—ã–ª—å=${finalProfit}`);

    // –°–∏–Ω—Ö—Ä–æ–Ω–∏–∑–∏—Ä—É–µ–º –∑–∞–∫—Ä—ã—Ç–∏–µ —Å–¥–µ–ª–∫–∏ —Å ClickHouse
    const closedAt = new Date();
    try {
      await AnalyticsLogger.syncDeal({
        id: dealId,
        userId,
        symbol: deal.symbol,
        direction: deal.direction,
        amount: parseFloat(deal.amount),
        multiplier: deal.multiplier,
        openPrice: parseFloat(deal.openPrice),
        takeProfit: deal.takeProfit ? parseFloat(deal.takeProfit) : undefined,
        stopLoss: deal.stopLoss ? parseFloat(deal.stopLoss) : undefined,
        openedAt: deal.openedAt,
        closedAt,
        closePrice,
        profit: finalProfit,
        status: 'closed'
      });
    } catch (error) {
      console.error('Failed to sync closed deal to ClickHouse:', error);
    }

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–¥–∞–Ω–∏–π —Ç–∏–ø–∞ "daily_trade"
    console.log(`üî•üî• [dealsService] –°–ï–ô–ß–ê–° –±—É–¥–µ–º –≤—ã–∑—ã–≤–∞—Ç—å updateDailyTradeTasks –¥–ª—è userId=${userId}`);
    await this.updateDailyTradeTasks(userId);
    console.log(`üî•üî• [dealsService] updateDailyTradeTasks –ó–ê–í–ï–†–®–ï–ù`);

    // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–¥–∞–Ω–∏–π —Ç–∏–ø–∞ "crypto_king" –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–±—ã–ª–∏
    console.log(`[dealsService] –í—ã–∑—ã–≤–∞–µ–º updateCryptoKingTasks –¥–ª—è userId=${userId}, –ø—Ä–∏–±—ã–ª—å=${finalProfit}`);
    await this.updateCryptoKingTasks(userId, finalProfit);
    console.log(`[dealsService] updateCryptoKingTasks –∑–∞–≤–µ—Ä—à–µ–Ω`);

    // –û–±–Ω–æ–≤–ª—è–µ–º –Ω–æ–≤—ã–µ —Ç–∏–ø—ã —Ç–æ—Ä–≥–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π
    console.log(`[dealsService] –í—ã–∑—ã–≤–∞–µ–º updateNewTradeTasksOnClose –¥–ª—è userId=${userId}, –ø—Ä–∏–±—ã–ª—å=${finalProfit}`);
    await this.updateNewTradeTasksOnClose(userId, finalProfit);
    console.log(`[dealsService] updateNewTradeTasksOnClose –∑–∞–≤–µ—Ä—à–µ–Ω`);

    // Create notification for deal closed
    try {
      await notificationService.createTradeClosedNotification(userId, deal.id, deal.symbol, finalProfit);
      console.log(`[dealsService] Created trade closed notification for deal ${deal.id}`);
    } catch (error) {
      console.error(`[dealsService] Failed to create trade closed notification:`, error);
      // Don't fail the deal closing, just log the error
    }

    return {
      id: deal.id,
      status: 'closed',
      closePrice,
      closedAt: new Date(),
      profit: finalProfit,
    };
  },

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–¥–∞–Ω–∏–π —Ç–∏–ø–∞ "daily_trade" –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–¥–µ–ª–∫–∏
   */
  async updateDailyTradeTasks(userId: string): Promise<void> {
    try {
      console.log(`[dealsService] –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–¥–∞–Ω–∏–π "daily_trade" –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);
      
      // –°–Ω–∞—á–∞–ª–∞ –ø—Ä–æ–≤–µ—Ä–∏–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      const allActiveTasks = await db.select()
        .from(userTasks)
        .where(
          and(
            eq(userTasks.userId, userId),
            eq(userTasks.status, 'active')
          )
        );

      console.log(`[dealsService] –í—Å–µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã—Ö –∑–∞–¥–∞–Ω–∏–π: ${allActiveTasks.length}`);
      allActiveTasks.forEach(task => {
        console.log(`[dealsService] –ó–∞–¥–∞–Ω–∏–µ ${task.id}: taskType="${task.taskType}", title="${task.title}", –ø—Ä–æ–≥—Ä–µ—Å—Å=${task.progressCurrent}/${task.progressTotal}`);
      });
      
      // –§–∏–ª—å—Ç—Ä—É–µ–º –∑–∞–¥–∞–Ω–∏—è –¥–ª—è daily_trader - –∏—Å–∫–ª—é—á–∞–µ–º –Ω–æ–≤—ã–µ —Ç–∏–ø—ã —Ç–æ—Ä–≥–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π
      const dailyTradeTasks = allActiveTasks.filter(task => {
        // –¢–æ–ª—å–∫–æ –∑–∞–¥–∞–Ω–∏—è —Ç–∏–ø–∞ daily_trader –¥–æ–ª–∂–Ω—ã –æ–±–Ω–æ–≤–ª—è—Ç—å—Å—è –∑–¥–µ—Å—å
        const isDailyTrader = task.taskType === 'daily_trader';
        
        console.log(`[dealsService] üîç –ü—Ä–æ–≤–µ—Ä–∫–∞ –∑–∞–¥–∞–Ω–∏—è ${task.id} (${task.taskType}): isDailyTrader=${isDailyTrader}`);
        
        return isDailyTrader;
      });

      console.log(`[dealsService] –ù–∞–π–¥–µ–Ω–æ —Ç–æ—Ä–≥–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π: ${dailyTradeTasks.length}`);
      dailyTradeTasks.forEach(task => {
        console.log(`[dealsService] - –¢–æ—Ä–≥–æ–≤–æ–µ –∑–∞–¥–∞–Ω–∏–µ: ${task.taskType} (${task.id}), –ø—Ä–æ–≥—Ä–µ—Å—Å: ${task.progressCurrent}/${task.progressTotal}`);
      });

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è
      for (const task of dailyTradeTasks) {
        const newProgress = Math.min(task.progressCurrent + 1, task.progressTotal);
        const isCompleted = newProgress >= task.progressTotal;

        const updateData: any = {
          progressCurrent: newProgress
        };

        // –ù–ï –∑–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - –æ—Å—Ç–∞–≤–ª—è–µ–º –µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã
        // if (isCompleted) {
        //   updateData.status = 'completed';
        //   updateData.completedAt = new Date();
        // }

        await db.update(userTasks)
          .set(updateData)
          .where(eq(userTasks.id, task.id));

        console.log(`[dealsService] –ó–∞–¥–∞–Ω–∏–µ ${task.id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ: –ø—Ä–æ–≥—Ä–µ—Å—Å ${task.progressCurrent} ‚Üí ${newProgress}, –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${isCompleted}`);
      }
    } catch (error) {
      console.error('[dealsService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏–π "daily_trade":', error);
    }
  },

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–¥–∞–Ω–∏–π —Ç–∏–ø–∞ "crypto_king" –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–±—ã–ª–∏ –æ—Ç —Å–¥–µ–ª–æ–∫
   */
  async updateCryptoKingTasks(userId: string, profit: number): Promise<void> {
    try {
      console.log(`[dealsService] –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–¥–∞–Ω–∏–π "crypto_king" –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}, –ø—Ä–∏–±—ã–ª—å: ${profit}`);
      
      // –ù–∞—Ö–æ–¥–∏–º –∞–∫—Ç–∏–≤–Ω—ã–µ –∑–∞–¥–∞–Ω–∏—è —Ç–∏–ø–∞ "crypto_king"
      const cryptoKingTasks = await db.select()
        .from(userTasks)
        .where(
          and(
            eq(userTasks.userId, userId),
            eq(userTasks.taskType, 'crypto_king'),
            eq(userTasks.status, 'active')
          )
        );

      console.log(`[dealsService] –ù–∞–π–¥–µ–Ω–æ –∑–∞–¥–∞–Ω–∏–π "crypto_king": ${cryptoKingTasks.length}`);

      // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∫–∞–∂–¥–æ–≥–æ –∑–∞–¥–∞–Ω–∏—è –Ω–∞ –æ—Å–Ω–æ–≤–µ –ø—Ä–∏–±—ã–ª–∏
      for (const task of cryptoKingTasks) {
        // –£—á–∏—Ç—ã–≤–∞–µ–º —Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é —á–∞—Å—Ç—å –ø—Ä–∏–±—ã–ª–∏ –∏ –æ–∫—Ä—É–≥–ª—è–µ–º –¥–æ —Ü–µ–ª—ã—Ö –¥–æ–ª–ª–∞—Ä–æ–≤
        const positiveProfitDollars = Math.max(0, Math.floor(profit));
        if (positiveProfitDollars <= 0) {
          console.log(`[dealsService] –ü—Ä–∏–±—ã–ª—å –Ω–µ–ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω–∞—è, –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–µ –∏–∑–º–µ–Ω–µ–Ω (profit=${profit}).`);
          continue;
        }

        // –î–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–±—ã–ª—å –∫ —Ç–µ–∫—É—â–µ–º—É –ø—Ä–æ–≥—Ä–µ—Å—Å—É
        const newProgress = Math.min((task.progressCurrent || 0) + positiveProfitDollars, task.progressTotal);
        const isCompleted = newProgress >= task.progressTotal;

        const updateData: any = {
          progressCurrent: newProgress
        };

        // –ù–ï –∑–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - –æ—Å—Ç–∞–≤–ª—è–µ–º –µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã
        // if (isCompleted) {
        //   updateData.status = 'completed';
        //   updateData.completedAt = new Date();
        // }

        await db.update(userTasks)
          .set(updateData)
          .where(eq(userTasks.id, task.id));

        console.log(`[dealsService] –ó–∞–¥–∞–Ω–∏–µ "–ö—Ä–∏–ø—Ç–æ –∫–æ—Ä–æ–ª—å" ${task.id} –æ–±–Ω–æ–≤–ª–µ–Ω–æ: –ø—Ä–æ–≥—Ä–µ—Å—Å ${task.progressCurrent} ‚Üí ${newProgress} (–∑–∞—á—Ç–µ–Ω–æ: +${positiveProfitDollars}), –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${isCompleted}`);
      }
    } catch (error) {
      console.error('[dealsService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –∑–∞–¥–∞–Ω–∏–π "crypto_king":', error);
    }
  },

  /**
   * –û–±–Ω–æ–≤–∏—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–æ–≤—ã—Ö —Ç–∏–ø–æ–≤ —Ç–æ—Ä–≥–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ —Å–¥–µ–ª–∫–∏
   */
  async updateNewTradeTasksOnClose(userId: string, profit: number): Promise<void> {
    try {
      console.log(`[dealsService] –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –Ω–æ–≤—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π –¥–ª—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}, –ø—Ä–∏–±—ã–ª—å: ${profit}`);

      // –ü–æ–ª—É—á–∞–µ–º –≤—Å–µ –∞–∫—Ç–∏–≤–Ω—ã–µ —Ç–æ—Ä–≥–æ–≤—ã–µ –∑–∞–¥–∞–Ω–∏—è –Ω–æ–≤—ã—Ö —Ç–∏–ø–æ–≤
      const tradeTasks = await db.select()
        .from(userTasks)
        .where(
          and(
            eq(userTasks.userId, userId),
            eq(userTasks.status, 'active'),
            or(
              eq(userTasks.taskType, 'trade_close'),
              eq(userTasks.taskType, 'trade_first_profit'),
              eq(userTasks.taskType, 'trade_lucky'),
              eq(userTasks.taskType, 'trade_master')
            )
          )
        );

      console.log(`[dealsService] –ù–∞–π–¥–µ–Ω–æ –Ω–æ–≤—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π: ${tradeTasks.length}`);

      for (const task of tradeTasks) {
        let progressUpdate = 0;
        let shouldUpdate = false;

        // –û–ø—Ä–µ–¥–µ–ª—è–µ–º –∫–∞–∫ –æ–±–Ω–æ–≤–ª—è—Ç—å –ø—Ä–æ–≥—Ä–µ—Å—Å –≤ –∑–∞–≤–∏—Å–∏–º–æ—Å—Ç–∏ –æ—Ç —Ç–∏–ø–∞ –∑–∞–¥–∞–Ω–∏—è
        if (task.taskType === 'trade_close') {
          // –ó–∞–¥–∞–Ω–∏–µ "–ó–∞–∫—Ä—ã—Ç—å —Å–¥–µ–ª–∫—É" - +1 –ø—Ä–∏ –ª—é–±–æ–º –∑–∞–∫—Ä—ã—Ç–∏–∏
          progressUpdate = 1;
          shouldUpdate = true;
        } else if (task.taskType === 'trade_first_profit' || task.taskType === 'trade_lucky' || task.taskType === 'trade_master') {
          // –ó–∞–¥–∞–Ω–∏—è –Ω–∞ –ø—Ä–∏–±—ã–ª—å - –¥–æ–±–∞–≤–ª—è–µ–º –ø—Ä–∏–±—ã–ª—å –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö (—Ç–æ–ª—å–∫–æ –ø–æ–ª–æ–∂–∏—Ç–µ–ª—å–Ω—É—é)
          if (profit > 0) {
            progressUpdate = Math.floor(profit); // –ü—Ä–∏–±—ã–ª—å –≤ –¥–æ–ª–ª–∞—Ä–∞—Ö
            shouldUpdate = true;
          }
        }

        if (shouldUpdate) {
          const newProgress = Math.min((task.progressCurrent || 0) + progressUpdate, task.progressTotal);
          const isCompleted = newProgress >= task.progressTotal;

          const updateData: any = {
            progressCurrent: newProgress
          };

          // –ù–ï –∑–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏ - –æ—Å—Ç–∞–≤–ª—è–µ–º –µ–≥–æ –∞–∫—Ç–∏–≤–Ω—ã–º –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –Ω–∞–≥—Ä–∞–¥—ã
          // if (isCompleted) {
          //   updateData.status = 'completed';
          //   updateData.completedAt = new Date();
          // }

          await db.update(userTasks)
            .set(updateData)
            .where(eq(userTasks.id, task.id));

          console.log(`[dealsService] –ó–∞–¥–∞–Ω–∏–µ ${task.taskType} (${task.id}) –æ–±–Ω–æ–≤–ª–µ–Ω–æ: –ø—Ä–æ–≥—Ä–µ—Å—Å ${task.progressCurrent} ‚Üí ${newProgress} (+${progressUpdate}), –∑–∞–≤–µ—Ä—à–µ–Ω–æ: ${isCompleted}`);
        } else {
          console.log(`[dealsService] –ó–∞–¥–∞–Ω–∏–µ ${task.taskType} (${task.id}) –Ω–µ –æ–±–Ω–æ–≤–ª–µ–Ω–æ (–Ω–µ—Ç –ø—Ä–∏–±—ã–ª–∏ –∏–ª–∏ –Ω–µ–ø–æ–¥—Ö–æ–¥—è—â–∏–π —Ç–∏–ø)`);
        }
      }
    } catch (error) {
      console.error('[dealsService] –û—à–∏–±–∫–∞ –ø—Ä–∏ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–∏ –Ω–æ–≤—ã—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –∑–∞–¥–∞–Ω–∏–π:', error);
    }
  }
};