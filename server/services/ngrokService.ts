import ngrok from '@ngrok/ngrok';

/**
 * NgrokService - —Å–µ—Ä–≤–∏—Å –¥–ª—è —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è ngrok —Ç—É–Ω–Ω–µ–ª–µ–º
 * –ü–æ–∑–≤–æ–ª—è–µ—Ç –ø–æ–ª—É—á–∏—Ç—å –ø—É–±–ª–∏—á–Ω—ã–π –¥–æ—Å—Ç—É–ø –∫ localhost –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—é
 */
export class NgrokService {
  private static listener: any = null;
  private static publicUrl: string | null = null;
  private static isStarted: boolean = false;

  /**
   * –ó–∞–ø—É—Å–∫ ngrok —Ç—É–Ω–Ω–µ–ª—è
   */
  static async start(): Promise<string | null> {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–ª–∂–µ–Ω –ª–∏ ngrok –±—ã—Ç—å –≤–∫–ª—é—á–µ–Ω
    const enableNgrok = process.env.ENABLE_NGROK === 'true';
    const ngrokAuthToken = process.env.NGROK_AUTHTOKEN;
    const ngrokDomain = process.env.NGROK_DOMAIN;

    if (!enableNgrok) {
      console.log('üö´ [NgrokService] Ngrok disabled (ENABLE_NGROK != true)');
      return null;
    }

    if (!ngrokAuthToken) {
      console.error('‚ùå [NgrokService] NGROK_AUTHTOKEN not found in environment');
      return null;
    }

    if (this.isStarted) {
      console.log('‚ÑπÔ∏è [NgrokService] Already started, returning existing URL');
      return this.publicUrl;
    }

    try {
      console.log('üöÄ [NgrokService] Starting ngrok tunnel...');
      
      const config: any = {
        addr: process.env.PORT || 1111,
        authtoken: ngrokAuthToken,
      };

      // –ï—Å–ª–∏ –µ—Å—Ç—å —Ñ–∏–∫—Å–∏—Ä–æ–≤–∞–Ω–Ω—ã–π –¥–æ–º–µ–Ω, –∏—Å–ø–æ–ª—å–∑—É–µ–º –µ–≥–æ
      if (ngrokDomain) {
        config.domain = ngrokDomain;
        console.log(`üè† [NgrokService] Using fixed domain: ${ngrokDomain}`);
      }

      this.listener = await ngrok.forward(config);
      this.publicUrl = this.listener.url();
      this.isStarted = true;

      console.log(`‚úÖ [NgrokService] Tunnel established!`);
      console.log(`üåç [NgrokService] Public URL: ${this.publicUrl}`);
      
      // –õ–æ–≥–∏—Ä—É–µ–º –≤–∞–∂–Ω—É—é –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏—é –¥–ª—è OAuth
      if (ngrokDomain) {
        console.log(`üîê [NgrokService] OAuth callback: ${this.publicUrl}/api/auth/google/callback`);
      }

      return this.publicUrl;
    } catch (error) {
      console.error('‚ùå [NgrokService] Failed to start tunnel:', error);
      this.isStarted = false;
      throw error;
    }
  }

  /**
   * –û—Å—Ç–∞–Ω–æ–≤–∫–∞ ngrok —Ç—É–Ω–Ω–µ–ª—è
   */
  static async stop(): Promise<void> {
    if (this.listener) {
      console.log('üõë [NgrokService] Stopping tunnel...');
      try {
        await this.listener.close();
        this.listener = null;
        this.publicUrl = null;
        this.isStarted = false;
        console.log('‚úÖ [NgrokService] Tunnel stopped');
      } catch (error) {
        console.error('‚ùå [NgrokService] Error stopping tunnel:', error);
      }
    }
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ —Ç–µ–∫—É—â–µ–≥–æ –ø—É–±–ª–∏—á–Ω–æ–≥–æ URL
   */
  static getPublicUrl(): string | null {
    return this.publicUrl;
  }

  /**
   * –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞ —Ç—É–Ω–Ω–µ–ª—è
   */
  static isRunning(): boolean {
    return this.isStarted && this.publicUrl !== null;
  }

  /**
   * –ü–æ–ª—É—á–µ–Ω–∏–µ callback URL –¥–ª—è OAuth
   */
  static getOAuthCallbackUrl(): string | null {
    if (!this.publicUrl) return null;
    return `${this.publicUrl}/api/auth/google/callback`;
  }

  /**
   * Graceful shutdown –ø—Ä–∏ –∑–∞–≤–µ—Ä—à–µ–Ω–∏–∏ –ø—Ä–æ—Ü–µ—Å—Å–∞
   */
  static setupGracefulShutdown(): void {
    const cleanup = async () => {
      console.log('üßπ [NgrokService] Cleanup on exit...');
      await this.stop();
      process.exit(0);
    };

    process.on('SIGINT', cleanup);
    process.on('SIGTERM', cleanup);
    process.on('exit', () => {
      if (this.isStarted) {
        console.log('‚ö†Ô∏è [NgrokService] Process exiting with active tunnel');
      }
    });
  }
}

export default NgrokService;