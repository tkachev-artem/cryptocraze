import { Request, Response } from 'express';
import { db } from './db.js';
import { users } from '../shared/schema';
import { eq } from 'drizzle-orm';

// –ü—Ä–∏–∑—ã –≤ —Ä—É–ª–µ—Ç–∫–µ —Å –∏—Ö –≤–µ—Å–∞–º–∏ (–≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç—è–º–∏)
interface WheelPrize {
  value: number;
  label: string;
  weight: number; // –í–µ—Å –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–∏—è –≤–µ—Ä–æ—è—Ç–Ω–æ—Å—Ç–∏
}

const WHEEL_PRIZES: WheelPrize[] = [
  { value: 100, label: '100$', weight: 25 },      // 25% —à–∞–Ω—Å
  { value: 150, label: '150$', weight: 20 },      // 20% —à–∞–Ω—Å  
  { value: 200, label: '200$', weight: 15 },      // 15% —à–∞–Ω—Å
  { value: 500, label: '500$', weight: 12 },      // 12% —à–∞–Ω—Å
  { value: 700, label: '700$', weight: 10 },      // 10% —à–∞–Ω—Å
  { value: 1000, label: '1000$', weight: 8 },     // 8% —à–∞–Ω—Å
  { value: 1500, label: '1500$', weight: 5 },     // 5% —à–∞–Ω—Å
  { value: 2000, label: '2000$', weight: 3 },     // 3% —à–∞–Ω—Å
  { value: 10000, label: '10000$', weight: 2 },   // 2% —à–∞–Ω—Å
];

/**
 * –í—ã–±–∏—Ä–∞–µ—Ç —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–∏–∑ –Ω–∞ –æ—Å–Ω–æ–≤–µ –≤–µ—Å–æ–≤
 */
function selectRandomPrize(): { prize: WheelPrize; index: number } {
  const totalWeight = WHEEL_PRIZES.reduce((sum, prize) => sum + prize.weight, 0);
  const random = Math.random() * totalWeight;
  
  let currentWeight = 0;
  for (let i = 0; i < WHEEL_PRIZES.length; i++) {
    currentWeight += WHEEL_PRIZES[i].weight;
    if (random <= currentWeight) {
      return { prize: WHEEL_PRIZES[i], index: i };
    }
  }
  
  // Fallback (–Ω–µ –¥–æ–ª–∂–Ω–æ –ø—Ä–æ–∏–∑–æ–π—Ç–∏)
  return { prize: WHEEL_PRIZES[0], index: 0 };
}

/**
 * API endpoint –¥–ª—è –≤—Ä–∞—â–µ–Ω–∏—è —Ä—É–ª–µ—Ç–∫–∏
 * POST /api/wheel/spin
 */
export async function spinWheel(req: Request, res: Response): Promise<void> {
  try {
    const userId = (req as any).user?.id;
    
    if (!userId) {
      res.status(401).json({ 
        success: false, 
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –∞–≤—Ç–æ—Ä–∏–∑–æ–≤–∞–Ω' 
      });
      return;
    }

    console.log(`üé∞ [WheelAPI] –ó–∞–ø—Ä–æ—Å –Ω–∞ –≤—Ä–∞—â–µ–Ω–∏–µ —Ä—É–ª–µ—Ç–∫–∏ –æ—Ç –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è: ${userId}`);

    // –ü–æ–ª—É—á–∞–µ–º –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
    const [user] = await db
      .select()
      .from(users)
      .where(eq(users.id, userId))
      .limit(1);

    if (!user) {
      res.status(404).json({ 
        success: false, 
        error: '–ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –Ω–µ –Ω–∞–π–¥–µ–Ω' 
      });
      return;
    }

    // –í—ã–±–∏—Ä–∞–µ–º —Å–ª—É—á–∞–π–Ω—ã–π –ø—Ä–∏–∑
    const { prize, index } = selectRandomPrize();
    
    console.log(`üé∞ [WheelAPI] –í—ã–±—Ä–∞–Ω –ø—Ä–∏–∑: ${prize.label} (–∏–Ω–¥–µ–∫—Å: ${index})`);

    // –ù–∞—á–∏—Å–ª—è–µ–º –ø—Ä–∏–∑ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—é –Ω–∞ —Ä–µ–∞–ª—å–Ω—ã–π –±–∞–ª–∞–Ω—Å (–∫–∞–∫ –∑–∞–¥–∞–Ω–∏—è)
    const currentBalance = parseFloat(user.balance || '0');
    const newBalance = currentBalance + prize.value;

    await db
      .update(users)
      .set({
        balance: newBalance.toFixed(2), // –û–±—ã—á–Ω–∞—è —Ç–æ—á–Ω–æ—Å—Ç—å –¥–ª—è —Ä–µ–∞–ª—å–Ω–æ–≥–æ –±–∞–ª–∞–Ω—Å–∞
        updatedAt: new Date()
      })
      .where(eq(users.id, userId));

    console.log(`üé∞ [WheelAPI] –ù–∞—á–∏—Å–ª–µ–Ω–æ $${prize.value}. –ù–æ–≤—ã–π –±–∞–ª–∞–Ω—Å: $${newBalance.toFixed(2)}`);

    // –í–æ–∑–≤—Ä–∞—â–∞–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç
    res.json({
      success: true,
      prize: prize.value,
      index: index,
      label: prize.label,
      newBalance: newBalance.toFixed(2)
    });

  } catch (error) {
    console.error('üé∞ [WheelAPI] –û—à–∏–±–∫–∞ –ø—Ä–∏ –≤—Ä–∞—â–µ–Ω–∏–∏ —Ä—É–ª–µ—Ç–∫–∏:', error);
    
    res.status(500).json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
}

/**
 * API endpoint –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è –∏–Ω—Ñ–æ—Ä–º–∞—Ü–∏–∏ –æ –ø—Ä–∏–∑–∞—Ö —Ä—É–ª–µ—Ç–∫–∏
 * GET /api/wheel/prizes
 */
export async function getWheelPrizes(req: Request, res: Response): Promise<void> {
  try {
    const prizes = WHEEL_PRIZES.map((prize, index) => ({
      value: prize.value,
      label: prize.label,
      index: index
    }));

    res.json({
      success: true,
      prizes: prizes
    });

  } catch (error) {
    console.error('üé∞ [WheelAPI] –û—à–∏–±–∫–∞ –ø—Ä–∏ –ø–æ–ª—É—á–µ–Ω–∏–∏ –ø—Ä–∏–∑–æ–≤:', error);
    
    res.status(500).json({
      success: false,
      error: '–í–Ω—É—Ç—Ä–µ–Ω–Ω—è—è –æ—à–∏–±–∫–∞ —Å–µ—Ä–≤–µ—Ä–∞'
    });
  }
}