import { useState, useEffect, useCallback } from 'react';
import { checkApiHealth } from '@/lib/resilientApi';
import { checkSocketHealth, ensureSocketConnection } from '@/lib/resilientSocket';

export type ApiHealthStatus = {
  apiOnline: boolean;
  socketOnline: boolean;
  lastCheck: number;
  error?: string;
}

type UseApiHealthConfig = {
  checkInterval?: number; // ms
  autoCheck?: boolean;
}

const DEFAULT_CONFIG: UseApiHealthConfig = {
  checkInterval: 30000, // 30 —Å–µ–∫—É–Ω–¥
  autoCheck: true,
};

export const useApiHealth = (config: UseApiHealthConfig = {}) => {
  const { checkInterval, autoCheck } = { ...DEFAULT_CONFIG, ...config };
  
  const [status, setStatus] = useState<ApiHealthStatus>({
    apiOnline: false,
    socketOnline: false,
    lastCheck: 0,
  });

  const [isChecking, setIsChecking] = useState(false);

  const checkHealth = useCallback(async () => {
    setIsChecking(true);
    
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º API –∏ Socket –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ
      const [apiHealthy, socketHealthy] = await Promise.allSettled([
        checkApiHealth(),
        Promise.resolve(checkSocketHealth()),
      ]);

      const newStatus: ApiHealthStatus = {
        apiOnline: apiHealthy.status === 'fulfilled' ? apiHealthy.value : false,
        socketOnline: socketHealthy.status === 'fulfilled' ? socketHealthy.value : false,
        lastCheck: Date.now(),
      };

      // –ï—Å–ª–∏ –µ—Å—Ç—å –ø—Ä–æ–±–ª–µ–º—ã, –¥–æ–±–∞–≤–ª—è–µ–º —Å–æ–æ–±—â–µ–Ω–∏–µ –æ–± –æ—à–∏–±–∫–µ
      if (!newStatus.apiOnline || !newStatus.socketOnline) {
        const issues = [];
        if (!newStatus.apiOnline) issues.push('API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω');
        if (!newStatus.socketOnline) issues.push('WebSocket –æ—Ç–∫–ª—é—á–µ–Ω');
        newStatus.error = issues.join(', ');
      }

      setStatus(newStatus);
    } catch (error) {
      setStatus(prev => ({
        ...prev,
        apiOnline: false,
        socketOnline: false,
        lastCheck: Date.now(),
        error: error instanceof Error ? error.message : '–û—à–∏–±–∫–∞ –ø—Ä–æ–≤–µ—Ä–∫–∏',
      }));
    } finally {
      setIsChecking(false);
    }
  }, []);

  // –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è
  const attemptReconnect = useCallback(async () => {
    console.log('üîÑ –ü–æ–ø—ã—Ç–∫–∞ –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–ª–µ–Ω–∏—è —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–π...');
    
    try {
      // –ü—ã—Ç–∞–µ–º—Å—è –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å Socket
      await ensureSocketConnection();
      console.log('‚úÖ Socket –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω');
      
      // –ü–µ—Ä–µ–ø—Ä–æ–≤–µ—Ä—è–µ–º —Å—Ç–∞—Ç—É—Å
      void checkHealth();
    } catch (error) {
      console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –≤–æ—Å—Å—Ç–∞–Ω–æ–≤–∏—Ç—å —Å–æ–µ–¥–∏–Ω–µ–Ω–∏—è:', error);
    }
  }, [checkHealth]);

  // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç–∞—Ç—É—Å–∞
  useEffect(() => {
    if (!autoCheck) return;

    // –ü–µ—Ä–≤–æ–Ω–∞—á–∞–ª—å–Ω–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    void checkHealth();

    // –ü–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞
    const interval = setInterval(() => void checkHealth(), checkInterval);

    return () => { clearInterval(interval); };
  }, [autoCheck, checkHealth, checkInterval]);

  return {
    status,
    isChecking,
    checkHealth,
    attemptReconnect,
    // –í—Å–ø–æ–º–æ–≥–∞—Ç–µ–ª—å–Ω—ã–µ –≥–µ—Ç—Ç–µ—Ä—ã
    isHealthy: status.apiOnline && status.socketOnline,
    hasIssues: !status.apiOnline || !status.socketOnline,
    lastCheckAgo: status.lastCheck ? Date.now() - status.lastCheck : null,
  };
};