import { useEffect, useRef } from 'react'
import { useAppDispatch } from '@/app/hooks'
import { fetchBinanceStats } from '@/app/binanceSlice'

type UseChartForceUpdatesOptions = {
  /** –°–∏–º–≤–æ–ª –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è (–Ω–∞–ø—Ä–∏–º–µ—Ä BTCUSDT) */
  symbol: string
  /** –í–∫–ª—é—á–µ–Ω –ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º */
  enabled?: boolean
  /** –ò–Ω—Ç–µ—Ä–≤–∞–ª –≤ –º–∏–ª–ª–∏—Å–µ–∫—É–Ω–¥–∞—Ö (–ø–æ —É–º–æ–ª—á–∞–Ω–∏—é 1000–º—Å) */
  interval?: number
}

/**
 * –°–ø–µ—Ü–∏–∞–ª—å–Ω—ã–π —Ö—É–∫ –¥–ª—è –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ì–û –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–Ω–Ω—ã—Ö –≥—Ä–∞—Ñ–∏–∫–æ–≤ –∫–∞–∂–¥—É—é —Å–µ–∫—É–Ω–¥—É.
 * –†–∞–±–æ—Ç–∞–µ—Ç –ø–∞—Ä–∞–ª–ª–µ–ª—å–Ω–æ —Å Socket –∏ –≥–∞—Ä–∞–Ω—Ç–∏—Ä—É–µ—Ç –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –¥–∞–∂–µ –µ—Å–ª–∏ Socket –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç.
 */
export const useChartForceUpdates = (options: UseChartForceUpdatesOptions) => {
  const {
    symbol,
    enabled = true,
    interval = 1000 // 1 —Å–µ–∫—É–Ω–¥–∞
  } = options

  const dispatch = useAppDispatch()
  const intervalRef = useRef<NodeJS.Timeout | null>(null)
  const isActiveRef = useRef<boolean>(true)

  useEffect(() => {
    isActiveRef.current = true
    
    if (!enabled || !symbol) {
      if (intervalRef.current) {
        clearInterval(intervalRef.current)
        intervalRef.current = null
      }
      return
    }

    console.log(`üî• –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–´–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ –¥–ª—è ${symbol} –∫–∞–∂–¥—ã–µ ${interval.toString()}–º—Å`)

    // –ù–µ–º–µ–¥–ª–µ–Ω–Ω–æ–µ –ø–µ—Ä–≤–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ
    void dispatch(fetchBinanceStats(symbol)).catch((err: unknown) => {
      console.warn(`–û—à–∏–±–∫–∞ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–≥–æ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è ${symbol}:`, err)
    })

    // –£—Å—Ç–∞–Ω–æ–≤–∫–∞ –∏–Ω—Ç–µ—Ä–≤–∞–ª–∞ –¥–ª—è –ø–µ—Ä–∏–æ–¥–∏—á–µ—Å–∫–∏—Ö –æ–±–Ω–æ–≤–ª–µ–Ω–∏–π
    intervalRef.current = setInterval(() => {
      if (!isActiveRef.current) return

      void dispatch(fetchBinanceStats(symbol)).unwrap().then(() => {
        console.log(`‚úÖ –ì—Ä–∞—Ñ–∏–∫ –æ–±–Ω–æ–≤–ª–µ–Ω: ${symbol} –≤ ${new Date().toLocaleTimeString()}`)
      }).catch((error: unknown) => {
        console.warn(`‚ùå –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –≥—Ä–∞—Ñ–∏–∫–∞ ${symbol}:`, error)
      })
    }, interval)

    return () => {
      if (intervalRef.current) {
        clearInterval(intervalRef.current)
        intervalRef.current = null
      }
    }
  }, [symbol, enabled, interval, dispatch])

  // Cleanup –ø—Ä–∏ —Ä–∞–∑–º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    return () => {
      isActiveRef.current = false
      if (intervalRef.current) {
        clearInterval(intervalRef.current)
        intervalRef.current = null
      }
    }
  }, [])

  return {
    /** –ê–∫—Ç–∏–≤–µ–Ω –ª–∏ –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω—ã–π —Ä–µ–∂–∏–º */
    isForceUpdating: enabled && !!symbol
  }
}

export default useChartForceUpdates