import { useState, useCallback, useEffect } from 'react';
import type { Task} from '@/services/taskService';
import { TaskService } from '@/services/taskService';
import { useAppDispatch } from '@/app/hooks';
import { forceUserUpdate } from '@/app/userSlice';
import { fetchUserDataNoCache } from '@/lib/noCacheApi';

export function useTasks() {
  const [tasks, setTasks] = useState<Task[]>([]);
  const [isLoading, setIsLoading] = useState(true);
  const [error, setError] = useState<string | null>(null);
  const dispatch = useAppDispatch();

  // –ü—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –¥–∞–Ω–Ω—ã—Ö –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
  const forceUpdateUser = useCallback(async () => {
    try {
      console.log('[useTasks] –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û–ï –æ–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è');
      const response = await fetchUserDataNoCache();
      if (response.ok) {
        const userData = await response.json();
        dispatch(forceUserUpdate(userData));
        console.log('[useTasks] –ü–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å –æ–±–Ω–æ–≤–ª–µ–Ω:', { coins: userData.coins, balance: userData.balance });
      }
    } catch (error) {
      console.error('[useTasks] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è:', error);
    }
  }, [dispatch]);

  // –ó–∞–≥—Ä—É–∑–∫–∞ –∑–∞–¥–∞–Ω–∏–π
  const loadTasks = useCallback(async () => {
    try {
      setError(null);
      const tasksData = await TaskService.getTasks();
      setTasks(tasksData.filter(task => task.status !== 'completed'));
      console.log(`[useTasks] –ó–∞–≥—Ä—É–∂–µ–Ω–æ ${tasksData.length} –∑–∞–¥–∞–Ω–∏–π`);
    } catch (err) {
      console.error('[useTasks] –û—à–∏–±–∫–∞ –∑–∞–≥—Ä—É–∑–∫–∏ –∑–∞–¥–∞–Ω–∏–π:', err);
      setError(err instanceof Error ? err.message : 'Failed to load tasks');
      setTasks([]);
    } finally {
      setIsLoading(false);
    }
  }, []);

  // –ó–∞–≤–µ—Ä—à–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏—è
  const completeTask = useCallback(async (taskId: string): Promise<{
    wheelResult?: { prize: number; index: number; label: string };
  }> => {
    console.log(`[useTasks] –ó–∞–≤–µ—Ä—à–∞–µ–º –∑–∞–¥–∞–Ω–∏–µ: ${taskId}`);
    
    try {
      setError(null);
      
      const result = await TaskService.completeTask(taskId);
      
      if (!result.success) {
        throw new Error(result.error ?? 'Failed to complete task');
      }

      console.log(`[useTasks] –ó–∞–¥–∞–Ω–∏–µ ${taskId} –∑–∞–≤–µ—Ä—à–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ`);

      // –õ–æ–≥–∏—Ä—É–µ–º wheelResult –µ—Å–ª–∏ –µ—Å—Ç—å
      if (result.wheelResult) {
        console.log(`[useTasks] üé° –ü–æ–ª—É—á–µ–Ω wheelResult:`, result.wheelResult);
      }

      // –ú–ì–ù–û–í–ï–ù–ù–û —É–¥–∞–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –∏–∑ —Å–ø–∏—Å–∫–∞
      setTasks(prev => {
        const newTasks = prev.filter(task => task.id !== taskId);
        if (result.newTask) {
          newTasks.push(result.newTask);
        }
        return newTasks;
      });

      // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await forceUpdateUser();
      
      console.log(`[useTasks] –í—Å–µ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≤–µ—Ä—à–µ–Ω—ã –¥–ª—è –∑–∞–¥–∞–Ω–∏—è ${taskId}`);
      
      // –í–æ–∑–≤—Ä–∞—â–∞–µ–º wheelResult –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏ –≤ UI
      return {
        wheelResult: result.wheelResult
      };
      
    } catch (err) {
      console.error('[useTasks] –û—à–∏–±–∫–∞ –∑–∞–≤–µ—Ä—à–µ–Ω–∏—è –∑–∞–¥–∞–Ω–∏—è:', err);
      setError(err instanceof Error ? err.message : 'Failed to complete task');
      return {};
    }
  }, [forceUpdateUser]);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –ø—Ä–æ–≥—Ä–µ—Å—Å–∞
  const updateTaskProgress = useCallback(async (taskId: string, progress: number): Promise<void> => {
    console.log(`[useTasks] –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–¥–∞–Ω–∏—è ${taskId}: ${progress}`);
    
    try {
      setError(null);
      
      const result = await TaskService.updateTaskProgress(taskId, progress);
      
      // –ú–ì–ù–û–í–ï–ù–ù–û –æ–±–Ω–æ–≤–ª—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ
      setTasks(prev => {
        return prev.map(task => {
          if (task.id === taskId) {
            return {
              ...result.task,
              isCompleted: result.isCompleted,
              rewardClaimed: result.rewardClaimed
            };
          }
          return task;
        });
      });

      // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û –æ–±–Ω–æ–≤–ª—è–µ–º –¥–∞–Ω–Ω—ã–µ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—è
      await forceUpdateUser();

      console.log(`[useTasks] –ü—Ä–æ–≥—Ä–µ—Å—Å –∑–∞–¥–∞–Ω–∏—è ${taskId} –æ–±–Ω–æ–≤–ª–µ–Ω`);
      
    } catch (err) {
      console.error('[useTasks] –û—à–∏–±–∫–∞ –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –ø—Ä–æ–≥—Ä–µ—Å—Å–∞:', err);
      const errorMessage = err instanceof Error ? err.message : 'Failed to update task progress';
      
      if (!(errorMessage.includes('–ó–∞–¥–∞–Ω–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ') || errorMessage.includes('Task not found'))) {
        setError(errorMessage);
      }
    }
  }, [forceUpdateUser]);

  // –ó–∞–º–µ–Ω–∞ –∑–∞–¥–∞–Ω–∏—è
  const replaceTask = useCallback(async (taskId: string): Promise<boolean> => {
    console.log(`[useTasks] –ó–∞–º–µ–Ω—è–µ–º –∑–∞–¥–∞–Ω–∏–µ: ${taskId}`);
    
    try {
      setError(null);
      
      const result = await TaskService.replaceTask(taskId);
      
      if (!result.success) {
        throw new Error(result.error ?? 'Failed to replace task');
      }

      // –ú–ì–ù–û–í–ï–ù–ù–û –∑–∞–º–µ–Ω—è–µ–º –∑–∞–¥–∞–Ω–∏–µ –≤ —Å–ø–∏—Å–∫–µ
      setTasks(prev => {
        const newTasks = prev.filter(task => task.id !== taskId);
        if (result.newTask) {
          newTasks.push(result.newTask);
        }
        return newTasks;
      });

      console.log(`[useTasks] –ó–∞–¥–∞–Ω–∏–µ ${taskId} –∑–∞–º–µ–Ω–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ`);
      return true;
      
    } catch (err) {
      console.error('[useTasks] –û—à–∏–±–∫–∞ –∑–∞–º–µ–Ω—ã –∑–∞–¥–∞–Ω–∏—è:', err);
      setError(err instanceof Error ? err.message : 'Failed to replace task');
      return false;
    }
  }, []);

  // –û–±–Ω–æ–≤–ª–µ–Ω–∏–µ –∑–∞–¥–∞–Ω–∏–π
  const refreshTasks = useCallback(() => {
    console.log('[useTasks] –û–±–Ω–æ–≤–ª—è–µ–º —Å–ø–∏—Å–æ–∫ –∑–∞–¥–∞–Ω–∏–π');
    void loadTasks();
  }, [loadTasks]);

  // –û—á–∏—Å—Ç–∫–∞ –æ—à–∏–±–∫–∏
  const clearError = useCallback(() => {
    setError(null);
  }, []);

  // –ó–∞–≥—Ä—É–∂–∞–µ–º –∑–∞–¥–∞–Ω–∏—è –ø—Ä–∏ –º–æ–Ω—Ç–∏—Ä–æ–≤–∞–Ω–∏–∏
  useEffect(() => {
    void loadTasks();
  }, [loadTasks]);

  return {
    tasks,
    isLoading,
    error,
    completeTask,
    updateTaskProgress,
    replaceTask,
    refreshTasks,
    clearError,
    // Legacy
    handleUpdateProgress: updateTaskProgress,
    handleReplaceTask: replaceTask,
    handleClaimReward: completeTask,
  };
}