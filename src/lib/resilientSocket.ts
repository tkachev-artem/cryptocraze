// Socket.IO completely removed for stability - using pure REST API only
export type Socket = {
  connected: boolean;
  connect: () => void;
  disconnect: () => void;
  on: (event: string, callback: Function) => void;
  off: (event: string, callback?: Function) => void;
  emit: (event: string, data?: any) => void;
  id?: string;
}

// –¢–∏–ø—ã –¥–ª—è Socket —Å–æ–±—ã—Ç–∏–π
export type SocketConfig = {
  autoConnect: boolean;
  reconnection: boolean;
  reconnectionAttempts: number;
  reconnectionDelay: number;
  reconnectionDelayMax: number;
  timeout: number;
  forceNew: boolean;
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Socket.IO
const DEFAULT_SOCKET_CONFIG: SocketConfig = {
  autoConnect: false,
  reconnection: true,
  reconnectionAttempts: 10, // –£–º–µ–Ω—å—à–∏–ª —Å 20 –¥–æ 10
  reconnectionDelay: 1000,  // –£–≤–µ–ª–∏—á–∏–ª –±–∞–∑–æ–≤—É—é –∑–∞–¥–µ—Ä–∂–∫—É
  reconnectionDelayMax: 5000,
  timeout: 10000, // –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è 10 —Å–µ–∫—É–Ω–¥
  forceNew: false,
};

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ origin –¥–ª—è Socket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
const resolveSocketOrigin = (): string => {
  const env = import.meta.env as { 
    VITE_API_SERVER?: string; 
    VITE_API_BASE_URL?: string; 
    VITE_API_PROXY_TARGET?: string;
    VITE_SOCKET_SERVER?: string;
  };
  
  // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è socket —Å–µ—Ä–≤–µ—Ä–∞
  const candidate = env.VITE_SOCKET_SERVER ?? env.VITE_API_SERVER ?? env.VITE_API_BASE_URL ?? env.VITE_API_PROXY_TARGET;
  
  if (candidate && /^https?:\/\//i.test(candidate)) {
    try {
      const url = new URL(candidate);
      return url.origin;
    } catch {
      console.warn('–ù–µ–≤–µ—Ä–Ω—ã–π URL –¥–ª—è socket —Å–µ—Ä–≤–µ—Ä–∞:', candidate);
    }
  }
  
  return window.location.origin;
};

const SOCKET_ORIGIN = resolveSocketOrigin();
const SOCKET_PATH = (import.meta.env as { VITE_SOCKET_PATH?: string }).VITE_SOCKET_PATH ?? '/socket.io';

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
const connectionState = {
  isConnecting: false,
  isHealthy: false,
  lastConnectAttempt: 0,
  connectAttempts: 0,
  maxConnectAttempts: 5,
};

// Socket.IO removed - return stub socket
export const createResilientSocket = (config: Partial<SocketConfig> = {}): Socket => {
  console.log('üö´ Socket.IO removed - using REST API only');
  
  const socket: Socket = {
    connected: false,
    id: 'stub-socket',
    connect: () => console.log('üö´ Socket.IO removed - using REST API only'),
    disconnect: () => console.log('üö´ Socket.IO removed - using REST API only'),
    on: () => console.log('üö´ Socket.IO removed - using REST API only'),
    off: () => console.log('üö´ Socket.IO removed - using REST API only'),
    emit: () => console.log('üö´ Socket.IO removed - using REST API only')
  };

  return socket;
};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Socket
export const resilientSocket = createResilientSocket();

// Socket.IO removed - return stub socket immediately
export const ensureSocketConnection = (): Promise<Socket> => {
  console.log('üö´ Socket.IO removed - using REST API only');
  return Promise.resolve(resilientSocket);
};

// Socket.IO removed - always return false
export const checkSocketHealth = (): boolean => {
  return false;
};

// Socket.IO removed - nothing to disconnect
export const disconnectSocket = (): void => {
  console.log('üö´ Socket.IO removed - nothing to disconnect');
};

// Socket.IO removed - return stub unsubscribe function
export const subscribeToSocketEvent = (
  event: string,
  handler: (data: unknown) => void,
  options: { autoConnect?: boolean } = {}
): Promise<() => void> => {
  console.log('üö´ Socket.IO removed - using REST API only');
  return Promise.resolve(() => {});
};

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export { resilientSocket as socket };
export default resilientSocket;