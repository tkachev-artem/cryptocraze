import type { Socket } from 'socket.io-client';
import { io } from 'socket.io-client';

// –¢–∏–ø—ã –¥–ª—è Socket —Å–æ–±—ã—Ç–∏–π
export type SocketConfig = {
  autoConnect: boolean;
  reconnection: boolean;
  reconnectionAttempts: number;
  reconnectionDelay: number;
  reconnectionDelayMax: number;
  timeout: number;
  forceNew: boolean;
}

// –£–ª—É—á—à–µ–Ω–Ω–∞—è –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—è Socket.IO
const DEFAULT_SOCKET_CONFIG: SocketConfig = {
  autoConnect: false,
  reconnection: true,
  reconnectionAttempts: 10, // –£–º–µ–Ω—å—à–∏–ª —Å 20 –¥–æ 10
  reconnectionDelay: 1000,  // –£–≤–µ–ª–∏—á–∏–ª –±–∞–∑–æ–≤—É—é –∑–∞–¥–µ—Ä–∂–∫—É
  reconnectionDelayMax: 5000,
  timeout: 10000, // –¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è 10 —Å–µ–∫—É–Ω–¥
  forceNew: false,
};

// –û–ø—Ä–µ–¥–µ–ª–µ–Ω–∏–µ –±–∞–∑–æ–≤–æ–≥–æ origin –¥–ª—è Socket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
const resolveSocketOrigin = (): string => {
  const env = import.meta.env as { 
    VITE_API_SERVER?: string; 
    VITE_API_BASE_URL?: string; 
    VITE_API_PROXY_TARGET?: string;
    VITE_SOCKET_SERVER?: string;
  };
  
  // –ü—Ä–∏–æ—Ä–∏—Ç–µ—Ç –¥–ª—è socket —Å–µ—Ä–≤–µ—Ä–∞
  const candidate = env.VITE_SOCKET_SERVER ?? env.VITE_API_SERVER ?? env.VITE_API_BASE_URL ?? env.VITE_API_PROXY_TARGET;
  
  if (candidate && /^https?:\/\//i.test(candidate)) {
    try {
      const url = new URL(candidate);
      return url.origin;
    } catch {
      console.warn('–ù–µ–≤–µ—Ä–Ω—ã–π URL –¥–ª—è socket —Å–µ—Ä–≤–µ—Ä–∞:', candidate);
    }
  }
  
  return window.location.origin;
};

const SOCKET_ORIGIN = resolveSocketOrigin();
const SOCKET_PATH = (import.meta.env as { VITE_SOCKET_PATH?: string }).VITE_SOCKET_PATH ?? '/socket.io';

// –°–æ—Å—Ç–æ—è–Ω–∏–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
const connectionState = {
  isConnecting: false,
  isHealthy: false,
  lastConnectAttempt: 0,
  connectAttempts: 0,
  maxConnectAttempts: 5,
};

// –°–æ–∑–¥–∞–Ω–∏–µ —É–ª—É—á—à–µ–Ω–Ω–æ–≥–æ Socket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
export const createResilientSocket = (config: Partial<SocketConfig> = {}): Socket => {
  const socketConfig = { ...DEFAULT_SOCKET_CONFIG, ...config };
  
  console.log(`–°–æ–∑–¥–∞–Ω–∏–µ Socket –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è –∫: ${String(SOCKET_ORIGIN)}${String(SOCKET_PATH)}`);
  
  const socket: Socket = io(SOCKET_ORIGIN, {
    path: SOCKET_PATH,
    ...socketConfig,
    // FORCE POLLING-ONLY –¥–ª—è Cloudflare tunnel —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
    transports: ['polling'], // –ü–†–ò–ù–£–î–ò–¢–ï–õ–¨–ù–û —Ç–æ–ª—å–∫–æ polling - Cloudflare –±–ª–æ–∫–∏—Ä—É–µ—Ç WebSocket
    upgrade: false,
    // –î–æ–ø–æ–ª–Ω–∏—Ç–µ–ª—å–Ω—ã–µ –Ω–∞—Å—Ç—Ä–æ–π–∫–∏ –¥–ª—è –Ω–∞–¥–µ–∂–Ω–æ—Å—Ç–∏
    randomizationFactor: 0.5,
  });

  // –û–±—Ä–∞–±–æ—Ç—á–∏–∫–∏ —Å–æ–±—ã—Ç–∏–π –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
  socket.on('connect', () => {
    console.log('‚úÖ Socket –ø–æ–¥–∫–ª—é—á–µ–Ω:', String(socket.id));
    connectionState.isConnecting = false;
    connectionState.isHealthy = true;
    connectionState.connectAttempts = 0;
  });

  socket.on('connect_error', (error) => {
    console.warn('‚ùå –û—à–∏–±–∫–∞ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Socket:', error.message);
    connectionState.isConnecting = false;
    connectionState.isHealthy = false;
    connectionState.connectAttempts++;
    
    // –ï—Å–ª–∏ —Å–ª–∏—à–∫–æ–º –º–Ω–æ–≥–æ –ø–æ–ø—ã—Ç–æ–∫, –≤—Ä–µ–º–µ–Ω–Ω–æ –æ—Å—Ç–∞–Ω–æ–≤–∏–º
    if (connectionState.connectAttempts >= connectionState.maxConnectAttempts) {
      console.log('üîÑ –î–æ—Å—Ç–∏–≥–Ω—É—Ç –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è, –ø–∞—É–∑–∞...');
      setTimeout(() => {
        connectionState.connectAttempts = 0;
        console.log('üîÑ –°–±—Ä–æ—Å —Å—á–µ—Ç—á–∏–∫–∞ –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è');
      }, 30000); // –ü–∞—É–∑–∞ 30 —Å–µ–∫—É–Ω–¥
    }
  });

  socket.on('disconnect', (reason) => {
    console.log('üîå Socket –æ—Ç–∫–ª—é—á–µ–Ω:', reason);
    connectionState.isHealthy = false;
    
    // –ê–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —Ç–æ–ª—å–∫–æ –¥–ª—è –æ–ø—Ä–µ–¥–µ–ª–µ–Ω–Ω—ã—Ö –ø—Ä–∏—á–∏–Ω
    if (reason === 'io server disconnect') {
      // –°–µ—Ä–≤–µ—Ä –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∏–ª - –Ω–µ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏
      console.log('üõë –°–µ—Ä–≤–µ—Ä –ø—Ä–∏–Ω—É–¥–∏—Ç–µ–ª—å–Ω–æ –æ—Ç–∫–ª—é—á–∏–ª Socket');
    }
  });

  socket.on('reconnect', (attemptNumber) => {
    console.log(`üîÑ Socket –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω –ø–æ—Å–ª–µ ${String(attemptNumber)} –ø–æ–ø—ã—Ç–æ–∫`);
    connectionState.isHealthy = true;
  });

  socket.on('reconnect_attempt', (attemptNumber) => {
    console.log(`üîÑ –ü–æ–ø—ã—Ç–∫–∞ –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è #${String(attemptNumber)}`);
  });

  socket.on('reconnect_failed', () => {
    console.error('‚ùå –ù–µ —É–¥–∞–ª–æ—Å—å –ø–µ—Ä–µ–ø–æ–¥–∫–ª—é—á–∏—Ç—å Socket –ø–æ—Å–ª–µ –≤—Å–µ—Ö –ø–æ–ø—ã—Ç–æ–∫');
    connectionState.isHealthy = false;
  });

  return socket;
};

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π —ç–∫–∑–µ–º–ø–ª—è—Ä Socket
export const resilientSocket = createResilientSocket();

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –±–µ–∑–æ–ø–∞—Å–Ω–æ–≥–æ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
export const ensureSocketConnection = (): Promise<Socket> => {
  return new Promise((resolve, reject) => {
    // –ï—Å–ª–∏ —É–∂–µ –ø–æ–¥–∫–ª—é—á–µ–Ω
    if (resilientSocket.connected) {
      resolve(resilientSocket);
      return;
    }

    // –ï—Å–ª–∏ —É–∂–µ –ø–æ–¥–∫–ª—é—á–∞–µ—Ç—Å—è
    if (connectionState.isConnecting) {
      // –ñ–¥–µ–º —Ä–µ–∑—É–ª—å—Ç–∞—Ç–∞ —Ç–µ–∫—É—â–µ–π –ø–æ–ø—ã—Ç–∫–∏
      const timeout = setTimeout(() => {
        reject(new Error('–¢–∞–π–º–∞—É—Ç –æ–∂–∏–¥–∞–Ω–∏—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Socket'));
      }, 15000);

      const onConnect = () => {
        clearTimeout(timeout);
        resilientSocket.off('connect', onConnect);
        resilientSocket.off('connect_error', onError);
        resolve(resilientSocket);
      };

      const onError = (error: Error) => {
        clearTimeout(timeout);
        resilientSocket.off('connect', onConnect);
        resilientSocket.off('connect_error', onError);
        reject(error);
      };

      resilientSocket.once('connect', onConnect);
      resilientSocket.once('connect_error', onError);
      return;
    }

    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫
    if (connectionState.connectAttempts >= connectionState.maxConnectAttempts) {
      reject(new Error('–ü—Ä–µ–≤—ã—à–µ–Ω –ª–∏–º–∏—Ç –ø–æ–ø—ã—Ç–æ–∫ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Socket'));
      return;
    }

    // –ù–∞—á–∏–Ω–∞–µ–º –Ω–æ–≤–æ–µ –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    connectionState.isConnecting = true;
    connectionState.lastConnectAttempt = Date.now();

    const timeout = setTimeout(() => {
      connectionState.isConnecting = false;
      reject(new Error('–¢–∞–π–º–∞—É—Ç –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è Socket'));
    }, 15000);

    const onConnect = () => {
      clearTimeout(timeout);
      resilientSocket.off('connect', onConnect);
      resilientSocket.off('connect_error', onError);
      resolve(resilientSocket);
    };

    const onError = (error: Error) => {
      clearTimeout(timeout);
      connectionState.isConnecting = false;
      resilientSocket.off('connect', onConnect);
      resilientSocket.off('connect_error', onError);
      reject(error);
    };

    resilientSocket.once('connect', onConnect);
    resilientSocket.once('connect_error', onError);
    
    resilientSocket.connect();
  });
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ –∑–¥–æ—Ä–æ–≤—å—è –ø–æ–¥–∫–ª—é—á–µ–Ω–∏—è
export const checkSocketHealth = (): boolean => {
  return resilientSocket.connected && connectionState.isHealthy;
};

// –§—É–Ω–∫—Ü–∏—è –¥–ª—è –º—è–≥–∫–æ–≥–æ –æ—Ç–∫–ª—é—á–µ–Ω–∏—è
export const disconnectSocket = (): void => {
  if (resilientSocket.connected) {
    console.log('üîå –û—Ç–∫–ª—é—á–µ–Ω–∏–µ Socket...');
    resilientSocket.disconnect();
  }
  connectionState.isConnecting = false;
  connectionState.isHealthy = false;
};

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è –ø–æ–¥–ø–∏—Å–∫–∏ –Ω–∞ —Å–æ–±—ã—Ç–∏—è —Å –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–∏–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ–º
export const subscribeToSocketEvent = (
  event: string,
  handler: (data: unknown) => void,
  options: { autoConnect?: boolean } = {}
): Promise<() => void> => {
  const { autoConnect = true } = options;

  return new Promise((resolve, reject) => {
    const subscribe = () => {
      resilientSocket.on(event, handler);
      const unsubscribe = () => {
        resilientSocket.off(event, handler);
      };
      resolve(unsubscribe);
    };

    if (autoConnect && !resilientSocket.connected) {
      ensureSocketConnection()
        .then(subscribe)
        .catch(reject);
    } else {
      subscribe();
    }
  });
};

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –æ–±—Ä–∞—Ç–Ω–æ–π —Å–æ–≤–º–µ—Å—Ç–∏–º–æ—Å—Ç–∏
export { resilientSocket as socket };
export default resilientSocket;