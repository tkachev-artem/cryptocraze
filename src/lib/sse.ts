// Server-Sent Events fallback –¥–ª—è –∫—Ä–∏—Ç–∏—á–µ—Å–∫–∏—Ö —Ç–æ—Ä–≥–æ–≤—ã—Ö –æ–ø–µ—Ä–∞—Ü–∏–π
// –ò—Å–ø–æ–ª—å–∑—É–µ—Ç—Å—è –∫–æ–≥–¥–∞ Socket.IO –ø–æ–ª–Ω–æ—Å—Ç—å—é –±–ª–æ–∫–∏—Ä—É–µ—Ç—Å—è

class SSETradingClient {
  private eventSource: EventSource | null = null;
  private reconnectAttempts = 0;
  private maxReconnects = 50;
  private reconnectDelay = 1000;
  private listeners: { [key: string]: ((data: any) => void)[] } = {};

  constructor(private baseUrl: string) {}

  connect() {
    if (this.eventSource) {
      this.eventSource.close();
    }

    const url = `${this.baseUrl}/api/sse/trading`;
    console.log('üîÑ SSE –¢–û–†–ì–û–í–û–ï –ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï:', url);
    
    this.eventSource = new EventSource(url, { withCredentials: true });

    this.eventSource.onopen = () => {
      console.log('‚úÖ SSE –¢–û–†–ì–û–í–û–ï –°–û–ï–î–ò–ù–ï–ù–ò–ï –£–°–¢–ê–ù–û–í–õ–ï–ù–û');
      this.reconnectAttempts = 0;
    };

    this.eventSource.onerror = (error) => {
      console.error('üî¥ SSE –û–®–ò–ë–ö–ê:', error);
      this.handleReconnect();
    };

    this.eventSource.onmessage = (event) => {
      try {
        const data = JSON.parse(event.data);
        this.emit(data.type || 'message', data);
      } catch (err) {
        console.error('SSE Parse error:', err);
      }
    };

    // –¢–æ—Ä–≥–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è
    this.eventSource.addEventListener('price_update', (event: any) => {
      try {
        const data = JSON.parse(event.data);
        this.emit('price_update', data);
      } catch (err) {
        console.error('SSE price_update error:', err);
      }
    });

    this.eventSource.addEventListener('trade_update', (event: any) => {
      try {
        const data = JSON.parse(event.data);
        this.emit('trade_update', data);
      } catch (err) {
        console.error('SSE trade_update error:', err);
      }
    });
  }

  private handleReconnect() {
    if (this.reconnectAttempts >= this.maxReconnects) {
      console.error('üî¥ SSE: –ú–ê–ö–°–ò–ú–£–ú –ü–û–ü–´–¢–û–ö –ü–ï–†–ï–ü–û–î–ö–õ–Æ–ß–ï–ù–ò–Ø –î–û–°–¢–ò–ì–ù–£–¢');
      return;
    }

    this.reconnectAttempts++;
    const delay = Math.min(this.reconnectDelay * this.reconnectAttempts, 10000);
    
    console.log(`üîÑ SSE –ü–ï–†–ï–ü–û–î–ö–õ–Æ–ß–ï–ù–ò–ï #${this.reconnectAttempts} —á–µ—Ä–µ–∑ ${delay}ms`);
    
    setTimeout(() => {
      this.connect();
    }, delay);
  }

  on(event: string, callback: (data: any) => void) {
    if (!this.listeners[event]) {
      this.listeners[event] = [];
    }
    this.listeners[event].push(callback);
  }

  private emit(event: string, data: any) {
    if (this.listeners[event]) {
      this.listeners[event].forEach(callback => callback(data));
    }
  }

  disconnect() {
    if (this.eventSource) {
      this.eventSource.close();
      this.eventSource = null;
    }
  }

  get connected() {
    return this.eventSource?.readyState === EventSource.OPEN;
  }
}

// –ì–ª–æ–±–∞–ª—å–Ω—ã–π SSE –∫–ª–∏–µ–Ω—Ç –¥–ª—è —Ç–æ—Ä–≥–æ–≤–ª–∏
export const sseClient = new SSETradingClient(window.location.origin);

// –ê–≤—Ç–æ–ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ –ø—Ä–∏ –∏–º–ø–æ—Ä—Ç–µ
if (typeof window !== 'undefined') {
  sseClient.connect();
}