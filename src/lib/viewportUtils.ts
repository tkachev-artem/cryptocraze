/**
 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –æ–±—Ä–∞–±–æ—Ç—á–∏–∫–∏, –∫–æ—Ç–æ—Ä—ã–µ —Å–±—Ä–∞—Å—ã–≤–∞—é—Ç –∑—É–º (–º–∞—Å—à—Ç–∞–± = 1)
 * –ø–æ—Å–ª–µ –∑–∞–∫—Ä—ã—Ç–∏—è –∫–ª–∞–≤–∏–∞—Ç—É—Ä—ã –∏/–∏–ª–∏ –ø–æ—Ç–µ—Ä–∏ —Ñ–æ–∫—É—Å–∞ –∏–Ω–ø—É—Ç–æ–º.
 * –†–∞–±–æ—Ç–∞–µ—Ç –≤ Safari iOS –∏ Android —á–µ—Ä–µ–∑ visualViewport.
 */
export const installKeyboardZoomFix = (): void => {
  if (typeof document === 'undefined') return;

  const existingMeta = document.querySelector('meta[name="viewport"]');
  const meta: HTMLMetaElement = existingMeta ? existingMeta as HTMLMetaElement : createViewportMeta();

  const baseContent = meta.getAttribute('content') ?? 'width=device-width, initial-scale=1.0';

  const lockZoomContent = 'width=device-width, initial-scale=1, minimum-scale=1, maximum-scale=1, user-scalable=no';

  const temporarilyResetZoom = () => {
    try {
      // –°–Ω–∞—á–∞–ª–∞ –∂–µ—Å—Ç–∫–æ —Ñ–∏–∫—Å–∏—Ä—É–µ–º –º–∞—Å—à—Ç–∞–± –Ω–∞ 1
      meta.setAttribute('content', lockZoomContent);
      // –ó–∞—Ç–µ–º –±—ã—Å—Ç—Ä–æ –≤–æ–∑–≤—Ä–∞—â–∞–µ–º –∏—Å—Ö–æ–¥–Ω–æ–µ —Å–æ–¥–µ—Ä–∂–∏–º–æ–µ, —á—Ç–æ–±—ã –Ω–µ –±–ª–æ–∫–∏—Ä–æ–≤–∞—Ç—å pinch-zoom –Ω–∞–≤—Å–µ–≥–¥–∞
      window.setTimeout(() => {
        meta.setAttribute('content', baseContent);
      }, 250);
    } catch {
      // ignore
    }
  };

  const handleFocusOut = (event: FocusEvent) => {
    const target = event.target as HTMLElement | null;
    // –†–µ–∞–≥–∏—Ä—É–µ–º —Ç–æ–ª—å–∫–æ –µ—Å–ª–∏ —É—Ö–æ–¥ —Ñ–æ–∫—É—Å–∞ –±—ã–ª —Å –ø–æ–ª–µ–π –≤–≤–æ–¥–∞
    if (!target) return;
    const tag = target.tagName.toLowerCase();
    if (tag === 'input' || tag === 'textarea' || target.getAttribute('contenteditable') === 'true') {
      temporarilyResetZoom();
    }
  };

  const handleVisualViewportResize = () => {
    const vv = window.visualViewport;
    if (!vv) return;
    // –ï—Å–ª–∏ –∫–ª–∞–≤–∏–∞—Ç—É—Ä–∞ —Å–∫—Ä—ã–ª–∞—Å—å (–≤—ã—Å–æ—Ç–∞ –ø–æ—á—Ç–∏ —Ä–∞–≤–Ω–∞ –æ–∫–Ω—É) –∏ –µ—Å—Ç—å –∑—É–º ‚Äî —Å–±—Ä–æ—Å–∏–º
    const heightRatio = vv.height / window.innerHeight;
    const isKeyboardProbablyHidden = heightRatio > 0.9; // —ç–≤—Ä–∏—Å—Ç–∏–∫–∞
    const isZoomed = (vv.scale || 1) > 1.02;
    if (isKeyboardProbablyHidden && isZoomed) {
      temporarilyResetZoom();
    }
  };

  document.addEventListener('focusout', handleFocusOut, true);
  if (window.visualViewport) {
    window.visualViewport.addEventListener('resize', handleVisualViewportResize);
  }
};

/**
 * –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ—Ç –≥–ª–æ–±–∞–ª—å–Ω—ã–µ –≥–≤–∞—Ä–¥—ã –¥–ª—è –∂–µ—Å—Ç–æ–≤, —á—Ç–æ–±—ã –ø—Ä–∏–ª–æ–∂–µ–Ω–∏–µ –≤–µ–ª–æ —Å–µ–±—è –∫–∞–∫ –Ω–∞—Ç–∏–≤–Ω–æ–µ:
 * - –ë–ª–æ–∫–∏—Ä—É–µ—Ç pinch-zoom (iOS gesture* + –º–Ω–æ–≥–æ–∫–∞—Å–∞–Ω–∏–µ)
 * - –ë–ª–æ–∫–∏—Ä—É–µ—Ç double-tap zoom
 * - –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ—Ç –ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ/drag –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é
 */
export const installNativeLikeGestureGuards = (): void => {
  if (typeof window === 'undefined') return;

  // –ë–ª–æ–∫ pinch-zoom –≤ iOS (gesture* —Å–æ–±—ã—Ç–∏—è —Å—É—â–µ—Å—Ç–≤—É—é—Ç —Ç–æ–ª—å–∫–æ –≤ Safari)
  const preventDefault = (e: Event) => {
    try { e.preventDefault(); } catch { /* ignore */ }
  };

  window.addEventListener('gesturestart', preventDefault as EventListener, { passive: false });
  window.addEventListener('gesturechange', preventDefault as EventListener, { passive: false });
  window.addEventListener('gestureend', preventDefault as EventListener, { passive: false });

  // –ú–Ω–æ–≥–æ–∫–∞—Å–∞–Ω–∏–µ –º–æ–∂–µ—Ç –≤—ã–∑—ã–≤–∞—Ç—å –∑—É–º –≤ –Ω–µ–∫–æ—Ç–æ—Ä—ã—Ö –±—Ä–∞—É–∑–µ—Ä–∞—Ö
  const handleTouchStart = (e: TouchEvent) => {
    if (e.touches.length > 1) {
      e.preventDefault();
    }
  };
  document.addEventListener('touchstart', handleTouchStart, { passive: false });

  // Double-tap zoom (iOS Safari)
  let lastTouchEnd = 0;
  const handleTouchEnd = (e: TouchEvent) => {
    const target = e.target as HTMLElement | null;
    // –í –∏–Ω–ø—É—Ç–∞—Ö –∏ —Ä–µ–¥–∞–∫—Ç–∏—Ä—É–µ–º—ã—Ö —ç–ª–µ–º–µ–Ω—Ç–∞—Ö –Ω–µ –±–ª–æ–∫–∏—Ä—É–µ–º –¥–∞–±–ª-—Ç–∞–ø
    if (target?.closest('input, textarea, [contenteditable="true"]')) {
      lastTouchEnd = Date.now();
      return;
    }
    const now = Date.now();
    if (now - lastTouchEnd <= 300) {
      e.preventDefault();
    }
    lastTouchEnd = now;
  };
  document.addEventListener('touchend', handleTouchEnd, { passive: false });

  // –ü—Ä–µ–¥–æ—Ç–≤—Ä–∞—â–∞–µ–º dragstart –ø–æ —É–º–æ–ª—á–∞–Ω–∏—é (–ø–µ—Ä–µ—Ç–∞—Å–∫–∏–≤–∞–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π/—Å—Å—ã–ª–æ–∫)
  const handleDragStart = (e: DragEvent) => {
    e.preventDefault();
  };
  document.addEventListener('dragstart', handleDragStart);

  // –ë–ª–æ–∫–∏—Ä—É–µ–º edge-swipe –Ω–∞–∑–∞–¥ –æ—Ç –ª–µ–≤–æ–≥–æ –∫—Ä–∞—è –∏ pull-to-refresh –≤–Ω–µ –æ—Å–Ω–æ–≤–Ω–æ–≥–æ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä–∞
  let touchStartX: number | null = null;
  let touchStartY: number | null = null;

  const appScrollContainer = (): HTMLElement | null => {
    const element = document.querySelector('[data-app-scroll="true"]');
    return element as HTMLElement | null;
  }

  const handleGuardTouchStart = (e: TouchEvent) => {
    if (e.touches.length !== 1) return;
    touchStartX = e.touches[0].clientX;
    touchStartY = e.touches[0].clientY;
  };

  const handleGuardTouchMove = (e: TouchEvent) => {
    if (touchStartX === null || touchStartY === null) return;
    const currentX = e.touches[0].clientX;
    const currentY = e.touches[0].clientY;
    const deltaX = currentX - touchStartX;
    const deltaY = currentY - touchStartY;

    const fromLeftEdge = touchStartX <= 18; // –∑–æ–Ω–∞ –∂–µ—Å—Ç–∞ –Ω–∞–∑–∞–¥ –≤ iOS
    if (fromLeftEdge && deltaX > 10) {
      e.preventDefault();
      return;
    }

    const scrollable = appScrollContainer();
    if (scrollable) {
      const atTop = scrollable.scrollTop <= 0;
      if (atTop && deltaY > 10) {
        // pull-to-refresh
        e.preventDefault();
        return;
      }
    } else {
      // –µ—Å–ª–∏ –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä –Ω–µ –Ω–∞–π–¥–µ–Ω ‚Äî –ø–µ—Ä–µ—Å—Ç—Ä–∞—Ö—É–µ–º—Å—è
      if (deltaY > 10) e.preventDefault();
    }
  };

  const handleGuardTouchEnd = () => {
    touchStartX = null;
    touchStartY = null;
  };

  document.addEventListener('touchstart', handleGuardTouchStart, { passive: true });
  document.addEventListener('touchmove', handleGuardTouchMove, { passive: false });
  document.addEventListener('touchend', handleGuardTouchEnd, { passive: true });
};

const createViewportMeta = (): HTMLMetaElement => {
  const m = document.createElement('meta');
  m.name = 'viewport';
  m.content = 'width=device-width, initial-scale=1.0';
  document.head.appendChild(m);
  return m;
};

/**
 * –û–ø—Ä–µ–¥–µ–ª—è–µ—Ç, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ —É—Å—Ç—Ä–æ–π—Å—Ç–≤–æ —Ç–µ–ª–µ—Ñ–æ–Ω–æ–º (–Ω–µ –ø–ª–∞–Ω—à–µ—Ç –∏ –Ω–µ –¥–µ—Å–∫—Ç–æ–ø).
 * –ü—Ä–æ—Å—Ç–∞—è –ø—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ —Ä–∞–∑–º–µ—Ä—É —ç–∫—Ä–∞–Ω–∞ –∏ —Ç–∞—á—É.
 */
export const isPhoneDevice = (): boolean => {
  if (typeof window === 'undefined') return false;

  // –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä—ã —ç–∫—Ä–∞–Ω–∞
  const screenWidth = window.screen.width;
  const screenHeight = window.screen.height;
  const windowWidth = window.innerWidth;
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º –µ—Å—Ç—å –ª–∏ —Ç–∞—á
  const hasTouch = ('ontouchstart' in window) || (navigator.maxTouchPoints > 0);
  
  // –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ä–∞–∑–º–µ—Ä—ã —ç–∫—Ä–∞–Ω–∞ - —Ç–µ–ª–µ—Ñ–æ–Ω—ã –æ–±—ã—á–Ω–æ –∏–º–µ—é—Ç —à–∏—Ä–∏–Ω—É —ç–∫—Ä–∞–Ω–∞ –¥–æ 768px
  const isSmallScreen = Math.min(screenWidth, screenHeight) <= 768;
  const isVerySmallScreen = windowWidth <= 480;
  
  console.log('üîç Device detection:', {
    screenWidth,
    screenHeight, 
    windowWidth,
    hasTouch,
    isSmallScreen,
    isVerySmallScreen,
    userAgent: navigator.userAgent.substring(0, 100)
  });

  // –ï—Å–ª–∏ —ç–∫—Ä–∞–Ω –º–∞–ª–µ–Ω—å–∫–∏–π –ò –µ—Å—Ç—å —Ç–∞—á - —ç—Ç–æ —Ç–µ–ª–µ—Ñ–æ–Ω
  // –ò–õ–ò –µ—Å–ª–∏ –æ–∫–Ω–æ –æ—á–µ–Ω—å —É–∑–∫–æ–µ (–º–æ–±–∏–ª—å–Ω—ã–π –±—Ä–∞—É–∑–µ—Ä)
  const isPhone = (isSmallScreen && hasTouch) || isVerySmallScreen;
  
  console.log('üîç Device detection result:', isPhone ? 'PHONE' : 'NOT PHONE');
  
  return isPhone;
};

