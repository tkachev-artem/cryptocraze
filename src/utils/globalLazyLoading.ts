// –ì–ª–æ–±–∞–ª—å–Ω–∞—è –Ω–∞—Å—Ç—Ä–æ–π–∫–∞ lazy loading –¥–ª—è –≤—Å–µ—Ö –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
export const setupGlobalLazyLoading = () => {
  console.log('üîß –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –≥–ª–æ–±–∞–ª—å–Ω—ã–π lazy loading –¥–ª—è –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π');

  // –ö—Ä–∏—Ç–∏—á–Ω—ã–µ –ø—É—Ç–∏, –¥–ª—è –∫–æ—Ç–æ—Ä—ã—Ö images –¥–æ–ª–∂–Ω—ã –±—ã—Ç—å eager
  const eagerPaths = ['/home', '/'];
  
  // –ö—Ä–∏—Ç–∏—á–Ω—ã–µ —Å–µ–ª–µ–∫—Ç–æ—Ä—ã –¥–ª—è eager loading
  const eagerSelectors = [
    '[data-critical]',
    '.critical-image',
    // –ù–∞–≤–∏–≥–∞—Ü–∏—è
    'nav img',
    '[role="navigation"] img',
    // –¢–æ–ø –º–µ–Ω—é 
    '.top-menu img',
    // –ê–≤–∞—Ç–∞—Ä—ã –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π
    'img[alt*="avatar"]',
    'img[src*="avatar"]',
    // –õ–æ–≥–æ—Ç–∏–ø—ã
    'img[alt*="logo"]',
    'img[src*="logo"]'
  ];

  // –§—É–Ω–∫—Ü–∏—è –¥–ª—è –æ–±–Ω–æ–≤–ª–µ–Ω–∏—è –∑–∞–≥—Ä—É–∑–∫–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–π
  const updateImageLoading = () => {
    const currentPath = window.location.pathname;
    const isEagerPath = eagerPaths.some(path => currentPath.startsWith(path));
    
    // –ù–∞—Ö–æ–¥–∏–º –≤—Å–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è –±–µ–∑ –∞—Ç—Ä–∏–±—É—Ç–∞ loading
    const images = document.querySelectorAll('img:not([loading])') as NodeListOf<HTMLImageElement>;
    
    images.forEach(img => {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º, —è–≤–ª—è–µ—Ç—Å—è –ª–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏–µ –∫—Ä–∏—Ç–∏—á–Ω—ã–º
      const isEagerImage = eagerSelectors.some(selector => img.matches(selector));
      const shouldBeEager = isEagerPath || isEagerImage;
      
      // –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Å–æ–æ—Ç–≤–µ—Ç—Å—Ç–≤—É—é—â–∏–π –∞—Ç—Ä–∏–±—É—Ç loading
      img.loading = shouldBeEager ? 'eager' : 'lazy';
      
      console.log(`üîß Set ${img.src} loading=${img.loading} (path: ${currentPath}, eager: ${shouldBeEager})`);
    });
  };

  // –û–±–Ω–æ–≤–ª—è–µ–º —Å—É—â–µ—Å—Ç–≤—É—é—â–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
  if (document.readyState === 'loading') {
    document.addEventListener('DOMContentLoaded', updateImageLoading);
  } else {
    updateImageLoading();
  }

  // –ù–∞–±–ª—é–¥–∞–µ–º –∑–∞ –Ω–æ–≤—ã–º–∏ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è–º–∏
  if (typeof MutationObserver !== 'undefined') {
    const observer = new MutationObserver((mutations) => {
      mutations.forEach(mutation => {
        mutation.addedNodes.forEach(node => {
          if (node.nodeType === Node.ELEMENT_NODE) {
            const element = node as Element;
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ–±–∞–≤–ª–µ–Ω–Ω—ã–π —ç–ª–µ–º–µ–Ω—Ç
            if (element.tagName === 'IMG' && !element.hasAttribute('loading')) {
              const img = element as HTMLImageElement;
              const currentPath = window.location.pathname;
              const isEagerPath = eagerPaths.some(path => currentPath.startsWith(path));
              const isEagerImage = eagerSelectors.some(selector => img.matches(selector));
              const shouldBeEager = isEagerPath || isEagerImage;
              
              img.loading = shouldBeEager ? 'eager' : 'lazy';
              console.log(`üîß New image ${img.src} loading=${img.loading}`);
            }
            
            // –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–æ—á–µ—Ä–Ω–∏–µ –∏–∑–æ–±—Ä–∞–∂–µ–Ω–∏—è
            const childImages = element.querySelectorAll('img:not([loading])') as NodeListOf<HTMLImageElement>;
            childImages.forEach(img => {
              const currentPath = window.location.pathname;
              const isEagerPath = eagerPaths.some(path => currentPath.startsWith(path));
              const isEagerImage = eagerSelectors.some(selector => img.matches(selector));
              const shouldBeEager = isEagerPath || isEagerImage;
              
              img.loading = shouldBeEager ? 'eager' : 'lazy';
              console.log(`üîß Child image ${img.src} loading=${img.loading}`);
            });
          }
        });
      });
    });

    observer.observe(document.body, {
      childList: true,
      subtree: true
    });

    console.log('üîß MutationObserver –∞–∫—Ç–∏–≤–µ–Ω –¥–ª—è –∞–≤—Ç–æ–º–∞—Ç–∏—á–µ—Å–∫–æ–≥–æ lazy loading');
  }

  // –û–±–Ω–æ–≤–ª—è–µ–º –ø—Ä–∏ –Ω–∞–≤–∏–≥–∞—Ü–∏–∏ (–¥–ª—è SPA)
  const originalPushState = history.pushState;
  const originalReplaceState = history.replaceState;

  history.pushState = function(...args) {
    originalPushState.apply(history, args);
    setTimeout(updateImageLoading, 100); // –ù–µ–±–æ–ª—å—à–∞—è –∑–∞–¥–µ—Ä–∂–∫–∞ –¥–ª—è —Ä–µ–Ω–¥–µ—Ä–∞
  };

  history.replaceState = function(...args) {
    originalReplaceState.apply(history, args);
    setTimeout(updateImageLoading, 100);
  };

  window.addEventListener('popstate', () => {
    setTimeout(updateImageLoading, 100);
  });

  console.log('‚úÖ –ì–ª–æ–±–∞–ª—å–Ω—ã–π lazy loading –Ω–∞—Å—Ç—Ä–æ–µ–Ω');
};