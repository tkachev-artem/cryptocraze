// –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç AnalyticsLogger
import AnalyticsLogger from './server/middleware/analyticsLogger.ts';

async function testAnalyticsLoggerDirect() {
  console.log('üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º AnalyticsLogger –Ω–∞–ø—Ä—è–º—É—é...');
  
  try {
    console.log('1Ô∏è‚É£ –í—ã–∑—ã–≤–∞–µ–º AnalyticsLogger.logUserEvent...');
    
    await AnalyticsLogger.logUserEvent(
      999999999, // test user ID
      'test_direct_logger',
      {
        test: true,
        timestamp: new Date().toISOString(),
        source: 'direct_test'
      },
      `direct-test-session-${Date.now()}`
    );
    
    console.log('‚úÖ AnalyticsLogger.logUserEvent –≤—ã–ø–æ–ª–Ω–µ–Ω –±–µ–∑ –æ—à–∏–±–æ–∫');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–±—ã—Ç–∏–µ –∑–∞–ø–∏—Å–∞–ª–æ—Å—å
    console.log('2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–±—ã—Ç–∏–µ –∑–∞–ø–∏—Å–∞–ª–æ—Å—å –≤ ClickHouse...');
    
    // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è async insert
    await new Promise(resolve => setTimeout(resolve, 1000));
    
    const response = await fetch('http://localhost:8123/?query=SELECT%20*%20FROM%20cryptocraze_analytics.user_events%20WHERE%20event_type%20=%20%27test_direct_logger%27%20ORDER%20BY%20timestamp%20DESC%20LIMIT%201');
    const text = await response.text();
    
    console.log('üìä –†–µ–∑—É–ª—å—Ç–∞—Ç –∑–∞–ø—Ä–æ—Å–∞:', text);
    
    if (text.trim() && !text.includes('Code:')) {
      console.log('‚úÖ –°–æ–±—ã—Ç–∏–µ –Ω–∞–π–¥–µ–Ω–æ –≤ ClickHouse!');
    } else {
      console.log('‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ ClickHouse');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error);
    console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error?.message);
    console.error('‚ùå –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error?.stack);
  }
}

testAnalyticsLoggerDirect();