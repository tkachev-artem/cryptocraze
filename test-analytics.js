// –ü—Ä–æ—Å—Ç–æ–π —Ç–µ—Å—Ç –¥–ª—è –ø—Ä–æ–≤–µ—Ä–∫–∏ —Å–∏—Å—Ç–µ–º—ã –∞–Ω–∞–ª–∏—Ç–∏–∫–∏
console.log('üß™ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–Ω–∞–ª–∏—Ç–∏—á–µ—Å–∫—É—é —Å–∏—Å—Ç–µ–º—É ClickHouse...\n');

async function testAnalytics() {
  const baseUrl = 'http://localhost:3000';

  try {
    // 1. –ü—Ä–æ–≤–µ—Ä–∏–º —Å—Ç–∞—Ç—É—Å ClickHouse
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º ClickHouse...');
    const clickhouseStatus = await fetch('http://localhost:8123/ping');
    console.log('   ‚úÖ ClickHouse:', await clickhouseStatus.text());

    // 2. –ü—Ä–æ–≤–µ—Ä–∏–º –∫–æ–ª–∏—á–µ—Å—Ç–≤–æ —Ç–∞–±–ª–∏—Ü
    console.log('\n2Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —Ç–∞–±–ª–∏—Ü—ã...');
    const tablesResponse = await fetch('http://localhost:8123/?query=SHOW%20TABLES%20FROM%20cryptocraze_analytics');
    const tables = await tablesResponse.text();
    console.log('   üìä –¢–∞–±–ª–∏—Ü—ã:', tables.split('\n').filter(t => t).join(', '));

    // 3. –ü—Ä–æ–≤–µ—Ä–∏–º –¥–∞–Ω–Ω—ã–µ
    console.log('\n3Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –¥–∞–Ω–Ω—ã–µ...');
    
    const userEventsCount = await fetch('http://localhost:8123/?query=SELECT%20count()%20FROM%20cryptocraze_analytics.user_events');
    console.log('   üë• –°–æ–±—ã—Ç–∏—è –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª–µ–π:', await userEventsCount.text());
    
    const dealsCount = await fetch('http://localhost:8123/?query=SELECT%20count()%20FROM%20cryptocraze_analytics.deals_analytics');  
    console.log('   üìà –°–¥–µ–ª–∫–∏:', await dealsCount.text());

    // 4. –ü—Ä–æ–≤–µ—Ä–∏–º admin API
    console.log('\n4Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º Admin API...');
    try {
      const adminResponse = await fetch(`${baseUrl}/api/admin/analytics/overview-v2`);
      if (adminResponse.ok) {
        const adminData = await adminResponse.json();
        console.log('   ‚úÖ Admin API —Ä–∞–±–æ—Ç–∞–µ—Ç! –î–∞–Ω–Ω—ã–µ:', JSON.stringify(adminData, null, 2));
      } else {
        console.log('   ‚ùå Admin API –Ω–µ–¥–æ—Å—Ç—É–ø–µ–Ω:', adminResponse.status);
      }
    } catch (e) {
      console.log('   ‚ùå –û—à–∏–±–∫–∞ Admin API:', e.message);
    }

    // 5. –ü—Ä–æ–≤–µ—Ä–∏–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é  
    console.log('\n5Ô∏è‚É£ –¢–µ—Å—Ç–∏—Ä—É–µ–º –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏—é...');
    try {
      const loginResponse = await fetch(`${baseUrl}/api/login`);
      if (loginResponse.ok) {
        const loginData = await loginResponse.json();
        console.log('   ‚úÖ –õ–æ–≥–∏–Ω —Ä–∞–±–æ—Ç–∞–µ—Ç:', loginData.success ? '–£—Å–ø–µ—à–Ω–æ' : '–û—à–∏–±–∫–∞');
        
        // –ü–æ–¥–æ–∂–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –∑–∞–ø–∏—Å–∏ –≤ ClickHouse
        await new Promise(resolve => setTimeout(resolve, 2000));
        
        // –ü—Ä–æ–≤–µ—Ä–∏–º, –¥–æ–±–∞–≤–∏–ª–æ—Å—å –ª–∏ —Å–æ–±—ã—Ç–∏–µ
        const newUserEventsCount = await fetch('http://localhost:8123/?query=SELECT%20count()%20FROM%20cryptocraze_analytics.user_events');
        const newCount = await newUserEventsCount.text();
        console.log('   üìä –°–æ–±—ã—Ç–∏—è –ø–æ—Å–ª–µ –ª–æ–≥–∏–Ω–∞:', newCount);
      } else {
        console.log('   ‚ùå –õ–æ–≥–∏–Ω –Ω–µ —Ä–∞–±–æ—Ç–∞–µ—Ç:', loginResponse.status);
      }
    } catch (e) {
      console.log('   ‚ùå –û—à–∏–±–∫–∞ –ª–æ–≥–∏–Ω–∞:', e.message);
    }

    console.log('\n‚ú® –¢–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏–µ –∑–∞–≤–µ—Ä—à–µ–Ω–æ!');

  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è:', error);
  }
}

testAnalytics();