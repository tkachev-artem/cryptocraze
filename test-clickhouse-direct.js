// –ü—Ä—è–º–æ–π —Ç–µ—Å—Ç ClickHouse –≤—Å—Ç–∞–≤–∫–∏ —Å–æ–±—ã—Ç–∏–π
import { createClient } from '@clickhouse/client';

const client = createClient({
  host: 'http://localhost:8123',
});

async function testDirectInsert() {
  console.log('üîß –¢–µ—Å—Ç–∏—Ä—É–µ–º –ø—Ä—è–º—É—é –≤—Å—Ç–∞–≤–∫—É –≤ ClickHouse...');
  
  try {
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ
    console.log('1Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º –ø–æ–¥–∫–ª—é—á–µ–Ω–∏–µ...');
    const pingResult = await client.ping();
    console.log('‚úÖ –ü–æ–¥–∫–ª—é—á–µ–Ω–∏–µ —É—Å–ø–µ—à–Ω–æ:', pingResult.success);
    
    // –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    console.log('2Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º –±–∞–∑—É –¥–∞–Ω–Ω—ã—Ö...');
    await client.exec({
      query: 'CREATE DATABASE IF NOT EXISTS cryptocraze_analytics'
    });
    
    // –ü–µ—Ä–µ–∫–ª—é—á–∞–µ–º—Å—è –Ω–∞ –±–∞–∑—É
    await client.exec({
      query: 'USE cryptocraze_analytics'
    });
    
    // –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É –µ—Å–ª–∏ –Ω—É–∂–Ω–æ
    console.log('3Ô∏è‚É£ –°–æ–∑–¥–∞–µ–º —Ç–∞–±–ª–∏—Ü—É user_events...');
    await client.exec({
      query: `
        CREATE TABLE IF NOT EXISTS user_events (
          event_id String,
          user_id UInt64,
          event_type LowCardinality(String),
          event_data String,
          session_id String,
          timestamp DateTime64(3),
          created_at DateTime DEFAULT now()
        ) ENGINE = MergeTree()
        ORDER BY (user_id, event_type, timestamp)
        PRIMARY KEY (user_id, event_type, timestamp)
        TTL created_at + INTERVAL 30 DAY DELETE
      `
    });
    
    // –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ
    console.log('4Ô∏è‚É£ –í—Å—Ç–∞–≤–ª—è–µ–º —Ç–µ—Å—Ç–æ–≤–æ–µ —Å–æ–±—ã—Ç–∏–µ...');
    const testEvent = {
      event_id: `test-${Date.now()}`,
      user_id: 123456789,
      event_type: 'test_direct_insert',
      event_data: JSON.stringify({ test: true, timestamp: new Date().toISOString() }),
      session_id: `test-session-${Date.now()}`,
      timestamp: new Date().toISOString().slice(0, 19).replace('T', ' ')
    };
    
    console.log('üìã –î–∞–Ω–Ω—ã–µ –¥–ª—è –≤—Å—Ç–∞–≤–∫–∏:', JSON.stringify(testEvent, null, 2));
    
    await client.insert({
      table: 'cryptocraze_analytics.user_events',
      values: [testEvent],
      format: 'JSONEachRow'
    });
    
    console.log('‚úÖ –°–æ–±—ã—Ç–∏–µ –≤—Å—Ç–∞–≤–ª–µ–Ω–æ —É—Å–ø–µ—à–Ω–æ!');
    
    // –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–±—ã—Ç–∏–µ –∑–∞–ø–∏—Å–∞–ª–æ—Å—å
    console.log('5Ô∏è‚É£ –ü—Ä–æ–≤–µ—Ä—è–µ–º —á—Ç–æ —Å–æ–±—ã—Ç–∏–µ –∑–∞–ø–∏—Å–∞–ª–æ—Å—å...');
    const result = await client.query({
      query: `
        SELECT * FROM cryptocraze_analytics.user_events 
        WHERE event_type = 'test_direct_insert' 
        ORDER BY timestamp DESC 
        LIMIT 1
      `,
      format: 'JSONEachRow'
    });
    
    const rows = await result.json();
    console.log('üìä –ù–∞–π–¥–µ–Ω–Ω—ã–µ —Å–æ–±—ã—Ç–∏—è:', rows);
    
    if (rows.length > 0) {
      console.log('‚úÖ –¢–µ—Å—Ç —É—Å–ø–µ—à–Ω–æ –∑–∞–≤–µ—Ä—à–µ–Ω! ClickHouse —Ä–∞–±–æ—Ç–∞–µ—Ç –∫–æ—Ä—Ä–µ–∫—Ç–Ω–æ.');
    } else {
      console.log('‚ùå –°–æ–±—ã—Ç–∏–µ –Ω–µ –Ω–∞–π–¥–µ–Ω–æ –≤ ClickHouse');
    }
    
  } catch (error) {
    console.error('‚ùå –û—à–∏–±–∫–∞ —Ç–µ—Å—Ç–∞:', error);
    console.error('‚ùå –î–µ—Ç–∞–ª–∏ –æ—à–∏–±–∫–∏:', error?.message);
    console.error('‚ùå –°—Ç–µ–∫ –æ—à–∏–±–∫–∏:', error?.stack);
  } finally {
    await client.close();
  }
}

testDirectInsert();