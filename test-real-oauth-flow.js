// –¢–µ—Å—Ç —Ä–µ–∞–ª—å–Ω–æ–≥–æ OAuth flow —Å –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–æ–º ClickHouse
import { createClient } from '@clickhouse/client';

const client = createClient({
  host: 'http://localhost:8123',
  database: 'cryptocraze_analytics',
  username: 'default',
  password: ''
});

let isMonitoring = true;

async function monitorLoginEvents() {
  console.log('üîç –ú–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥ login —Å–æ–±—ã—Ç–∏–π –≤ ClickHouse...');
  console.log('üì± –û—Ç–∫—Ä–æ–π—Ç–µ –±—Ä–∞—É–∑–µ—Ä –∏ –∞–≤—Ç–æ—Ä–∏–∑—É–π—Ç–µ—Å—å —á–µ—Ä–µ–∑ Google: http://localhost:3001');
  console.log('‚è∞ –û–∂–∏–¥–∞–Ω–∏–µ –Ω–æ–≤—ã—Ö —Å–æ–±—ã—Ç–∏–π...\n');
  
  const startTime = Math.floor(Date.now() / 1000) - 60; // –ù–∞—á–∏–Ω–∞–µ–º —Å –º–∏–Ω—É—Ç—ã –Ω–∞–∑–∞–¥
  let lastTimestamp = startTime;
  
  while (isMonitoring) {
    try {
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –Ω–æ–≤—ã–µ login —Å–æ–±—ã—Ç–∏—è
      const query = `
        SELECT 
          event_id,
          user_id,
          event_type,
          event_data,
          timestamp,
          session_id,
          formatDateTime(toDateTime(timestamp), '%Y-%m-%d %H:%M:%S') as formatted_time
        FROM cryptocraze_analytics.user_events 
        WHERE event_type = 'login' 
        AND timestamp > ${lastTimestamp}
        ORDER BY timestamp DESC
        LIMIT 5
      `;
      
      const result = await client.query({
        query: query,
        format: 'JSONEachRow'
      });
      
      const rows = await result.json();
      
      if (rows.length > 0) {
        console.log(`üéâ –ù–∞–π–¥–µ–Ω–æ ${rows.length} –Ω–æ–≤—ã—Ö login —Å–æ–±—ã—Ç–∏–π:`);
        
        for (const row of rows) {
          console.log(`\nüìã Login —Å–æ–±—ã—Ç–∏–µ:`);
          console.log(`   üÜî User ID: ${row.user_id}`);
          console.log(`   ‚è∞ –í—Ä–µ–º—è: ${row.formatted_time}`);
          console.log(`   üîë Session ID: ${row.session_id}`);
          console.log(`   üìä –î–∞–Ω–Ω—ã–µ: ${row.event_data}`);
          
          lastTimestamp = Math.max(lastTimestamp, row.timestamp);
        }
        
        console.log('\n‚úÖ Login —Å–æ–±—ã—Ç–∏—è —É—Å–ø–µ—à–Ω–æ –∑–∞–ø–∏—Å—ã–≤–∞—é—Ç—Å—è –≤ ClickHouse!');
        console.log('üîÑ –ü—Ä–æ–¥–æ–ª–∂–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...\n');
      }
      
      // –ü—Ä–æ–≤–µ—Ä—è–µ–º –∫–∞–∂–¥—ã–µ 3 —Å–µ–∫—É–Ω–¥—ã
      await new Promise(resolve => setTimeout(resolve, 3000));
      
    } catch (error) {
      console.error('‚ùå –û—à–∏–±–∫–∞ –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥–∞:', error);
      await new Promise(resolve => setTimeout(resolve, 5000));
    }
  }
}

async function stopMonitoring() {
  console.log('\nüõë –û—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥...');
  isMonitoring = false;
  process.exit(0);
}

// –û–±—Ä–∞–±–æ—Ç—á–∏–∫ –≤—ã—Ö–æ–¥–∞
process.on('SIGINT', stopMonitoring);
process.on('SIGTERM', stopMonitoring);

// –ó–∞–ø—É—Å–∫–∞–µ–º –º–æ–Ω–∏—Ç–æ—Ä–∏–Ω–≥
monitorLoginEvents().catch(console.error);