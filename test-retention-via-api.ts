// –°–∫—Ä–∏–ø—Ç –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤—ã—Ö –¥–∞–Ω–Ω—ã—Ö retention —á–µ—Ä–µ–∑ API
async function createTestRetentionDataViaAPI() {
  try {
    const testUserId = '116069980752518862717';
    const baseUrl = 'http://localhost:1111/api';
    
    console.log('üîß Creating test retention data via API...');
    console.log(`üë§ Test user ID: ${testUserId}`);
    
    // –°–æ–±—ã—Ç–∏–µ —É—Å—Ç–∞–Ω–æ–≤–∫–∏ - 19.09.2025 (–≤—á–µ—Ä–∞)
    const installEvents = [
      {
        eventType: 'first_open',
        timestamp: '2025-09-19T10:00:00.000Z',
        data: { source: 'test', version: '1.0.0' }
      },
      {
        eventType: 'login',
        timestamp: '2025-09-19T10:01:00.000Z',
        data: { method: 'test' }
      }
    ];
    
    // –°–æ–±—ã—Ç–∏–µ –≤–æ–∑–≤—Ä–∞—Ç–∞ D1 - 20.09.2025 (—Å–µ–≥–æ–¥–Ω—è)
    const returnEvents = [
      {
        eventType: 'login',
        timestamp: '2025-09-20T14:30:00.000Z',
        data: { method: 'test', return_visit: true }
      },
      {
        eventType: 'page_view',
        timestamp: '2025-09-20T14:31:00.000Z',
        data: { page: 'dashboard' }
      }
    ];
    
    const allEvents = [...installEvents, ...returnEvents];
    
    console.log(`üìä Sending ${allEvents.length} events...`);
    
    // –û—Ç–ø—Ä–∞–≤–ª—è–µ–º —Å–æ–±—ã—Ç–∏—è —á–µ—Ä–µ–∑ API analytics/event
    for (const event of allEvents) {
      const response = await fetch(`${baseUrl}/analytics/event`, {
        method: 'POST',
        headers: {
          'Content-Type': 'application/json',
          'User-Agent': 'TestScript/1.0'
        },
        body: JSON.stringify({
          userId: testUserId,
          eventType: event.eventType,
          eventData: event.data,
          timestamp: event.timestamp
        })
      });
      
      if (response.ok) {
        const result = await response.text();
        console.log(`‚úÖ Event ${event.eventType} sent:`, result);
      } else {
        console.error(`‚ùå Failed to send ${event.eventType}:`, response.status, response.statusText);
      }
      
      // –ù–µ–±–æ–ª—å—à–∞—è –ø–∞—É–∑–∞ –º–µ–∂–¥—É –∑–∞–ø—Ä–æ—Å–∞–º–∏
      await new Promise(resolve => setTimeout(resolve, 100));
    }
    
    if (response.ok) {
      const result = await response.text();
      console.log('‚úÖ Events sent successfully:', result);
    } else {
      console.error('‚ùå Failed to send events:', response.status, response.statusText);
      const errorText = await response.text();
      console.error('Error details:', errorText);
    }
    
    // –ü–æ–¥–æ–∂–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
    console.log('‚è≥ Waiting for data processing...');
    await new Promise(resolve => setTimeout(resolve, 2000));
    
    // –ü—Ä–æ–≤–µ—Ä–∏–º –¥–∞–Ω–Ω—ã–µ —á–µ—Ä–µ–∑ dashboard API
    console.log('üîç Checking D1 retention trend...');
    const trendResponse = await fetch(`${baseUrl}/admin/dashboard/metric/D1/trend?days=7`, {
      headers: {
        'Cookie': 'test-admin=true' // –î–ª—è –æ–±—Ö–æ–¥–∞ –∞–≤—Ç–æ—Ä–∏–∑–∞—Ü–∏–∏ –≤ —Ç–µ—Å—Ç–∞—Ö
      }
    });
    
    if (trendResponse.ok) {
      const trendData = await trendResponse.json();
      console.log('üìà D1 Retention trend data:', JSON.stringify(trendData, null, 2));
    } else {
      console.log('‚ö†Ô∏è Could not fetch trend data (auth required)');
    }
    
    console.log('üéâ Test data creation completed!');
    console.log('üìã Summary:');
    console.log(`   - User: ${testUserId}`);
    console.log(`   - Install: 19.09.2025 10:00`);
    console.log(`   - Return: 20.09.2025 14:30`);
    console.log(`   - Expected D1 retention: User should appear in today's data`);
    
  } catch (error) {
    console.error('‚ùå Error:', error);
  }
}

// –ó–∞–ø—É—Å–∫–∞–µ–º —Å–∫—Ä–∏–ø—Ç
createTestRetentionDataViaAPI();
