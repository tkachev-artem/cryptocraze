/**
 * –ê–≤—Ç–æ—Ç–µ—Å—Ç—ã –¥–ª—è Admin Dashboard
 * –ü—Ä–æ–≤–µ—Ä—è–µ—Ç –≤—Å–µ –º–µ—Ç—Ä–∏–∫–∏ –∏ –∏—Ö –ø—Ä–∞–≤–∏–ª—å–Ω–æ—Å—Ç—å
 */

const API_BASE = 'http://localhost:3001';

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è HTTP –∑–∞–ø—Ä–æ—Å–æ–≤
async function makeRequest(endpoint, options = {}) {
  const response = await fetch(`${API_BASE}${endpoint}`, {
    credentials: 'include',
    ...options
  });
  
  if (!response.ok) {
    throw new Error(`HTTP ${response.status}: ${response.statusText}`);
  }
  
  return await response.json();
}

// –£—Ç–∏–ª–∏—Ç–∞ –¥–ª—è —Å–æ–∑–¥–∞–Ω–∏—è —Ç–µ—Å—Ç–æ–≤–æ–≥–æ —Å–æ–±—ã—Ç–∏—è
async function createTestEvent(userId, eventType, eventData = {}) {
  return makeRequest('/api/test/analytics', {
    method: 'POST',
    headers: { 'Content-Type': 'application/json' },
    body: JSON.stringify({ userId, eventType, eventData })
  });
}

// –¢–µ—Å—Ç 1: –ü—Ä–æ–≤–µ—Ä–∫–∞ –¥–æ—Å—Ç—É–ø–Ω–æ—Å—Ç–∏ —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
async function testDashboardEndpoint() {
  console.log('üîç Test 1: Dashboard endpoint accessibility');
  
  try {
    const data = await makeRequest('/api/admin/analytics/overview-v2');
    console.log('‚úÖ Dashboard endpoint is accessible');
    console.log(`üìä Data source: ${data.dataSource}`);
    console.log(`üïí Last updated: ${data.lastUpdated}`);
    return data;
  } catch (error) {
    console.log('‚ùå Dashboard endpoint failed:', error.message);
    throw error;
  }
}

// –¢–µ—Å—Ç 2: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Å—Ç—Ä—É–∫—Ç—É—Ä—ã –¥–∞–Ω–Ω—ã—Ö
async function testDataStructure(dashboardData) {
  console.log('\nüîç Test 2: Data structure validation');
  
  const expectedSections = ['users', 'trading', 'revenue', 'engagement', 'adMetrics'];
  const missingSections = expectedSections.filter(section => !dashboardData[section]);
  
  if (missingSections.length > 0) {
    console.log(`‚ùå Missing sections: ${missingSections.join(', ')}`);
    return false;
  }
  
  console.log('‚úÖ All required data sections present');
  
  // –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø–æ–ª—å–∑–æ–≤–∞—Ç–µ–ª—å—Å–∫–∏—Ö –º–µ—Ç—Ä–∏–∫
  const userMetrics = ['total_users', 'daily_active_users', 'retention_d1', 'retention_d7'];
  const missingUserMetrics = userMetrics.filter(metric => dashboardData.users[metric] === undefined);
  
  if (missingUserMetrics.length > 0) {
    console.log(`‚ùå Missing user metrics: ${missingUserMetrics.join(', ')}`);
    return false;
  }
  
  console.log('‚úÖ All user metrics present');
  return true;
}

// –¢–µ—Å—Ç 3: –ü—Ä–æ–≤–µ—Ä–∫–∞ tutorial –º–µ—Ç—Ä–∏–∫
async function testTutorialMetrics() {
  console.log('\nüîç Test 3: Tutorial metrics functionality');
  
  // –°–æ–∑–¥–∞–µ–º —Ç–µ—Å—Ç–æ–≤—ã–µ —Å–æ–±—ã—Ç–∏—è —Ç—É—Ç–æ—Ä–∏–∞–ª–∞
  console.log('üìù Creating tutorial events...');
  await createTestEvent('test_tutorial_1', 'tutorial_progress', { action: 'start', step: 'main_tutorial' });
  await createTestEvent('test_tutorial_1', 'tutorial_progress', { action: 'skip', step: 'main_tutorial' });
  await createTestEvent('test_tutorial_2', 'tutorial_progress', { action: 'start', step: 'main_tutorial' });
  await createTestEvent('test_tutorial_2', 'tutorial_progress', { action: 'complete', step: 'main_tutorial' });
  
  // –ñ–¥–µ–º –Ω–µ–º–Ω–æ–≥–æ –¥–ª—è –æ–±—Ä–∞–±–æ—Ç–∫–∏
  await new Promise(resolve => setTimeout(resolve, 1000));
  
  const data = await makeRequest('/api/admin/analytics/overview-v2');
  const { tutorialCompletionRate, tutorialSkipRate } = data.engagement;
  
  console.log(`üìä Tutorial Completion Rate: ${(tutorialCompletionRate * 100).toFixed(1)}%`);
  console.log(`üìä Tutorial Skip Rate: ${(tutorialSkipRate * 100).toFixed(1)}%`);
  
  if (tutorialCompletionRate > 0 && tutorialSkipRate > 0) {
    console.log('‚úÖ Tutorial metrics working correctly');
    return true;
  } else {
    console.log('‚ùå Tutorial metrics not updating');
    return false;
  }
}

// –¢–µ—Å—Ç 4: –ü—Ä–æ–≤–µ—Ä–∫–∞ retention –º–µ—Ç—Ä–∏–∫
async function testRetentionMetrics() {
  console.log('\nüîç Test 4: Retention metrics functionality');
  
  // –°–æ–∑–¥–∞–µ–º —Å–æ–±—ã—Ç–∏—è —Ä–µ–≥–∏—Å—Ç—Ä–∞—Ü–∏–∏ –∏ –∞–∫—Ç–∏–≤–Ω–æ—Å—Ç–∏
  console.log('üìù Creating retention events...');
  await createTestEvent('test_retention_1', 'user_register', { registrationMethod: 'test' });
  await createTestEvent('test_retention_1', 'login', { timestamp: new Date().toISOString() });
  await createTestEvent('test_retention_2', 'user_register', { registrationMethod: 'test' });
  await createTestEvent('test_retention_2', 'screen_view', { screen: '/dashboard' });
  
  await new Promise(resolve => setTimeout(resolve, 1000));
  
  const data = await makeRequest('/api/admin/analytics/overview-v2');
  const { retention_d1, retention_d7, retention_d30 } = data.users;
  
  console.log(`üìä Day 1 Retention: ${(retention_d1 * 100).toFixed(1)}%`);
  console.log(`üìä Day 7 Retention: ${(retention_d7 * 100).toFixed(1)}%`);
  console.log(`üìä Day 30 Retention: ${(retention_d30 * 100).toFixed(1)}%`);
  
  if (retention_d1 !== null && retention_d1 >= 0) {
    console.log('‚úÖ Retention metrics working correctly');
    return true;
  } else {
    console.log('‚ùå Retention metrics not updating');
    return false;
  }
}

// –¢–µ—Å—Ç 5: –ü—Ä–æ–≤–µ—Ä–∫–∞ ad –º–µ—Ç—Ä–∏–∫
async function testAdMetrics() {
  console.log('\nüîç Test 5: Ad metrics functionality');
  
  console.log('üìù Creating ad events...');
  await createTestEvent('test_ad_1', 'ad_impression', { adType: 'banner' });
  await createTestEvent('test_ad_1', 'ad_click', { adType: 'banner' });
  await createTestEvent('test_ad_1', 'app_install', { platform: 'web' });
  await createTestEvent('test_ad_2', 'ad_impression', { adType: 'video' });
  await createTestEvent('test_ad_2', 'ad_engagement', { action: 'watch_complete' });
  
  await new Promise(resolve => setTimeout(resolve, 1000));
  
  const data = await makeRequest('/api/admin/analytics/overview-v2');
  const { totalImpressions, totalClicks, totalInstalls, avgCTR } = data.adMetrics;
  
  console.log(`üìä Total Impressions: ${totalImpressions}`);
  console.log(`üìä Total Clicks: ${totalClicks}`);
  console.log(`üìä Total Installs: ${totalInstalls}`);
  console.log(`üìä Average CTR: ${(avgCTR * 100).toFixed(2)}%`);
  
  if (totalImpressions > 0 && totalClicks > 0) {
    console.log('‚úÖ Ad metrics working correctly');
    return true;
  } else {
    console.log('‚ùå Ad metrics not updating');
    return false;
  }
}

// –¢–µ—Å—Ç 6: –ü—Ä–æ–≤–µ—Ä–∫–∞ screen view –º–µ—Ç—Ä–∏–∫
async function testScreenViewMetrics() {
  console.log('\nüîç Test 6: Screen view metrics functionality');
  
  console.log('üìù Creating screen view events...');
  await createTestEvent('test_screen_1', 'screen_view', { screen: '/dashboard' });
  await createTestEvent('test_screen_1', 'screen_view', { screen: '/trade' });
  await createTestEvent('test_screen_1', 'screen_view', { screen: '/admin' });
  
  await new Promise(resolve => setTimeout(resolve, 1000));
  
  const data = await makeRequest('/api/admin/analytics/overview-v2');
  const { screensOpened } = data.engagement;
  
  console.log(`üìä Screens Opened: ${screensOpened}`);
  
  if (screensOpened > 0) {
    console.log('‚úÖ Screen view metrics working correctly');
    return true;
  } else {
    console.log('‚ùå Screen view metrics not updating');
    return false;
  }
}

// –¢–µ—Å—Ç 7: –ü—Ä–æ–≤–µ—Ä–∫–∞ —Ç–æ—Ä–≥–æ–≤—ã—Ö –º–µ—Ç—Ä–∏–∫
async function testTradingMetrics() {
  console.log('\nüîç Test 7: Trading metrics functionality');
  
  console.log('üìù Creating trading events...');
  await createTestEvent('test_trader_1', 'trade_open', { 
    symbol: 'BTCUSDT', 
    amount: 100, 
    direction: 'up',
    leverage: 10 
  });
  
  await new Promise(resolve => setTimeout(resolve, 1000));
  
  const data = await makeRequest('/api/admin/analytics/overview-v2');
  const { totalTrades, activeDeals, tradingUsers, successRate } = data.trading;
  
  console.log(`üìä Total Trades: ${totalTrades}`);
  console.log(`üìä Active Deals: ${activeDeals}`);
  console.log(`üìä Trading Users: ${tradingUsers}`);
  console.log(`üìä Success Rate: ${successRate}%`);
  
  if (totalTrades > 0) {
    console.log('‚úÖ Trading metrics working correctly');
    return true;
  } else {
    console.log('‚ùå Trading metrics not updating');
    return false;
  }
}

// –¢–µ—Å—Ç 8: –ü—Ä–æ–≤–µ—Ä–∫–∞ –ø—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç–∏
async function testPerformance() {
  console.log('\nüîç Test 8: Dashboard performance test');
  
  const startTime = Date.now();
  await makeRequest('/api/admin/analytics/overview-v2');
  const endTime = Date.now();
  
  const responseTime = endTime - startTime;
  console.log(`‚ö° Response time: ${responseTime}ms`);
  
  if (responseTime < 5000) {
    console.log('‚úÖ Dashboard performance is acceptable');
    return true;
  } else {
    console.log('‚ùå Dashboard response too slow');
    return false;
  }
}

// –û—Å–Ω–æ–≤–Ω–∞—è —Ñ—É–Ω–∫—Ü–∏—è —Ç–µ—Å—Ç–∏—Ä–æ–≤–∞–Ω–∏—è
async function runAllTests() {
  console.log('üöÄ Starting Admin Dashboard Automated Tests\n');
  
  const testResults = [];
  
  try {
    // –¢–µ—Å—Ç 1: –î–æ—Å—Ç—É–ø–Ω–æ—Å—Ç—å —ç–Ω–¥–ø–æ–∏–Ω—Ç–∞
    const dashboardData = await testDashboardEndpoint();
    testResults.push({ name: 'Endpoint Access', passed: true });
    
    // –¢–µ—Å—Ç 2: –°—Ç—Ä—É–∫—Ç—É—Ä–∞ –¥–∞–Ω–Ω—ã—Ö
    const structureValid = await testDataStructure(dashboardData);
    testResults.push({ name: 'Data Structure', passed: structureValid });
    
    // –¢–µ—Å—Ç 3: Tutorial –º–µ—Ç—Ä–∏–∫–∏
    const tutorialWorking = await testTutorialMetrics();
    testResults.push({ name: 'Tutorial Metrics', passed: tutorialWorking });
    
    // –¢–µ—Å—Ç 4: Retention –º–µ—Ç—Ä–∏–∫–∏
    const retentionWorking = await testRetentionMetrics();
    testResults.push({ name: 'Retention Metrics', passed: retentionWorking });
    
    // –¢–µ—Å—Ç 5: Ad –º–µ—Ç—Ä–∏–∫–∏
    const adWorking = await testAdMetrics();
    testResults.push({ name: 'Ad Metrics', passed: adWorking });
    
    // –¢–µ—Å—Ç 6: Screen view –º–µ—Ç—Ä–∏–∫–∏
    const screenWorking = await testScreenViewMetrics();
    testResults.push({ name: 'Screen View Metrics', passed: screenWorking });
    
    // –¢–µ—Å—Ç 7: Trading –º–µ—Ç—Ä–∏–∫–∏
    const tradingWorking = await testTradingMetrics();
    testResults.push({ name: 'Trading Metrics', passed: tradingWorking });
    
    // –¢–µ—Å—Ç 8: –ü—Ä–æ–∏–∑–≤–æ–¥–∏—Ç–µ–ª—å–Ω–æ—Å—Ç—å
    const performanceOk = await testPerformance();
    testResults.push({ name: 'Performance', passed: performanceOk });
    
  } catch (error) {
    console.log(`‚ùå Critical error during testing: ${error.message}`);
    testResults.push({ name: 'Critical Error', passed: false, error: error.message });
  }
  
  // –°–≤–æ–¥–∫–∞ —Ä–µ–∑—É–ª—å—Ç–∞—Ç–æ–≤
  console.log('\nüìã Test Results Summary:');
  console.log('‚ïê'.repeat(50));
  
  let passedTests = 0;
  testResults.forEach(result => {
    const status = result.passed ? '‚úÖ PASSED' : '‚ùå FAILED';
    console.log(`${result.name.padEnd(20)} | ${status}`);
    if (result.passed) passedTests++;
  });
  
  console.log('‚ïê'.repeat(50));
  console.log(`Total: ${passedTests}/${testResults.length} tests passed`);
  
  if (passedTests === testResults.length) {
    console.log('üéâ All tests passed! Admin Dashboard is working correctly.');
  } else {
    console.log('‚ö†Ô∏è  Some tests failed. Please check the issues above.');
  }
  
  return testResults;
}

// –≠–∫—Å–ø–æ—Ä—Ç –¥–ª—è –∏—Å–ø–æ–ª—å–∑–æ–≤–∞–Ω–∏—è
if (typeof module !== 'undefined' && module.exports) {
  module.exports = { runAllTests };
} else {
  // –ó–∞–ø—É—Å–∫ –ø—Ä–∏ –ø—Ä—è–º–æ–º –≤—ã–ø–æ–ª–Ω–µ–Ω–∏–∏
  runAllTests().catch(console.error);
}